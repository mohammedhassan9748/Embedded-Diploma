
stm32f103x8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016dc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800180c  0800180c  0001180c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800189c  0800189c  000118a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800189c  0800189c  000118a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800189c  080018a4  000118a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800189c  0800189c  0001189c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080018a0  080018a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000118a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000000  080018a4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  080018a4  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000118a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003558  00000000  00000000  000118cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b82  00000000  00000000  00014e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001792  00000000  00000000  000159a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000350  00000000  00000000  00017140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002c8  00000000  00000000  00017490  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000010a4  00000000  00000000  00017758  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001379  00000000  00000000  000187fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000aa9b  00000000  00000000  00019b75  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00024610  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ba4  00000000  00000000  0002468c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080017f4 	.word	0x080017f4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080017f4 	.word	0x080017f4

08000170 <HAL_SERVO_Init>:
* @retval 			- None.
*
* Note				- None.
*
*/
void HAL_SERVO_Init(SERVO_Config_t* SERVO_ConfigPtr){
 8000170:	b580      	push	{r7, lr}
 8000172:	b0a8      	sub	sp, #160	; 0xa0
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]

	uint8_t chIn = SERVO_ConfigPtr->SERVO_ChannelIndex;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	791b      	ldrb	r3, [r3, #4]
 800017c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	GPTM_Config_t SERVO_TimerConfigPtr;

	SERVO_TimerConfigPtr.TIMx = SERVO_ConfigPtr->SERVO_TimerPeripheral;
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	60fb      	str	r3, [r7, #12]

	SERVO_TimerConfigPtr.GPTM_InputChannelX[0].CH_Enable = GPTM_CH_DISABLED;
 8000186:	2300      	movs	r3, #0
 8000188:	763b      	strb	r3, [r7, #24]
	SERVO_TimerConfigPtr.GPTM_InputChannelX[1].CH_Enable = GPTM_CH_DISABLED;
 800018a:	2300      	movs	r3, #0
 800018c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	SERVO_TimerConfigPtr.GPTM_InputChannelX[2].CH_Enable = GPTM_CH_DISABLED;
 8000190:	2300      	movs	r3, #0
 8000192:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	SERVO_TimerConfigPtr.GPTM_InputChannelX[3].CH_Enable = GPTM_CH_DISABLED;
 8000196:	2300      	movs	r3, #0
 8000198:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

	SERVO_TimerConfigPtr.GPTM_OutputChannelX[0].CH_Enable = GPTM_CH_DISABLED;
 800019c:	2300      	movs	r3, #0
 800019e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	SERVO_TimerConfigPtr.GPTM_OutputChannelX[1].CH_Enable = GPTM_CH_DISABLED;
 80001a2:	2300      	movs	r3, #0
 80001a4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	SERVO_TimerConfigPtr.GPTM_OutputChannelX[2].CH_Enable = GPTM_CH_DISABLED;
 80001a8:	2300      	movs	r3, #0
 80001aa:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
	SERVO_TimerConfigPtr.GPTM_OutputChannelX[3].CH_Enable = GPTM_CH_DISABLED;
 80001ae:	2300      	movs	r3, #0
 80001b0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

	SERVO_TimerConfigPtr.GPTM_OutputChannelX[chIn].CH_Enable = GPTM_CH_ENABLED;
 80001b4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80001b8:	011b      	lsls	r3, r3, #4
 80001ba:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80001be:	4413      	add	r3, r2
 80001c0:	3b58      	subs	r3, #88	; 0x58
 80001c2:	2201      	movs	r2, #1
 80001c4:	701a      	strb	r2, [r3, #0]

	SERVO_TimerConfigPtr.GPTM_OutputChannelX[chIn].CH_Direction = GPTM_CH_DIR_OUTPUT;
 80001c6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80001ca:	011b      	lsls	r3, r3, #4
 80001cc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80001d0:	4413      	add	r3, r2
 80001d2:	3b56      	subs	r3, #86	; 0x56
 80001d4:	2200      	movs	r2, #0
 80001d6:	801a      	strh	r2, [r3, #0]
	SERVO_TimerConfigPtr.GPTM_OutputChannelX[chIn].CH_PreloadEnable = GPTM_CH_OUTPUT_PRELOAD_ENABLE;
 80001d8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80001dc:	011b      	lsls	r3, r3, #4
 80001de:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80001e2:	4413      	add	r3, r2
 80001e4:	3b54      	subs	r3, #84	; 0x54
 80001e6:	2208      	movs	r2, #8
 80001e8:	801a      	strh	r2, [r3, #0]
	SERVO_TimerConfigPtr.GPTM_OutputChannelX[chIn].CH_FastEnable = GPTM_CH_OUTPUT_BEHAVES_NORMALLY;
 80001ea:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80001ee:	011b      	lsls	r3, r3, #4
 80001f0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80001f4:	4413      	add	r3, r2
 80001f6:	3b52      	subs	r3, #82	; 0x52
 80001f8:	2200      	movs	r2, #0
 80001fa:	801a      	strh	r2, [r3, #0]
	SERVO_TimerConfigPtr.GPTM_OutputChannelX[chIn].CH_Mode = GPTM_CH_OUTPUT_MODE_PWM1;
 80001fc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000200:	3304      	adds	r3, #4
 8000202:	011b      	lsls	r3, r3, #4
 8000204:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000208:	4413      	add	r3, r2
 800020a:	3b90      	subs	r3, #144	; 0x90
 800020c:	2260      	movs	r2, #96	; 0x60
 800020e:	801a      	strh	r2, [r3, #0]
	SERVO_TimerConfigPtr.GPTM_OutputChannelX[chIn].CH_ClearEnable = GPTM_CH_OUTPUT_CLEAR_DISABLE;
 8000210:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000214:	3304      	adds	r3, #4
 8000216:	011b      	lsls	r3, r3, #4
 8000218:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800021c:	4413      	add	r3, r2
 800021e:	3b8e      	subs	r3, #142	; 0x8e
 8000220:	2200      	movs	r2, #0
 8000222:	801a      	strh	r2, [r3, #0]
	SERVO_TimerConfigPtr.GPTM_OutputChannelX[chIn].CH_OutputPolaritySelected = GPTM_CH_POLARITY_RISING;
 8000224:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000228:	3304      	adds	r3, #4
 800022a:	011b      	lsls	r3, r3, #4
 800022c:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000230:	4413      	add	r3, r2
 8000232:	3b8c      	subs	r3, #140	; 0x8c
 8000234:	2200      	movs	r2, #0
 8000236:	801a      	strh	r2, [r3, #0]
	SERVO_TimerConfigPtr.GPTM_OutputChannelX[chIn].CH_OCxEnable = GPTM_CH_OUTPUT_OCx_ON;
 8000238:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800023c:	3304      	adds	r3, #4
 800023e:	011b      	lsls	r3, r3, #4
 8000240:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8000244:	4413      	add	r3, r2
 8000246:	3b8a      	subs	r3, #138	; 0x8a
 8000248:	2201      	movs	r2, #1
 800024a:	801a      	strh	r2, [r3, #0]

	SERVO_TimerConfigPtr.GPTM_ExternalTrigger.EXTTRIG_Enable = GPTM_EXTTRIG_DISABLE;
 800024c:	2300      	movs	r3, #0
 800024e:	823b      	strh	r3, [r7, #16]
	SERVO_TimerConfigPtr.GPTM_AutoReloadUpdate = GPTM_AUTO_RELOAD_UPDATE_ON_UPDATE_EVENT;
 8000250:	2380      	movs	r3, #128	; 0x80
 8000252:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	SERVO_TimerConfigPtr.GPTM_CounterMode = GPTM_EDGE_ALIGNED_MODE;
 8000256:	2300      	movs	r3, #0
 8000258:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	SERVO_TimerConfigPtr.GPTM_CounterDirection = GPTM_COUNTER_DIR_UP;
 800025c:	2300      	movs	r3, #0
 800025e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	SERVO_TimerConfigPtr.GPTM_UpdateEvent = GPTM_UPDATE_EVENT_ENABLE;
 8000262:	2300      	movs	r3, #0
 8000264:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	SERVO_TimerConfigPtr.GPTM_UEselectionSrc = GPTM_UPDATE_EVENT_ON_ALL;
 8000268:	2300      	movs	r3, #0
 800026a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	SERVO_TimerConfigPtr.GPTM_SMC_Mode = GPTM_SMC_MODE_DISABLE;
 800026e:	2300      	movs	r3, #0
 8000270:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	SERVO_TimerConfigPtr.GPTM_IRQ_EN = GPTM_IRQ_EN_DISABLE;
 8000274:	2300      	movs	r3, #0
 8000276:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	SERVO_TimerConfigPtr.IRQ_CallBackPtr = NULL_PTR;
 800027a:	2300      	movs	r3, #0
 800027c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	MCAL_GPTM_GPIO_SetPins(&SERVO_TimerConfigPtr);
 8000280:	f107 030c 	add.w	r3, r7, #12
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fd7d 	bl	8000d84 <MCAL_GPTM_GPIO_SetPins>
	MCAL_GPTM_Init(&SERVO_TimerConfigPtr);
 800028a:	f107 030c 	add.w	r3, r7, #12
 800028e:	4618      	mov	r0, r3
 8000290:	f000 fb26 	bl	80008e0 <MCAL_GPTM_Init>
	MCAL_GPTM_SetPreScaler(SERVO_TimerConfigPtr.TIMx, 4);
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	2104      	movs	r1, #4
 8000298:	4618      	mov	r0, r3
 800029a:	f000 ff34 	bl	8001106 <MCAL_GPTM_SetPreScaler>
	MCAL_GPTM_SetAutoReload(SERVO_TimerConfigPtr.TIMx, 40000);
 800029e:	68fb      	ldr	r3, [r7, #12]
 80002a0:	f649 4140 	movw	r1, #40000	; 0x9c40
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 ff20 	bl	80010ea <MCAL_GPTM_SetAutoReload>

	HAL_SERVO_WriteAngle(SERVO_ConfigPtr,SERVO_ConfigPtr->SERVO_Angle);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	795b      	ldrb	r3, [r3, #5]
 80002ae:	4619      	mov	r1, r3
 80002b0:	6878      	ldr	r0, [r7, #4]
 80002b2:	f000 f808 	bl	80002c6 <HAL_SERVO_WriteAngle>

	MCAL_GPTM_StartCounter(SERVO_TimerConfigPtr.TIMx);
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 ff07 	bl	80010cc <MCAL_GPTM_StartCounter>

}
 80002be:	bf00      	nop
 80002c0:	37a0      	adds	r7, #160	; 0xa0
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}

080002c6 <HAL_SERVO_WriteAngle>:
* @retval 			- None.
*
* Note				- None.
*
*/
void HAL_SERVO_WriteAngle(SERVO_Config_t* SERVO_ConfigPtr, uint8_t ServoMotorAngle){
 80002c6:	b580      	push	{r7, lr}
 80002c8:	b084      	sub	sp, #16
 80002ca:	af00      	add	r7, sp, #0
 80002cc:	6078      	str	r0, [r7, #4]
 80002ce:	460b      	mov	r3, r1
 80002d0:	70fb      	strb	r3, [r7, #3]

	uint8_t chIn = SERVO_ConfigPtr->SERVO_ChannelIndex;
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	791b      	ldrb	r3, [r3, #4]
 80002d6:	73fb      	strb	r3, [r7, #15]

	switch(ServoMotorAngle)
 80002d8:	78fb      	ldrb	r3, [r7, #3]
 80002da:	2b5a      	cmp	r3, #90	; 0x5a
 80002dc:	d023      	beq.n	8000326 <HAL_SERVO_WriteAngle+0x60>
 80002de:	2b5a      	cmp	r3, #90	; 0x5a
 80002e0:	dc04      	bgt.n	80002ec <HAL_SERVO_WriteAngle+0x26>
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d007      	beq.n	80002f6 <HAL_SERVO_WriteAngle+0x30>
 80002e6:	2b2d      	cmp	r3, #45	; 0x2d
 80002e8:	d011      	beq.n	800030e <HAL_SERVO_WriteAngle+0x48>
			break;
	}

	//MCAL_GPTM_SetCCRx(SERVO_ConfigPtr->SERVO_TimerPeripheral, chIn, 0);

	return;
 80002ea:	e041      	b.n	8000370 <HAL_SERVO_WriteAngle+0xaa>
	switch(ServoMotorAngle)
 80002ec:	2b87      	cmp	r3, #135	; 0x87
 80002ee:	d026      	beq.n	800033e <HAL_SERVO_WriteAngle+0x78>
 80002f0:	2bb4      	cmp	r3, #180	; 0xb4
 80002f2:	d030      	beq.n	8000356 <HAL_SERVO_WriteAngle+0x90>
	return;
 80002f4:	e03c      	b.n	8000370 <HAL_SERVO_WriteAngle+0xaa>
			MCAL_GPTM_SetCCRx(SERVO_ConfigPtr->SERVO_TimerPeripheral, chIn, 1000);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	7bf9      	ldrb	r1, [r7, #15]
 80002fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000300:	4618      	mov	r0, r3
 8000302:	f000 ff10 	bl	8001126 <MCAL_GPTM_SetCCRx>
			SERVO_ConfigPtr->SERVO_Angle = SERVO_0;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2200      	movs	r2, #0
 800030a:	715a      	strb	r2, [r3, #5]
			break;
 800030c:	e02f      	b.n	800036e <HAL_SERVO_WriteAngle+0xa8>
			MCAL_GPTM_SetCCRx(SERVO_ConfigPtr->SERVO_TimerPeripheral, chIn, 2000);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	7bf9      	ldrb	r1, [r7, #15]
 8000314:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000318:	4618      	mov	r0, r3
 800031a:	f000 ff04 	bl	8001126 <MCAL_GPTM_SetCCRx>
			SERVO_ConfigPtr->SERVO_Angle = SERVO_45;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	222d      	movs	r2, #45	; 0x2d
 8000322:	715a      	strb	r2, [r3, #5]
			break;
 8000324:	e023      	b.n	800036e <HAL_SERVO_WriteAngle+0xa8>
			MCAL_GPTM_SetCCRx(SERVO_ConfigPtr->SERVO_TimerPeripheral, chIn, 3000);
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	7bf9      	ldrb	r1, [r7, #15]
 800032c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000330:	4618      	mov	r0, r3
 8000332:	f000 fef8 	bl	8001126 <MCAL_GPTM_SetCCRx>
			SERVO_ConfigPtr->SERVO_Angle = SERVO_90;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	225a      	movs	r2, #90	; 0x5a
 800033a:	715a      	strb	r2, [r3, #5]
			break;
 800033c:	e017      	b.n	800036e <HAL_SERVO_WriteAngle+0xa8>
			MCAL_GPTM_SetCCRx(SERVO_ConfigPtr->SERVO_TimerPeripheral, chIn, 4000);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	7bf9      	ldrb	r1, [r7, #15]
 8000344:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000348:	4618      	mov	r0, r3
 800034a:	f000 feec 	bl	8001126 <MCAL_GPTM_SetCCRx>
			SERVO_ConfigPtr->SERVO_Angle = SERVO_135;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	2287      	movs	r2, #135	; 0x87
 8000352:	715a      	strb	r2, [r3, #5]
			break;
 8000354:	e00b      	b.n	800036e <HAL_SERVO_WriteAngle+0xa8>
			MCAL_GPTM_SetCCRx(SERVO_ConfigPtr->SERVO_TimerPeripheral, chIn, 5000);
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	7bf9      	ldrb	r1, [r7, #15]
 800035c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000360:	4618      	mov	r0, r3
 8000362:	f000 fee0 	bl	8001126 <MCAL_GPTM_SetCCRx>
			SERVO_ConfigPtr->SERVO_Angle = SERVO_180;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	22b4      	movs	r2, #180	; 0xb4
 800036a:	715a      	strb	r2, [r3, #5]
			break;
 800036c:	bf00      	nop
	return;
 800036e:	bf00      	nop
}
 8000370:	3710      	adds	r7, #16
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <EXTI0_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void EXTI0_IRQHandler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<0);
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <EXTI0_IRQHandler+0x1c>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <EXTI0_IRQHandler+0x1c>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000388:	4b03      	ldr	r3, [pc, #12]	; (8000398 <EXTI0_IRQHandler+0x20>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4798      	blx	r3

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40010400 	.word	0x40010400
 8000398:	2000001c 	.word	0x2000001c

0800039c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<1);
 80003a0:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <EXTI1_IRQHandler+0x1c>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <EXTI1_IRQHandler+0x1c>)
 80003a6:	f043 0302 	orr.w	r3, r3, #2
 80003aa:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 80003ac:	4b03      	ldr	r3, [pc, #12]	; (80003bc <EXTI1_IRQHandler+0x20>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	4798      	blx	r3

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010400 	.word	0x40010400
 80003bc:	2000001c 	.word	0x2000001c

080003c0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<2);
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <EXTI2_IRQHandler+0x1c>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a04      	ldr	r2, [pc, #16]	; (80003dc <EXTI2_IRQHandler+0x1c>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 80003d0:	4b03      	ldr	r3, [pc, #12]	; (80003e0 <EXTI2_IRQHandler+0x20>)
 80003d2:	689b      	ldr	r3, [r3, #8]
 80003d4:	4798      	blx	r3

}
 80003d6:	bf00      	nop
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40010400 	.word	0x40010400
 80003e0:	2000001c 	.word	0x2000001c

080003e4 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<3);
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <EXTI3_IRQHandler+0x1c>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <EXTI3_IRQHandler+0x1c>)
 80003ee:	f043 0308 	orr.w	r3, r3, #8
 80003f2:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[3]();
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <EXTI3_IRQHandler+0x20>)
 80003f6:	68db      	ldr	r3, [r3, #12]
 80003f8:	4798      	blx	r3

}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40010400 	.word	0x40010400
 8000404:	2000001c 	.word	0x2000001c

08000408 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<4);
 800040c:	4b05      	ldr	r3, [pc, #20]	; (8000424 <EXTI4_IRQHandler+0x1c>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <EXTI4_IRQHandler+0x1c>)
 8000412:	f043 0310 	orr.w	r3, r3, #16
 8000416:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[4]();
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <EXTI4_IRQHandler+0x20>)
 800041a:	691b      	ldr	r3, [r3, #16]
 800041c:	4798      	blx	r3

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40010400 	.word	0x40010400
 8000428:	2000001c 	.word	0x2000001c

0800042c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); g_IRQ_CallBackPtr[5]();}
 8000430:	4b26      	ldr	r3, [pc, #152]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 8000432:	695b      	ldr	r3, [r3, #20]
 8000434:	f003 0320 	and.w	r3, r3, #32
 8000438:	2b00      	cmp	r3, #0
 800043a:	d008      	beq.n	800044e <EXTI9_5_IRQHandler+0x22>
 800043c:	4b23      	ldr	r3, [pc, #140]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 800043e:	695b      	ldr	r3, [r3, #20]
 8000440:	4a22      	ldr	r2, [pc, #136]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6153      	str	r3, [r2, #20]
 8000448:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <EXTI9_5_IRQHandler+0xa4>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); g_IRQ_CallBackPtr[6]();}
 800044e:	4b1f      	ldr	r3, [pc, #124]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000456:	2b00      	cmp	r3, #0
 8000458:	d008      	beq.n	800046c <EXTI9_5_IRQHandler+0x40>
 800045a:	4b1c      	ldr	r3, [pc, #112]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a1b      	ldr	r2, [pc, #108]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 8000460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000464:	6153      	str	r3, [r2, #20]
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <EXTI9_5_IRQHandler+0xa4>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); g_IRQ_CallBackPtr[7]();}
 800046c:	4b17      	ldr	r3, [pc, #92]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 800046e:	695b      	ldr	r3, [r3, #20]
 8000470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000474:	2b00      	cmp	r3, #0
 8000476:	d008      	beq.n	800048a <EXTI9_5_IRQHandler+0x5e>
 8000478:	4b14      	ldr	r3, [pc, #80]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 800047a:	695b      	ldr	r3, [r3, #20]
 800047c:	4a13      	ldr	r2, [pc, #76]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 800047e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000482:	6153      	str	r3, [r2, #20]
 8000484:	4b12      	ldr	r3, [pc, #72]	; (80004d0 <EXTI9_5_IRQHandler+0xa4>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); g_IRQ_CallBackPtr[8]();}
 800048a:	4b10      	ldr	r3, [pc, #64]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 800048c:	695b      	ldr	r3, [r3, #20]
 800048e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000492:	2b00      	cmp	r3, #0
 8000494:	d008      	beq.n	80004a8 <EXTI9_5_IRQHandler+0x7c>
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 800049c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <EXTI9_5_IRQHandler+0xa4>)
 80004a4:	6a1b      	ldr	r3, [r3, #32]
 80004a6:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); g_IRQ_CallBackPtr[9]();}
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d008      	beq.n	80004c6 <EXTI9_5_IRQHandler+0x9a>
 80004b4:	4b05      	ldr	r3, [pc, #20]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 80004b6:	695b      	ldr	r3, [r3, #20]
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <EXTI9_5_IRQHandler+0xa0>)
 80004ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004be:	6153      	str	r3, [r2, #20]
 80004c0:	4b03      	ldr	r3, [pc, #12]	; (80004d0 <EXTI9_5_IRQHandler+0xa4>)
 80004c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c4:	4798      	blx	r3
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40010400 	.word	0x40010400
 80004d0:	2000001c 	.word	0x2000001c

080004d4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); g_IRQ_CallBackPtr[10]();}
 80004d8:	4b26      	ldr	r3, [pc, #152]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 80004da:	695b      	ldr	r3, [r3, #20]
 80004dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d008      	beq.n	80004f6 <EXTI15_10_IRQHandler+0x22>
 80004e4:	4b23      	ldr	r3, [pc, #140]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 80004e6:	695b      	ldr	r3, [r3, #20]
 80004e8:	4a22      	ldr	r2, [pc, #136]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 80004ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ee:	6153      	str	r3, [r2, #20]
 80004f0:	4b21      	ldr	r3, [pc, #132]	; (8000578 <EXTI15_10_IRQHandler+0xa4>)
 80004f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004f4:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); g_IRQ_CallBackPtr[11]();}
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d008      	beq.n	8000514 <EXTI15_10_IRQHandler+0x40>
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a1b      	ldr	r2, [pc, #108]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 8000508:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b1a      	ldr	r3, [pc, #104]	; (8000578 <EXTI15_10_IRQHandler+0xa4>)
 8000510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000512:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); g_IRQ_CallBackPtr[12]();}
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 8000516:	695b      	ldr	r3, [r3, #20]
 8000518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800051c:	2b00      	cmp	r3, #0
 800051e:	d008      	beq.n	8000532 <EXTI15_10_IRQHandler+0x5e>
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 8000522:	695b      	ldr	r3, [r3, #20]
 8000524:	4a13      	ldr	r2, [pc, #76]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 8000526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800052a:	6153      	str	r3, [r2, #20]
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <EXTI15_10_IRQHandler+0xa4>)
 800052e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000530:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); g_IRQ_CallBackPtr[13]();}
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800053a:	2b00      	cmp	r3, #0
 800053c:	d008      	beq.n	8000550 <EXTI15_10_IRQHandler+0x7c>
 800053e:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 8000544:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <EXTI15_10_IRQHandler+0xa4>)
 800054c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800054e:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); g_IRQ_CallBackPtr[14]();}
 8000550:	4b08      	ldr	r3, [pc, #32]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 8000552:	695b      	ldr	r3, [r3, #20]
 8000554:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000558:	2b00      	cmp	r3, #0
 800055a:	d008      	beq.n	800056e <EXTI15_10_IRQHandler+0x9a>
 800055c:	4b05      	ldr	r3, [pc, #20]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 800055e:	695b      	ldr	r3, [r3, #20]
 8000560:	4a04      	ldr	r2, [pc, #16]	; (8000574 <EXTI15_10_IRQHandler+0xa0>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000566:	6153      	str	r3, [r2, #20]
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <EXTI15_10_IRQHandler+0xa4>)
 800056a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800056c:	4798      	blx	r3
}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40010400 	.word	0x40010400
 8000578:	2000001c 	.word	0x2000001c

0800057c <Get_CRx_Position>:
/*================================================================
 * Description :
 * Private Function to get the 4 bits position required to configure of the CRx register according to the  pin number
 * of the specified GPIO_PinConfigPtr
 */
static uint8_t Get_CRx_Position(uint16_t PinNumber){
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
	//Case PinNumber < GPIO_PIN_8
	switch(PinNumber){
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	2b80      	cmp	r3, #128	; 0x80
 800058a:	d042      	beq.n	8000612 <Get_CRx_Position+0x96>
 800058c:	2b80      	cmp	r3, #128	; 0x80
 800058e:	dc11      	bgt.n	80005b4 <Get_CRx_Position+0x38>
 8000590:	2b08      	cmp	r3, #8
 8000592:	d036      	beq.n	8000602 <Get_CRx_Position+0x86>
 8000594:	2b08      	cmp	r3, #8
 8000596:	dc06      	bgt.n	80005a6 <Get_CRx_Position+0x2a>
 8000598:	2b02      	cmp	r3, #2
 800059a:	d02e      	beq.n	80005fa <Get_CRx_Position+0x7e>
 800059c:	2b04      	cmp	r3, #4
 800059e:	d02e      	beq.n	80005fe <Get_CRx_Position+0x82>
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d028      	beq.n	80005f6 <Get_CRx_Position+0x7a>
 80005a4:	e047      	b.n	8000636 <Get_CRx_Position+0xba>
 80005a6:	2b20      	cmp	r3, #32
 80005a8:	d02f      	beq.n	800060a <Get_CRx_Position+0x8e>
 80005aa:	2b40      	cmp	r3, #64	; 0x40
 80005ac:	d02f      	beq.n	800060e <Get_CRx_Position+0x92>
 80005ae:	2b10      	cmp	r3, #16
 80005b0:	d029      	beq.n	8000606 <Get_CRx_Position+0x8a>
 80005b2:	e040      	b.n	8000636 <Get_CRx_Position+0xba>
 80005b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005b8:	d033      	beq.n	8000622 <Get_CRx_Position+0xa6>
 80005ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005be:	dc09      	bgt.n	80005d4 <Get_CRx_Position+0x58>
 80005c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005c4:	d029      	beq.n	800061a <Get_CRx_Position+0x9e>
 80005c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005ca:	d028      	beq.n	800061e <Get_CRx_Position+0xa2>
 80005cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005d0:	d021      	beq.n	8000616 <Get_CRx_Position+0x9a>
 80005d2:	e030      	b.n	8000636 <Get_CRx_Position+0xba>
 80005d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005d8:	d027      	beq.n	800062a <Get_CRx_Position+0xae>
 80005da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005de:	dc03      	bgt.n	80005e8 <Get_CRx_Position+0x6c>
 80005e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005e4:	d01f      	beq.n	8000626 <Get_CRx_Position+0xaa>
 80005e6:	e026      	b.n	8000636 <Get_CRx_Position+0xba>
 80005e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005ec:	d01f      	beq.n	800062e <Get_CRx_Position+0xb2>
 80005ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005f2:	d01e      	beq.n	8000632 <Get_CRx_Position+0xb6>
 80005f4:	e01f      	b.n	8000636 <Get_CRx_Position+0xba>
		case GPIO_PIN_0:
			return 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	e01e      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_1:
			return 4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	e01c      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_2:
			return 8;
 80005fe:	2308      	movs	r3, #8
 8000600:	e01a      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_3:
			return 12;
 8000602:	230c      	movs	r3, #12
 8000604:	e018      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_4:
			return 16;
 8000606:	2310      	movs	r3, #16
 8000608:	e016      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_5:
			return 20;
 800060a:	2314      	movs	r3, #20
 800060c:	e014      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_6:
			return 24;
 800060e:	2318      	movs	r3, #24
 8000610:	e012      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_7:
			return 28;
 8000612:	231c      	movs	r3, #28
 8000614:	e010      	b.n	8000638 <Get_CRx_Position+0xbc>

	//Case PinNumber > GPIO_PIN_7
		case GPIO_PIN_8:
			return 0;
 8000616:	2300      	movs	r3, #0
 8000618:	e00e      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_9:
			return 4;
 800061a:	2304      	movs	r3, #4
 800061c:	e00c      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_10:
			return 8;
 800061e:	2308      	movs	r3, #8
 8000620:	e00a      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_11:
			return 12;
 8000622:	230c      	movs	r3, #12
 8000624:	e008      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_12:
			return 16;
 8000626:	2310      	movs	r3, #16
 8000628:	e006      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_13:
			return 20;
 800062a:	2314      	movs	r3, #20
 800062c:	e004      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_14:
			return 24;
 800062e:	2318      	movs	r3, #24
 8000630:	e002      	b.n	8000638 <Get_CRx_Position+0xbc>
		case GPIO_PIN_15:
			return 28;
 8000632:	231c      	movs	r3, #28
 8000634:	e000      	b.n	8000638 <Get_CRx_Position+0xbc>
	}
	return 0;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
	...

08000644 <MCAL_GPIO_Init>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_Init(GPIO_PinConfig_t* GPIO_PinConfigPtr){
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	static uint8_t GPIO_CLK_InitFlag[6] = {0,0,0,0,0,0};
	//Check port selected to enable it's clock
	if((GPIO_PinConfigPtr->GPIO_Port == GPIOA) && (GPIO_CLK_InitFlag[0] != 1))
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a7c      	ldr	r2, [pc, #496]	; (8000844 <MCAL_GPIO_Init+0x200>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d10d      	bne.n	8000672 <MCAL_GPIO_Init+0x2e>
 8000656:	4b7c      	ldr	r3, [pc, #496]	; (8000848 <MCAL_GPIO_Init+0x204>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d009      	beq.n	8000672 <MCAL_GPIO_Init+0x2e>
	{
		RCC_GPIOA_CLK_EN();
 800065e:	4b7b      	ldr	r3, [pc, #492]	; (800084c <MCAL_GPIO_Init+0x208>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	4a7a      	ldr	r2, [pc, #488]	; (800084c <MCAL_GPIO_Init+0x208>)
 8000664:	f043 0304 	orr.w	r3, r3, #4
 8000668:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[0] = 1;
 800066a:	4b77      	ldr	r3, [pc, #476]	; (8000848 <MCAL_GPIO_Init+0x204>)
 800066c:	2201      	movs	r2, #1
 800066e:	701a      	strb	r2, [r3, #0]
 8000670:	e04a      	b.n	8000708 <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOB) && (GPIO_CLK_InitFlag[1] != 1))
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a76      	ldr	r2, [pc, #472]	; (8000850 <MCAL_GPIO_Init+0x20c>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d10d      	bne.n	8000698 <MCAL_GPIO_Init+0x54>
 800067c:	4b72      	ldr	r3, [pc, #456]	; (8000848 <MCAL_GPIO_Init+0x204>)
 800067e:	785b      	ldrb	r3, [r3, #1]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d009      	beq.n	8000698 <MCAL_GPIO_Init+0x54>
	{
		RCC_GPIOB_CLK_EN();
 8000684:	4b71      	ldr	r3, [pc, #452]	; (800084c <MCAL_GPIO_Init+0x208>)
 8000686:	699b      	ldr	r3, [r3, #24]
 8000688:	4a70      	ldr	r2, [pc, #448]	; (800084c <MCAL_GPIO_Init+0x208>)
 800068a:	f043 0308 	orr.w	r3, r3, #8
 800068e:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[1] = 1;
 8000690:	4b6d      	ldr	r3, [pc, #436]	; (8000848 <MCAL_GPIO_Init+0x204>)
 8000692:	2201      	movs	r2, #1
 8000694:	705a      	strb	r2, [r3, #1]
 8000696:	e037      	b.n	8000708 <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOC) && (GPIO_CLK_InitFlag[2] != 1))
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a6d      	ldr	r2, [pc, #436]	; (8000854 <MCAL_GPIO_Init+0x210>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d10d      	bne.n	80006be <MCAL_GPIO_Init+0x7a>
 80006a2:	4b69      	ldr	r3, [pc, #420]	; (8000848 <MCAL_GPIO_Init+0x204>)
 80006a4:	789b      	ldrb	r3, [r3, #2]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d009      	beq.n	80006be <MCAL_GPIO_Init+0x7a>
	{
		RCC_GPIOC_CLK_EN();
 80006aa:	4b68      	ldr	r3, [pc, #416]	; (800084c <MCAL_GPIO_Init+0x208>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	4a67      	ldr	r2, [pc, #412]	; (800084c <MCAL_GPIO_Init+0x208>)
 80006b0:	f043 0310 	orr.w	r3, r3, #16
 80006b4:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[2] = 1;
 80006b6:	4b64      	ldr	r3, [pc, #400]	; (8000848 <MCAL_GPIO_Init+0x204>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	709a      	strb	r2, [r3, #2]
 80006bc:	e024      	b.n	8000708 <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOD) && (GPIO_CLK_InitFlag[3] != 1))
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a65      	ldr	r2, [pc, #404]	; (8000858 <MCAL_GPIO_Init+0x214>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d10d      	bne.n	80006e4 <MCAL_GPIO_Init+0xa0>
 80006c8:	4b5f      	ldr	r3, [pc, #380]	; (8000848 <MCAL_GPIO_Init+0x204>)
 80006ca:	78db      	ldrb	r3, [r3, #3]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d009      	beq.n	80006e4 <MCAL_GPIO_Init+0xa0>
	{
		RCC_GPIOD_CLK_EN();
 80006d0:	4b5e      	ldr	r3, [pc, #376]	; (800084c <MCAL_GPIO_Init+0x208>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a5d      	ldr	r2, [pc, #372]	; (800084c <MCAL_GPIO_Init+0x208>)
 80006d6:	f043 0320 	orr.w	r3, r3, #32
 80006da:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[3] = 1;
 80006dc:	4b5a      	ldr	r3, [pc, #360]	; (8000848 <MCAL_GPIO_Init+0x204>)
 80006de:	2201      	movs	r2, #1
 80006e0:	70da      	strb	r2, [r3, #3]
 80006e2:	e011      	b.n	8000708 <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOE) && (GPIO_CLK_InitFlag[4] != 1))
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a5c      	ldr	r2, [pc, #368]	; (800085c <MCAL_GPIO_Init+0x218>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d10c      	bne.n	8000708 <MCAL_GPIO_Init+0xc4>
 80006ee:	4b56      	ldr	r3, [pc, #344]	; (8000848 <MCAL_GPIO_Init+0x204>)
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d008      	beq.n	8000708 <MCAL_GPIO_Init+0xc4>
	{
		RCC_GPIOE_CLK_EN();
 80006f6:	4b55      	ldr	r3, [pc, #340]	; (800084c <MCAL_GPIO_Init+0x208>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	4a54      	ldr	r2, [pc, #336]	; (800084c <MCAL_GPIO_Init+0x208>)
 80006fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000700:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[4] = 1;
 8000702:	4b51      	ldr	r3, [pc, #324]	; (8000848 <MCAL_GPIO_Init+0x204>)
 8000704:	2201      	movs	r2, #1
 8000706:	711a      	strb	r2, [r3, #4]
	}

	//Check for alternate function mode (Input or Output) to enable it's clock
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_OUTPUT_OD)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	799b      	ldrb	r3, [r3, #6]
 800070c:	2b05      	cmp	r3, #5
 800070e:	d908      	bls.n	8000722 <MCAL_GPIO_Init+0xde>
	{
		RCC_AFIO_CLK_EN();
 8000710:	4b4e      	ldr	r3, [pc, #312]	; (800084c <MCAL_GPIO_Init+0x208>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a4d      	ldr	r2, [pc, #308]	; (800084c <MCAL_GPIO_Init+0x208>)
 8000716:	f043 0301 	orr.w	r3, r3, #1
 800071a:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[5] = 1;
 800071c:	4b4a      	ldr	r3, [pc, #296]	; (8000848 <MCAL_GPIO_Init+0x204>)
 800071e:	2201      	movs	r2, #1
 8000720:	715a      	strb	r2, [r3, #5]
	}

	//Pointer holds the configuration register address either High or Low depends on PinNo
	vuint32_t* GPIO_CRx = NULL_PTR;
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
	GPIO_CRx = ((GPIO_PinConfigPtr->GPIO_PinNo < GPIO_PIN_8)?&(GPIO_PinConfigPtr->GPIO_Port->CRL):&(GPIO_PinConfigPtr->GPIO_Port->CRH));
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	889b      	ldrh	r3, [r3, #4]
 800072a:	2bff      	cmp	r3, #255	; 0xff
 800072c:	d802      	bhi.n	8000734 <MCAL_GPIO_Init+0xf0>
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	e002      	b.n	800073a <MCAL_GPIO_Init+0xf6>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3304      	adds	r3, #4
 800073a:	60bb      	str	r3, [r7, #8]

	//MODE & CNF Variable (Initialized by it's default reset value)
	uint8_t PinConfig_Value = 0x4;
 800073c:	2304      	movs	r3, #4
 800073e:	73fb      	strb	r3, [r7, #15]

	//Clear MODE & CNF
	(*GPIO_CRx) &= ~(0xF<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	889b      	ldrh	r3, [r3, #4]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff19 	bl	800057c <Get_CRx_Position>
 800074a:	4603      	mov	r3, r0
 800074c:	461a      	mov	r2, r3
 800074e:	230f      	movs	r3, #15
 8000750:	4093      	lsls	r3, r2
 8000752:	43da      	mvns	r2, r3
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	401a      	ands	r2, r3
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	601a      	str	r2, [r3, #0]

	//Check if pin is output
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_INPUT_PD && GPIO_PinConfigPtr->GPIO_Mode < GPIO_MODE_AF_INPUT)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	799b      	ldrb	r3, [r3, #6]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d914      	bls.n	8000790 <MCAL_GPIO_Init+0x14c>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	799b      	ldrb	r3, [r3, #6]
 800076a:	2b07      	cmp	r3, #7
 800076c:	d810      	bhi.n	8000790 <MCAL_GPIO_Init+0x14c>
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	73fb      	strb	r3, [r7, #15]
		//Set MODE & CNF
		PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode-4)<<2) | (GPIO_PinConfigPtr->GPIO_Output_Speed)) & 0x0F;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	799b      	ldrb	r3, [r3, #6]
 8000776:	3b04      	subs	r3, #4
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	b25a      	sxtb	r2, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	79db      	ldrb	r3, [r3, #7]
 8000780:	b25b      	sxtb	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b25b      	sxtb	r3, r3
 8000786:	b2db      	uxtb	r3, r3
 8000788:	f003 030f 	and.w	r3, r3, #15
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	e037      	b.n	8000800 <MCAL_GPIO_Init+0x1bc>

	//Else pin is input
	else //MODE = 00: Input mode (reset state)
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	73fb      	strb	r3, [r7, #15]

		//Check if Input Analog mode or Input Floating
		if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_ANALOG || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_FLO)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	799b      	ldrb	r3, [r3, #6]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d003      	beq.n	80007a4 <MCAL_GPIO_Init+0x160>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	799b      	ldrb	r3, [r3, #6]
 80007a0:	2b01      	cmp	r3, #1
 80007a2:	d107      	bne.n	80007b4 <MCAL_GPIO_Init+0x170>
		{	//Set MODE & CNF
			PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode)<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	799b      	ldrb	r3, [r3, #6]
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	f003 030f 	and.w	r3, r3, #15
 80007b0:	73fb      	strb	r3, [r7, #15]
 80007b2:	e025      	b.n	8000800 <MCAL_GPIO_Init+0x1bc>
		}

		//Check if Input with pull-up or Input with pull-down
		else if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PD)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	799b      	ldrb	r3, [r3, #6]
 80007b8:	2b02      	cmp	r3, #2
 80007ba:	d003      	beq.n	80007c4 <MCAL_GPIO_Init+0x180>
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	799b      	ldrb	r3, [r3, #6]
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	d11b      	bne.n	80007fc <MCAL_GPIO_Init+0x1b8>
		{
			//Set MODE & CNF
			PinConfig_Value = ((GPIO_MODE_INPUT_PU<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 80007c4:	2308      	movs	r3, #8
 80007c6:	73fb      	strb	r3, [r7, #15]

			//Check if Input with pull-up
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	799b      	ldrb	r3, [r3, #6]
 80007cc:	2b02      	cmp	r3, #2
 80007ce:	d10a      	bne.n	80007e6 <MCAL_GPIO_Init+0x1a2>
			{
				//Set output data register ODR because pull up specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	68da      	ldr	r2, [r3, #12]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	889b      	ldrh	r3, [r3, #4]
 80007da:	4619      	mov	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	430a      	orrs	r2, r1
 80007e2:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 80007e4:	e00c      	b.n	8000800 <MCAL_GPIO_Init+0x1bc>

			//Check if Input with pull-down
			else
			{
				//Clear output data register ODR because pull down specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68da      	ldr	r2, [r3, #12]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	889b      	ldrh	r3, [r3, #4]
 80007f0:	4619      	mov	r1, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 80007fa:	e001      	b.n	8000800 <MCAL_GPIO_Init+0x1bc>
		}

		//Else Alternate function input
		else
		{
			PinConfig_Value = ((GPIO_MODE_INPUT_FLO<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 80007fc:	2304      	movs	r3, #4
 80007fe:	73fb      	strb	r3, [r7, #15]
		}

	}

	//Write on CRx register to configure pin -> x is (H or L)
	(*GPIO_CRx) &= ~(PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 8000800:	7bfc      	ldrb	r4, [r7, #15]
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	889b      	ldrh	r3, [r3, #4]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff feb8 	bl	800057c <Get_CRx_Position>
 800080c:	4603      	mov	r3, r0
 800080e:	fa04 f303 	lsl.w	r3, r4, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	401a      	ands	r2, r3
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	601a      	str	r2, [r3, #0]
	(*GPIO_CRx) |= (PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 800081e:	7bfc      	ldrb	r4, [r7, #15]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	889b      	ldrh	r3, [r3, #4]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fea9 	bl	800057c <Get_CRx_Position>
 800082a:	4603      	mov	r3, r0
 800082c:	fa04 f203 	lsl.w	r2, r4, r3
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	431a      	orrs	r2, r3
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	601a      	str	r2, [r3, #0]

	return;
 800083a:	bf00      	nop

}
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bd90      	pop	{r4, r7, pc}
 8000842:	bf00      	nop
 8000844:	40010800 	.word	0x40010800
 8000848:	20000058 	.word	0x20000058
 800084c:	40021000 	.word	0x40021000
 8000850:	40010c00 	.word	0x40010c00
 8000854:	40011000 	.word	0x40011000
 8000858:	40011400 	.word	0x40011400
 800085c:	40011800 	.word	0x40011800

08000860 <MCAL_GPIO_ReadPin>:
* @retval 			- The input pin value (two values based on @ref GPIO_PinState_Define).
*
* Note				-
*
*/
uint8_t MCAL_GPIO_ReadPin(GPIO_PinConfig_t* GPIO_PinConfigPtr){
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

	//Check if pin state is one.
	if(GPIO_PinConfigPtr->GPIO_Port->IDR & GPIO_PinConfigPtr->GPIO_PinNo){
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	8892      	ldrh	r2, [r2, #4]
 8000872:	4013      	ands	r3, r2
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MCAL_GPIO_ReadPin+0x1c>
		return (uint8_t)GPIO_PIN_SET;
 8000878:	2301      	movs	r3, #1
 800087a:	e000      	b.n	800087e <MCAL_GPIO_ReadPin+0x1e>
	}

	//Else pin state is zero.
	else
	{
		return (uint8_t)GPIO_PIN_CLEAR;
 800087c:	2300      	movs	r3, #0
	}

}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <MCAL_GPIO_WritePin>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_WritePin(GPIO_PinConfig_t* GPIO_PinConfigPtr, uint8_t PinValue){
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	460b      	mov	r3, r1
 8000892:	70fb      	strb	r3, [r7, #3]

	//Check if sent pin state is one.
	if(PinValue == GPIO_PIN_SET)
 8000894:	78fb      	ldrb	r3, [r7, #3]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d105      	bne.n	80008a6 <MCAL_GPIO_WritePin+0x1e>
	{

		GPIO_PinConfigPtr->GPIO_Port->BSRR = GPIO_PinConfigPtr->GPIO_PinNo;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	889a      	ldrh	r2, [r3, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	611a      	str	r2, [r3, #16]
	else
	{
		GPIO_PinConfigPtr->GPIO_Port->BRR = GPIO_PinConfigPtr->GPIO_PinNo;
	}

}
 80008a4:	e004      	b.n	80008b0 <MCAL_GPIO_WritePin+0x28>
		GPIO_PinConfigPtr->GPIO_Port->BRR = GPIO_PinConfigPtr->GPIO_PinNo;
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	889a      	ldrh	r2, [r3, #4]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	615a      	str	r2, [r3, #20]
}
 80008b0:	bf00      	nop
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <MCAL_GPIO_TogglePin>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_TogglePin(GPIO_PinConfig_t* GPIO_PinConfigPtr){
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]

	//Toggle the specified pin
	GPIO_PinConfigPtr->GPIO_Port->ODR ^= GPIO_PinConfigPtr->GPIO_PinNo;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68da      	ldr	r2, [r3, #12]
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	889b      	ldrh	r3, [r3, #4]
 80008cc:	4619      	mov	r1, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	404a      	eors	r2, r1
 80008d4:	60da      	str	r2, [r3, #12]
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	bc80      	pop	{r7}
 80008de:	4770      	bx	lr

080008e0 <MCAL_GPTM_Init>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPTM_Init(GPTM_Config_t* GPTM_ConfigPtr){
 80008e0:	b490      	push	{r4, r7}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]

	//Saftey Registers
	vuint16_t TIMx_CR1 		= 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	833b      	strh	r3, [r7, #24]
	vuint16_t TIMx_CR2 		= 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	82fb      	strh	r3, [r7, #22]
	vuint16_t TIMx_SMCR		= 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	82bb      	strh	r3, [r7, #20]
	vuint16_t TIMx_DIER 	= 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	827b      	strh	r3, [r7, #18]
	vuint16_t TIMx_CCMR[2] 	= {0,0};
 80008f8:	2300      	movs	r3, #0
 80008fa:	81bb      	strh	r3, [r7, #12]
 80008fc:	2300      	movs	r3, #0
 80008fe:	81fb      	strh	r3, [r7, #14]
	vuint16_t TIMx_CCER 	= 0;
 8000900:	2300      	movs	r3, #0
 8000902:	817b      	strh	r3, [r7, #10]

	//Utility Use for Shifts
	uint8_t CCMR_Channel_Shift = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	77fb      	strb	r3, [r7, #31]
	uint8_t CCER_Channel_Shift = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	77bb      	strb	r3, [r7, #30]
	uint8_t Channel_Index;
	uint8_t CCMR_Index = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	777b      	strb	r3, [r7, #29]

	/*
	 * 1) Enable the TIMx Clock according to the Peripheral Selected.
	 */
	if(GPTM_ConfigPtr->TIMx == TIM2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000918:	d106      	bne.n	8000928 <MCAL_GPTM_Init+0x48>
	{
		RCC_TIM2_CLK_EN();
 800091a:	4b92      	ldr	r3, [pc, #584]	; (8000b64 <MCAL_GPTM_Init+0x284>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a91      	ldr	r2, [pc, #580]	; (8000b64 <MCAL_GPTM_Init+0x284>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	61d3      	str	r3, [r2, #28]
 8000926:	e016      	b.n	8000956 <MCAL_GPTM_Init+0x76>
	}
	else if(GPTM_ConfigPtr->TIMx == TIM3)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a8e      	ldr	r2, [pc, #568]	; (8000b68 <MCAL_GPTM_Init+0x288>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d106      	bne.n	8000940 <MCAL_GPTM_Init+0x60>
	{
		RCC_TIM3_CLK_EN();
 8000932:	4b8c      	ldr	r3, [pc, #560]	; (8000b64 <MCAL_GPTM_Init+0x284>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a8b      	ldr	r2, [pc, #556]	; (8000b64 <MCAL_GPTM_Init+0x284>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	61d3      	str	r3, [r2, #28]
 800093e:	e00a      	b.n	8000956 <MCAL_GPTM_Init+0x76>
	}
	else if(GPTM_ConfigPtr->TIMx == TIM4)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a89      	ldr	r2, [pc, #548]	; (8000b6c <MCAL_GPTM_Init+0x28c>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d105      	bne.n	8000956 <MCAL_GPTM_Init+0x76>
	{
		RCC_TIM4_CLK_EN();
 800094a:	4b86      	ldr	r3, [pc, #536]	; (8000b64 <MCAL_GPTM_Init+0x284>)
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	4a85      	ldr	r2, [pc, #532]	; (8000b64 <MCAL_GPTM_Init+0x284>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	61d3      	str	r3, [r2, #28]
	}

	/*
	 * Checking for the Slave Mode Controller Configuration if the user entred it.
	 */
	if(GPTM_ConfigPtr->GPTM_ExternalTrigger.EXTTRIG_Enable)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	889b      	ldrh	r3, [r3, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d012      	beq.n	8000984 <MCAL_GPTM_Init+0xa4>
		 * 1) As no filter is needed in this example, write ETF[3:0]=0000 in the TIMx_SMCR register.
		 * 2) Set the prescaler by writing ETPS[1:0]=01 in the TIMx_SMCR register
		 * 3) Select rising edge detection on the ETR pin by writing ETP=0 in the TIMx_SMCR register.
		 * 4) Enable external clock mode 2 by writing ECE=1 in the TIMx_SMCR register.
		*/
		TIMx_SMCR |= GPTM_ConfigPtr->GPTM_ExternalTrigger.EXTTRIG_SamplingFiltering |
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	891a      	ldrh	r2, [r3, #8]
					 GPTM_ConfigPtr->GPTM_ExternalTrigger.EXTTRIG_PreScaler		   	|
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	88db      	ldrh	r3, [r3, #6]
		TIMx_SMCR |= GPTM_ConfigPtr->GPTM_ExternalTrigger.EXTTRIG_SamplingFiltering |
 8000966:	4313      	orrs	r3, r2
 8000968:	b29a      	uxth	r2, r3
					 GPTM_ConfigPtr->GPTM_ExternalTrigger.EXTTRIG_Polarity		   	|
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	895b      	ldrh	r3, [r3, #10]
		TIMx_SMCR |= GPTM_ConfigPtr->GPTM_ExternalTrigger.EXTTRIG_SamplingFiltering |
 800096e:	4313      	orrs	r3, r2
 8000970:	b29a      	uxth	r2, r3
					 GPTM_ConfigPtr->GPTM_ExternalTrigger.EXTTRIG_Enable;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	889b      	ldrh	r3, [r3, #4]
		TIMx_SMCR |= GPTM_ConfigPtr->GPTM_ExternalTrigger.EXTTRIG_SamplingFiltering |
 8000976:	4313      	orrs	r3, r2
 8000978:	b29a      	uxth	r2, r3
 800097a:	8abb      	ldrh	r3, [r7, #20]
 800097c:	b29b      	uxth	r3, r3
 800097e:	4313      	orrs	r3, r2
 8000980:	b29b      	uxth	r3, r3
 8000982:	82bb      	strh	r3, [r7, #20]
	/*
	 * Checking for the Slave Mode Controller Configuration if the user entered it.
	 * It configures in all modes except encoder mode to be done.
	 */

	for(uint8_t i=0;i<4;i++)
 8000984:	2300      	movs	r3, #0
 8000986:	773b      	strb	r3, [r7, #28]
 8000988:	e0c1      	b.n	8000b0e <MCAL_GPTM_Init+0x22e>
	{
		if(i == 0)
 800098a:	7f3b      	ldrb	r3, [r7, #28]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d106      	bne.n	800099e <MCAL_GPTM_Init+0xbe>
		{
			CCMR_Index = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	777b      	strb	r3, [r7, #29]
			CCMR_Channel_Shift = GPTM_CH_1_CCMR_SHIFT;
 8000994:	2300      	movs	r3, #0
 8000996:	77fb      	strb	r3, [r7, #31]
			CCER_Channel_Shift = GPTM_CH_1_CCER_SHIFT;
 8000998:	2300      	movs	r3, #0
 800099a:	77bb      	strb	r3, [r7, #30]
 800099c:	e019      	b.n	80009d2 <MCAL_GPTM_Init+0xf2>
		}
		else if(i == 1)
 800099e:	7f3b      	ldrb	r3, [r7, #28]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d106      	bne.n	80009b2 <MCAL_GPTM_Init+0xd2>
		{
			CCMR_Index = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	777b      	strb	r3, [r7, #29]
			CCMR_Channel_Shift = GPTM_CH_2_CCMR_SHIFT;
 80009a8:	2308      	movs	r3, #8
 80009aa:	77fb      	strb	r3, [r7, #31]
			CCER_Channel_Shift = GPTM_CH_2_CCER_SHIFT;
 80009ac:	2304      	movs	r3, #4
 80009ae:	77bb      	strb	r3, [r7, #30]
 80009b0:	e00f      	b.n	80009d2 <MCAL_GPTM_Init+0xf2>
		}
		else if(i == 2)
 80009b2:	7f3b      	ldrb	r3, [r7, #28]
 80009b4:	2b02      	cmp	r3, #2
 80009b6:	d106      	bne.n	80009c6 <MCAL_GPTM_Init+0xe6>
		{
			CCMR_Index = 1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	777b      	strb	r3, [r7, #29]
			CCMR_Channel_Shift = GPTM_CH_3_CCMR_SHIFT;
 80009bc:	2300      	movs	r3, #0
 80009be:	77fb      	strb	r3, [r7, #31]
			CCER_Channel_Shift = GPTM_CH_3_CCER_SHIFT;
 80009c0:	2308      	movs	r3, #8
 80009c2:	77bb      	strb	r3, [r7, #30]
 80009c4:	e005      	b.n	80009d2 <MCAL_GPTM_Init+0xf2>
		}
		else
		{
			CCMR_Index = 1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	777b      	strb	r3, [r7, #29]
			CCMR_Channel_Shift = GPTM_CH_4_CCMR_SHIFT;
 80009ca:	2308      	movs	r3, #8
 80009cc:	77fb      	strb	r3, [r7, #31]
			CCER_Channel_Shift = GPTM_CH_4_CCER_SHIFT;
 80009ce:	230c      	movs	r3, #12
 80009d0:	77bb      	strb	r3, [r7, #30]
		}

		if(GPTM_ConfigPtr->GPTM_InputChannelX[i].CH_Enable == GPTM_CH_ENABLED)
 80009d2:	7f3a      	ldrb	r2, [r7, #28]
 80009d4:	6879      	ldr	r1, [r7, #4]
 80009d6:	4613      	mov	r3, r2
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	4413      	add	r3, r2
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	440b      	add	r3, r1
 80009e0:	330c      	adds	r3, #12
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	f040 808f 	bne.w	8000b08 <MCAL_GPTM_Init+0x228>
		{
			if(GPTM_ConfigPtr->GPTM_SMC_Mode && (GPTM_ConfigPtr->GPTM_SMC_Channel == GPTM_SMC_CHANNEL_1))
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d00b      	beq.n	8000a0c <MCAL_GPTM_Init+0x12c>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d106      	bne.n	8000a0c <MCAL_GPTM_Init+0x12c>
			{
				TIMx_SMCR |= (5<<4);
 80009fe:	8abb      	ldrh	r3, [r7, #20]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	82bb      	strh	r3, [r7, #20]
 8000a0a:	e00f      	b.n	8000a2c <MCAL_GPTM_Init+0x14c>
			}
			else if(GPTM_ConfigPtr->GPTM_SMC_Mode && (GPTM_ConfigPtr->GPTM_SMC_Channel == GPTM_SMC_CHANNEL_2))
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d00a      	beq.n	8000a2c <MCAL_GPTM_Init+0x14c>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d105      	bne.n	8000a2c <MCAL_GPTM_Init+0x14c>
			{
				TIMx_SMCR |= (6<<4);
 8000a20:	8abb      	ldrh	r3, [r7, #20]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	82bb      	strh	r3, [r7, #20]
			}
			TIMx_CCMR[CCMR_Index] |= (GPTM_ConfigPtr->GPTM_InputChannelX[i].CH_Direction<<CCMR_Channel_Shift)|
 8000a2c:	7f7b      	ldrb	r3, [r7, #29]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	f107 0220 	add.w	r2, r7, #32
 8000a34:	4413      	add	r3, r2
 8000a36:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	b219      	sxth	r1, r3
 8000a3e:	7f3a      	ldrb	r2, [r7, #28]
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	4613      	mov	r3, r2
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4413      	add	r3, r2
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4403      	add	r3, r0
 8000a4c:	330e      	adds	r3, #14
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	7ffb      	ldrb	r3, [r7, #31]
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	b218      	sxth	r0, r3
					(GPTM_ConfigPtr->GPTM_InputChannelX[i].CH_InputFilter<< CCMR_Channel_Shift)				 |
 8000a5a:	7f3a      	ldrb	r2, [r7, #28]
 8000a5c:	687c      	ldr	r4, [r7, #4]
 8000a5e:	4613      	mov	r3, r2
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	4413      	add	r3, r2
 8000a64:	009b      	lsls	r3, r3, #2
 8000a66:	4423      	add	r3, r4
 8000a68:	3310      	adds	r3, #16
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	7ffb      	ldrb	r3, [r7, #31]
 8000a70:	fa02 f303 	lsl.w	r3, r2, r3
			TIMx_CCMR[CCMR_Index] |= (GPTM_ConfigPtr->GPTM_InputChannelX[i].CH_Direction<<CCMR_Channel_Shift)|
 8000a74:	b21b      	sxth	r3, r3
 8000a76:	4303      	orrs	r3, r0
 8000a78:	b218      	sxth	r0, r3
					(GPTM_ConfigPtr->GPTM_InputChannelX[i].CH_InputPreScaler<<CCMR_Channel_Shift);
 8000a7a:	7f3a      	ldrb	r2, [r7, #28]
 8000a7c:	687c      	ldr	r4, [r7, #4]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	4413      	add	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4423      	add	r3, r4
 8000a88:	3312      	adds	r3, #18
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	7ffb      	ldrb	r3, [r7, #31]
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
					(GPTM_ConfigPtr->GPTM_InputChannelX[i].CH_InputFilter<< CCMR_Channel_Shift)				 |
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	4303      	orrs	r3, r0
 8000a98:	b21b      	sxth	r3, r3
			TIMx_CCMR[CCMR_Index] |= (GPTM_ConfigPtr->GPTM_InputChannelX[i].CH_Direction<<CCMR_Channel_Shift)|
 8000a9a:	430b      	orrs	r3, r1
 8000a9c:	b21a      	sxth	r2, r3
 8000a9e:	7f7b      	ldrb	r3, [r7, #29]
 8000aa0:	b292      	uxth	r2, r2
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	f107 0120 	add.w	r1, r7, #32
 8000aa8:	440b      	add	r3, r1
 8000aaa:	f823 2c14 	strh.w	r2, [r3, #-20]

			TIMx_CCER |= (GPTM_ConfigPtr->GPTM_InputChannelX[i].CH_InputCaptureEnable<<CCER_Channel_Shift)	|
 8000aae:	7f3a      	ldrb	r2, [r7, #28]
 8000ab0:	6879      	ldr	r1, [r7, #4]
 8000ab2:	4613      	mov	r3, r2
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	4413      	add	r3, r2
 8000ab8:	009b      	lsls	r3, r3, #2
 8000aba:	440b      	add	r3, r1
 8000abc:	3314      	adds	r3, #20
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	7fbb      	ldrb	r3, [r7, #30]
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	b219      	sxth	r1, r3
					(GPTM_ConfigPtr->GPTM_InputChannelX[i].CH_InputPolarityDetected<<CCER_Channel_Shift);
 8000aca:	7f3a      	ldrb	r2, [r7, #28]
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	009b      	lsls	r3, r3, #2
 8000ad6:	4403      	add	r3, r0
 8000ad8:	3316      	adds	r3, #22
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	7fbb      	ldrb	r3, [r7, #30]
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
			TIMx_CCER |= (GPTM_ConfigPtr->GPTM_InputChannelX[i].CH_InputCaptureEnable<<CCER_Channel_Shift)	|
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	430b      	orrs	r3, r1
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	897b      	ldrh	r3, [r7, #10]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	817b      	strh	r3, [r7, #10]

			TIMx_SMCR |= GPTM_ConfigPtr->GPTM_SMC_Mode;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 8000afe:	8abb      	ldrh	r3, [r7, #20]
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	4313      	orrs	r3, r2
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	82bb      	strh	r3, [r7, #20]
	for(uint8_t i=0;i<4;i++)
 8000b08:	7f3b      	ldrb	r3, [r7, #28]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	773b      	strb	r3, [r7, #28]
 8000b0e:	7f3b      	ldrb	r3, [r7, #28]
 8000b10:	2b03      	cmp	r3, #3
 8000b12:	f67f af3a 	bls.w	800098a <MCAL_GPTM_Init+0xaa>
		}
	}

	CCMR_Channel_Shift = 0;
 8000b16:	2300      	movs	r3, #0
 8000b18:	77fb      	strb	r3, [r7, #31]
	CCER_Channel_Shift = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	77bb      	strb	r3, [r7, #30]
	CCMR_Index = 0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	777b      	strb	r3, [r7, #29]
	for(uint8_t i=0;i<4;i++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	76fb      	strb	r3, [r7, #27]
 8000b26:	e09b      	b.n	8000c60 <MCAL_GPTM_Init+0x380>
	{
		if(i == 0)
 8000b28:	7efb      	ldrb	r3, [r7, #27]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d106      	bne.n	8000b3c <MCAL_GPTM_Init+0x25c>
		{
			CCMR_Index = 0;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	777b      	strb	r3, [r7, #29]
			CCMR_Channel_Shift = GPTM_CH_1_CCMR_SHIFT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	77fb      	strb	r3, [r7, #31]
			CCER_Channel_Shift = GPTM_CH_1_CCER_SHIFT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	77bb      	strb	r3, [r7, #30]
 8000b3a:	e01f      	b.n	8000b7c <MCAL_GPTM_Init+0x29c>
		}
		else if(i == 1)
 8000b3c:	7efb      	ldrb	r3, [r7, #27]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d106      	bne.n	8000b50 <MCAL_GPTM_Init+0x270>
		{
			CCMR_Index = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	777b      	strb	r3, [r7, #29]
			CCMR_Channel_Shift = GPTM_CH_2_CCMR_SHIFT;
 8000b46:	2308      	movs	r3, #8
 8000b48:	77fb      	strb	r3, [r7, #31]
			CCER_Channel_Shift = GPTM_CH_2_CCER_SHIFT;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	77bb      	strb	r3, [r7, #30]
 8000b4e:	e015      	b.n	8000b7c <MCAL_GPTM_Init+0x29c>
		}
		else if(i == 2)
 8000b50:	7efb      	ldrb	r3, [r7, #27]
 8000b52:	2b02      	cmp	r3, #2
 8000b54:	d10c      	bne.n	8000b70 <MCAL_GPTM_Init+0x290>
		{
			CCMR_Index = 1;
 8000b56:	2301      	movs	r3, #1
 8000b58:	777b      	strb	r3, [r7, #29]
			CCMR_Channel_Shift = GPTM_CH_3_CCMR_SHIFT;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	77fb      	strb	r3, [r7, #31]
			CCER_Channel_Shift = GPTM_CH_3_CCER_SHIFT;
 8000b5e:	2308      	movs	r3, #8
 8000b60:	77bb      	strb	r3, [r7, #30]
 8000b62:	e00b      	b.n	8000b7c <MCAL_GPTM_Init+0x29c>
 8000b64:	40021000 	.word	0x40021000
 8000b68:	40000400 	.word	0x40000400
 8000b6c:	40000800 	.word	0x40000800
		}
		else
		{
			CCMR_Index = 1;
 8000b70:	2301      	movs	r3, #1
 8000b72:	777b      	strb	r3, [r7, #29]
			CCMR_Channel_Shift = GPTM_CH_4_CCMR_SHIFT;
 8000b74:	2308      	movs	r3, #8
 8000b76:	77fb      	strb	r3, [r7, #31]
			CCER_Channel_Shift = GPTM_CH_4_CCER_SHIFT;
 8000b78:	230c      	movs	r3, #12
 8000b7a:	77bb      	strb	r3, [r7, #30]
		}
		if(GPTM_ConfigPtr->GPTM_OutputChannelX[i].CH_Enable == GPTM_CH_ENABLED)
 8000b7c:	7efb      	ldrb	r3, [r7, #27]
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	011b      	lsls	r3, r3, #4
 8000b82:	4413      	add	r3, r2
 8000b84:	333c      	adds	r3, #60	; 0x3c
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d166      	bne.n	8000c5a <MCAL_GPTM_Init+0x37a>
		{
			TIMx_CCMR[CCMR_Index] |= (GPTM_ConfigPtr->GPTM_OutputChannelX[i].CH_Direction<<CCMR_Channel_Shift)|
 8000b8c:	7f7b      	ldrb	r3, [r7, #29]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	f107 0220 	add.w	r2, r7, #32
 8000b94:	4413      	add	r3, r2
 8000b96:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	b21a      	sxth	r2, r3
 8000b9e:	7efb      	ldrb	r3, [r7, #27]
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	011b      	lsls	r3, r3, #4
 8000ba4:	440b      	add	r3, r1
 8000ba6:	333e      	adds	r3, #62	; 0x3e
 8000ba8:	881b      	ldrh	r3, [r3, #0]
 8000baa:	4619      	mov	r1, r3
 8000bac:	7ffb      	ldrb	r3, [r7, #31]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	b219      	sxth	r1, r3
					(GPTM_ConfigPtr->GPTM_OutputChannelX[i].CH_FastEnable<<CCMR_Channel_Shift)				  |
 8000bb4:	7efb      	ldrb	r3, [r7, #27]
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	011b      	lsls	r3, r3, #4
 8000bba:	4403      	add	r3, r0
 8000bbc:	3342      	adds	r3, #66	; 0x42
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	7ffb      	ldrb	r3, [r7, #31]
 8000bc4:	fa00 f303 	lsl.w	r3, r0, r3
			TIMx_CCMR[CCMR_Index] |= (GPTM_ConfigPtr->GPTM_OutputChannelX[i].CH_Direction<<CCMR_Channel_Shift)|
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	430b      	orrs	r3, r1
 8000bcc:	b219      	sxth	r1, r3
					(GPTM_ConfigPtr->GPTM_OutputChannelX[i].CH_PreloadEnable<<CCMR_Channel_Shift)		      |
 8000bce:	7efb      	ldrb	r3, [r7, #27]
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	011b      	lsls	r3, r3, #4
 8000bd4:	4403      	add	r3, r0
 8000bd6:	3340      	adds	r3, #64	; 0x40
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	4618      	mov	r0, r3
 8000bdc:	7ffb      	ldrb	r3, [r7, #31]
 8000bde:	fa00 f303 	lsl.w	r3, r0, r3
					(GPTM_ConfigPtr->GPTM_OutputChannelX[i].CH_FastEnable<<CCMR_Channel_Shift)				  |
 8000be2:	b21b      	sxth	r3, r3
 8000be4:	430b      	orrs	r3, r1
 8000be6:	b219      	sxth	r1, r3
					(GPTM_ConfigPtr->GPTM_OutputChannelX[i].CH_Mode<<CCMR_Channel_Shift);
 8000be8:	7efb      	ldrb	r3, [r7, #27]
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	3304      	adds	r3, #4
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	4403      	add	r3, r0
 8000bf2:	3304      	adds	r3, #4
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	7ffb      	ldrb	r3, [r7, #31]
 8000bfa:	fa00 f303 	lsl.w	r3, r0, r3
					(GPTM_ConfigPtr->GPTM_OutputChannelX[i].CH_PreloadEnable<<CCMR_Channel_Shift)		      |
 8000bfe:	b21b      	sxth	r3, r3
 8000c00:	430b      	orrs	r3, r1
 8000c02:	b21b      	sxth	r3, r3
			TIMx_CCMR[CCMR_Index] |= (GPTM_ConfigPtr->GPTM_OutputChannelX[i].CH_Direction<<CCMR_Channel_Shift)|
 8000c04:	4313      	orrs	r3, r2
 8000c06:	b21a      	sxth	r2, r3
 8000c08:	7f7b      	ldrb	r3, [r7, #29]
 8000c0a:	b292      	uxth	r2, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	f107 0120 	add.w	r1, r7, #32
 8000c12:	440b      	add	r3, r1
 8000c14:	f823 2c14 	strh.w	r2, [r3, #-20]

			TIMx_CCER |= (GPTM_ConfigPtr->GPTM_OutputChannelX[i].CH_OCxEnable <<CCER_Channel_Shift)	|
 8000c18:	7efb      	ldrb	r3, [r7, #27]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	4413      	add	r3, r2
 8000c22:	330a      	adds	r3, #10
 8000c24:	881b      	ldrh	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	7fbb      	ldrb	r3, [r7, #30]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	b21a      	sxth	r2, r3
						 (GPTM_ConfigPtr->GPTM_OutputChannelX[i].CH_OutputPolaritySelected<<CCER_Channel_Shift);
 8000c30:	7efb      	ldrb	r3, [r7, #27]
 8000c32:	6879      	ldr	r1, [r7, #4]
 8000c34:	3304      	adds	r3, #4
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	440b      	add	r3, r1
 8000c3a:	3308      	adds	r3, #8
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	4619      	mov	r1, r3
 8000c40:	7fbb      	ldrb	r3, [r7, #30]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
			TIMx_CCER |= (GPTM_ConfigPtr->GPTM_OutputChannelX[i].CH_OCxEnable <<CCER_Channel_Shift)	|
 8000c46:	b21b      	sxth	r3, r3
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	b21a      	sxth	r2, r3
 8000c4c:	897b      	ldrh	r3, [r7, #10]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	b21b      	sxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	817b      	strh	r3, [r7, #10]
	for(uint8_t i=0;i<4;i++)
 8000c5a:	7efb      	ldrb	r3, [r7, #27]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	76fb      	strb	r3, [r7, #27]
 8000c60:	7efb      	ldrb	r3, [r7, #27]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	f67f af60 	bls.w	8000b28 <MCAL_GPTM_Init+0x248>
	 * ----------------------------------------------------------------------------------------------------------
	 * 4) Configure the Update Event Mode. To determine if the content of the preload register are transferred
	 * into the shadow register permanently or at each update event (UEV).
	 * ----------------------------------------------------------------------------------------------------------
	 */
	TIMx_CR1 |= GPTM_ConfigPtr->GPTM_AutoReloadUpdate | GPTM_ConfigPtr->GPTM_CounterMode |
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8000c74:	4313      	orrs	r3, r2
 8000c76:	b29a      	uxth	r2, r3
				GPTM_ConfigPtr->GPTM_UpdateEvent | GPTM_ConfigPtr->GPTM_UEselectionSrc;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
	TIMx_CR1 |= GPTM_ConfigPtr->GPTM_AutoReloadUpdate | GPTM_ConfigPtr->GPTM_CounterMode |
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b29a      	uxth	r2, r3
				GPTM_ConfigPtr->GPTM_UpdateEvent | GPTM_ConfigPtr->GPTM_UEselectionSrc;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
	TIMx_CR1 |= GPTM_ConfigPtr->GPTM_AutoReloadUpdate | GPTM_ConfigPtr->GPTM_CounterMode |
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	8b3b      	ldrh	r3, [r7, #24]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4313      	orrs	r3, r2
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	833b      	strh	r3, [r7, #24]

	/*
	 * 5) If "Edge-aligned mode" - Set the direction of the counting (up or down).
	 */
	if(GPTM_ConfigPtr->GPTM_CounterMode == GPTM_EDGE_ALIGNED_MODE)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d107      	bne.n	8000cb0 <MCAL_GPTM_Init+0x3d0>
	{
		TIMx_CR1 |= GPTM_ConfigPtr->GPTM_CounterDirection;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8000ca6:	8b3b      	ldrh	r3, [r7, #24]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	4313      	orrs	r3, r2
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	833b      	strh	r3, [r7, #24]


	/*
	 * 6) Configure the IRQs Needed
	 */
	if(GPTM_ConfigPtr->GPTM_IRQ_EN != GPTM_IRQ_EN_DISABLE)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d039      	beq.n	8000d2e <MCAL_GPTM_Init+0x44e>
	{
		TIMx_DIER |= GPTM_ConfigPtr->GPTM_IRQ_EN;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 8000cc0:	8a7b      	ldrh	r3, [r7, #18]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	827b      	strh	r3, [r7, #18]
		if(GPTM_ConfigPtr->TIMx == TIM2)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd2:	d10b      	bne.n	8000cec <MCAL_GPTM_Init+0x40c>
		{
			g_IRQ_CallBackPtr[0] = GPTM_ConfigPtr->IRQ_CallBackPtr;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cda:	4a26      	ldr	r2, [pc, #152]	; (8000d74 <MCAL_GPTM_Init+0x494>)
 8000cdc:	6013      	str	r3, [r2, #0]
			NVIC_IRQ28_EN();
 8000cde:	4b26      	ldr	r3, [pc, #152]	; (8000d78 <MCAL_GPTM_Init+0x498>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a25      	ldr	r2, [pc, #148]	; (8000d78 <MCAL_GPTM_Init+0x498>)
 8000ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e020      	b.n	8000d2e <MCAL_GPTM_Init+0x44e>
		}
		else if(GPTM_ConfigPtr->TIMx == TIM3)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a22      	ldr	r2, [pc, #136]	; (8000d7c <MCAL_GPTM_Init+0x49c>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d10b      	bne.n	8000d0e <MCAL_GPTM_Init+0x42e>
		{
			g_IRQ_CallBackPtr[1] = GPTM_ConfigPtr->IRQ_CallBackPtr;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <MCAL_GPTM_Init+0x494>)
 8000cfe:	6053      	str	r3, [r2, #4]
			NVIC_IRQ29_EN();
 8000d00:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <MCAL_GPTM_Init+0x498>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a1c      	ldr	r2, [pc, #112]	; (8000d78 <MCAL_GPTM_Init+0x498>)
 8000d06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	e00f      	b.n	8000d2e <MCAL_GPTM_Init+0x44e>
		}
		else if(GPTM_ConfigPtr->TIMx == TIM4)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <MCAL_GPTM_Init+0x4a0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d10a      	bne.n	8000d2e <MCAL_GPTM_Init+0x44e>
		{
			g_IRQ_CallBackPtr[2] = GPTM_ConfigPtr->IRQ_CallBackPtr;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d1e:	4a15      	ldr	r2, [pc, #84]	; (8000d74 <MCAL_GPTM_Init+0x494>)
 8000d20:	6093      	str	r3, [r2, #8]
			NVIC_IRQ30_EN();
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <MCAL_GPTM_Init+0x498>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <MCAL_GPTM_Init+0x498>)
 8000d28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d2c:	6013      	str	r3, [r2, #0]
		}
	}

	GPTM_ConfigPtr->TIMx->CR1 		= TIMx_CR1;
 8000d2e:	8b3b      	ldrh	r3, [r7, #24]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	601a      	str	r2, [r3, #0]
	GPTM_ConfigPtr->TIMx->SMCR 		= TIMx_SMCR;
 8000d38:	8abb      	ldrh	r3, [r7, #20]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	609a      	str	r2, [r3, #8]
	GPTM_ConfigPtr->TIMx->DIER 		= TIMx_DIER;
 8000d42:	8a7b      	ldrh	r3, [r7, #18]
 8000d44:	b29a      	uxth	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	60da      	str	r2, [r3, #12]
	GPTM_ConfigPtr->TIMx->CCMR[0] 	= TIMx_CCMR[0];
 8000d4c:	89bb      	ldrh	r3, [r7, #12]
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	619a      	str	r2, [r3, #24]
	GPTM_ConfigPtr->TIMx->CCMR[1] 	= TIMx_CCMR[1];
 8000d56:	89fb      	ldrh	r3, [r7, #14]
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	61da      	str	r2, [r3, #28]
	GPTM_ConfigPtr->TIMx->CCER 		= TIMx_CCER;
 8000d60:	897b      	ldrh	r3, [r7, #10]
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	621a      	str	r2, [r3, #32]

	return;
 8000d6a:	bf00      	nop

}
 8000d6c:	3720      	adds	r7, #32
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc90      	pop	{r4, r7}
 8000d72:	4770      	bx	lr
 8000d74:	20000060 	.word	0x20000060
 8000d78:	e000e100 	.word	0xe000e100
 8000d7c:	40000400 	.word	0x40000400
 8000d80:	40000800 	.word	0x40000800

08000d84 <MCAL_GPTM_GPIO_SetPins>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_GPTM_GPIO_SetPins(GPTM_Config_t* GPTM_ConfigPtr){
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b0a8      	sub	sp, #160	; 0xa0
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

	//Check if TIMx is TIM2
	if(GPTM_ConfigPtr->TIMx == TIM2){
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d94:	d14d      	bne.n	8000e32 <MCAL_GPTM_GPIO_SetPins+0xae>

		for(uint8_t i=0;i<4;i++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8000d9c:	e044      	b.n	8000e28 <MCAL_GPTM_GPIO_SetPins+0xa4>
		{
			if(GPTM_ConfigPtr->GPTM_InputChannelX[i].CH_Enable || GPTM_ConfigPtr->GPTM_ExternalTrigger.EXTTRIG_Enable)
 8000d9e:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	440b      	add	r3, r1
 8000dae:	330c      	adds	r3, #12
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d103      	bne.n	8000dbe <MCAL_GPTM_GPIO_SetPins+0x3a>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	889b      	ldrh	r3, [r3, #4]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d013      	beq.n	8000de6 <MCAL_GPTM_GPIO_SetPins+0x62>
			{
				// GPIO Configuration: Alternate function push-pull
				GPIO_PinConfig_t Tim2ChannelX = {GPIOA, i, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000dbe:	4bb0      	ldr	r3, [pc, #704]	; (8001080 <MCAL_GPTM_GPIO_SetPins+0x2fc>)
 8000dc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000dc4:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
 8000dce:	2308      	movs	r3, #8
 8000dd0:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
				MCAL_GPIO_Init(&Tim2ChannelX);
 8000dda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dde:	4618      	mov	r0, r3
 8000de0:	f7ff fc30 	bl	8000644 <MCAL_GPIO_Init>
			{
 8000de4:	e01b      	b.n	8000e1e <MCAL_GPTM_GPIO_SetPins+0x9a>
			}
			else if(GPTM_ConfigPtr->GPTM_OutputChannelX[i].CH_Enable)
 8000de6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	4413      	add	r3, r2
 8000df0:	333c      	adds	r3, #60	; 0x3c
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d012      	beq.n	8000e1e <MCAL_GPTM_GPIO_SetPins+0x9a>
			{
				GPIO_PinConfig_t Tim2ChannelX = {GPIOA, i, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000df8:	4ba1      	ldr	r3, [pc, #644]	; (8001080 <MCAL_GPTM_GPIO_SetPins+0x2fc>)
 8000dfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000dfe:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000e02:	b29b      	uxth	r3, r3
 8000e04:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8000e08:	2306      	movs	r3, #6
 8000e0a:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8000e0e:	2301      	movs	r3, #1
 8000e10:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
				MCAL_GPIO_Init(&Tim2ChannelX);
 8000e14:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fc13 	bl	8000644 <MCAL_GPIO_Init>
		for(uint8_t i=0;i<4;i++)
 8000e1e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000e22:	3301      	adds	r3, #1
 8000e24:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8000e28:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d9b6      	bls.n	8000d9e <MCAL_GPTM_GPIO_SetPins+0x1a>
		{
			GPIO_PinConfig_t Tim4Channel4 = {GPIOB, GPIO_PIN_9, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
			MCAL_GPIO_Init(&Tim4Channel4);
		}
	}
}
 8000e30:	e121      	b.n	8001076 <MCAL_GPTM_GPIO_SetPins+0x2f2>
	else if(GPTM_ConfigPtr->TIMx == TIM3){
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a93      	ldr	r2, [pc, #588]	; (8001084 <MCAL_GPTM_GPIO_SetPins+0x300>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	f040 808c 	bne.w	8000f56 <MCAL_GPTM_GPIO_SetPins+0x1d2>
		if(GPTM_ConfigPtr->GPTM_InputChannelX[CHANNEL_1_INDEX].CH_Enable)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7b1b      	ldrb	r3, [r3, #12]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00c      	beq.n	8000e60 <MCAL_GPTM_GPIO_SetPins+0xdc>
			GPIO_PinConfig_t Tim3Channel1 = {GPIOA, GPIO_PIN_6, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000e46:	4a90      	ldr	r2, [pc, #576]	; (8001088 <MCAL_GPTM_GPIO_SetPins+0x304>)
 8000e48:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e50:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim3Channel1);
 8000e54:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fbf3 	bl	8000644 <MCAL_GPIO_Init>
 8000e5e:	e010      	b.n	8000e82 <MCAL_GPTM_GPIO_SetPins+0xfe>
		else if(GPTM_ConfigPtr->GPTM_OutputChannelX[CHANNEL_1_INDEX].CH_Enable)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00b      	beq.n	8000e82 <MCAL_GPTM_GPIO_SetPins+0xfe>
			GPIO_PinConfig_t Tim3Channel1 = {GPIOA, GPIO_PIN_6, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000e6a:	4a88      	ldr	r2, [pc, #544]	; (800108c <MCAL_GPTM_GPIO_SetPins+0x308>)
 8000e6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e74:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim3Channel1);
 8000e78:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fbe1 	bl	8000644 <MCAL_GPIO_Init>
		if(GPTM_ConfigPtr->GPTM_InputChannelX[CHANNEL_2_INDEX].CH_Enable)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	7e1b      	ldrb	r3, [r3, #24]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00c      	beq.n	8000ea4 <MCAL_GPTM_GPIO_SetPins+0x120>
			GPIO_PinConfig_t Tim3Channel2 = {GPIOA, GPIO_PIN_7, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000e8a:	4a81      	ldr	r2, [pc, #516]	; (8001090 <MCAL_GPTM_GPIO_SetPins+0x30c>)
 8000e8c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e94:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim3Channel2);
 8000e98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fbd1 	bl	8000644 <MCAL_GPIO_Init>
 8000ea2:	e010      	b.n	8000ec6 <MCAL_GPTM_GPIO_SetPins+0x142>
		else if(GPTM_ConfigPtr->GPTM_OutputChannelX[CHANNEL_2_INDEX].CH_Enable)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d00b      	beq.n	8000ec6 <MCAL_GPTM_GPIO_SetPins+0x142>
			GPIO_PinConfig_t Tim3Channel2 = {GPIOA, GPIO_PIN_7, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000eae:	4a79      	ldr	r2, [pc, #484]	; (8001094 <MCAL_GPTM_GPIO_SetPins+0x310>)
 8000eb0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000eb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eb8:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim3Channel2);
 8000ebc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff fbbf 	bl	8000644 <MCAL_GPIO_Init>
		if(GPTM_ConfigPtr->GPTM_InputChannelX[CHANNEL_3_INDEX].CH_Enable)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d00c      	beq.n	8000eea <MCAL_GPTM_GPIO_SetPins+0x166>
			GPIO_PinConfig_t Tim3Channel3 = {GPIOB, GPIO_PIN_0, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000ed0:	4a71      	ldr	r2, [pc, #452]	; (8001098 <MCAL_GPTM_GPIO_SetPins+0x314>)
 8000ed2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ed6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000eda:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim3Channel3);
 8000ede:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fbae 	bl	8000644 <MCAL_GPIO_Init>
 8000ee8:	e010      	b.n	8000f0c <MCAL_GPTM_GPIO_SetPins+0x188>
		else if(GPTM_ConfigPtr->GPTM_OutputChannelX[CHANNEL_3_INDEX].CH_Enable)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00b      	beq.n	8000f0c <MCAL_GPTM_GPIO_SetPins+0x188>
			GPIO_PinConfig_t Tim3Channel3 = {GPIOB, GPIO_PIN_0, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000ef4:	4a69      	ldr	r2, [pc, #420]	; (800109c <MCAL_GPTM_GPIO_SetPins+0x318>)
 8000ef6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000efa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000efe:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim3Channel3);
 8000f02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fb9c 	bl	8000644 <MCAL_GPIO_Init>
		if(GPTM_ConfigPtr->GPTM_InputChannelX[CHANNEL_4_INDEX].CH_Enable)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00c      	beq.n	8000f30 <MCAL_GPTM_GPIO_SetPins+0x1ac>
			GPIO_PinConfig_t Tim3Channel4 = {GPIOB, GPIO_PIN_1, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000f16:	4a62      	ldr	r2, [pc, #392]	; (80010a0 <MCAL_GPTM_GPIO_SetPins+0x31c>)
 8000f18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f20:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim3Channel4);
 8000f24:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fb8b 	bl	8000644 <MCAL_GPIO_Init>
}
 8000f2e:	e0a2      	b.n	8001076 <MCAL_GPTM_GPIO_SetPins+0x2f2>
		else if(GPTM_ConfigPtr->GPTM_OutputChannelX[CHANNEL_4_INDEX].CH_Enable)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 809d 	beq.w	8001076 <MCAL_GPTM_GPIO_SetPins+0x2f2>
			GPIO_PinConfig_t Tim3Channel4 = {GPIOB, GPIO_PIN_1, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000f3c:	4a59      	ldr	r2, [pc, #356]	; (80010a4 <MCAL_GPTM_GPIO_SetPins+0x320>)
 8000f3e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f46:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim3Channel4);
 8000f4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fb78 	bl	8000644 <MCAL_GPIO_Init>
}
 8000f54:	e08f      	b.n	8001076 <MCAL_GPTM_GPIO_SetPins+0x2f2>
	else if(GPTM_ConfigPtr->TIMx == TIM4){
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a53      	ldr	r2, [pc, #332]	; (80010a8 <MCAL_GPTM_GPIO_SetPins+0x324>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	f040 808a 	bne.w	8001076 <MCAL_GPTM_GPIO_SetPins+0x2f2>
		if(GPTM_ConfigPtr->GPTM_InputChannelX[CHANNEL_1_INDEX].CH_Enable)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	7b1b      	ldrb	r3, [r3, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00c      	beq.n	8000f84 <MCAL_GPTM_GPIO_SetPins+0x200>
			GPIO_PinConfig_t Tim4Channel1 = {GPIOB, GPIO_PIN_6, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000f6a:	4a50      	ldr	r2, [pc, #320]	; (80010ac <MCAL_GPTM_GPIO_SetPins+0x328>)
 8000f6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f70:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f74:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim4Channel1);
 8000f78:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fb61 	bl	8000644 <MCAL_GPIO_Init>
 8000f82:	e010      	b.n	8000fa6 <MCAL_GPTM_GPIO_SetPins+0x222>
		else if(GPTM_ConfigPtr->GPTM_OutputChannelX[CHANNEL_1_INDEX].CH_Enable)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00b      	beq.n	8000fa6 <MCAL_GPTM_GPIO_SetPins+0x222>
			GPIO_PinConfig_t Tim4Channel1 = {GPIOB, GPIO_PIN_6, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000f8e:	4a48      	ldr	r2, [pc, #288]	; (80010b0 <MCAL_GPTM_GPIO_SetPins+0x32c>)
 8000f90:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f98:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim4Channel1);
 8000f9c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fb4f 	bl	8000644 <MCAL_GPIO_Init>
		if(GPTM_ConfigPtr->GPTM_InputChannelX[CHANNEL_2_INDEX].CH_Enable)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	7e1b      	ldrb	r3, [r3, #24]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00c      	beq.n	8000fc8 <MCAL_GPTM_GPIO_SetPins+0x244>
			GPIO_PinConfig_t Tim4Channel2 = {GPIOB, GPIO_PIN_7, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000fae:	4a41      	ldr	r2, [pc, #260]	; (80010b4 <MCAL_GPTM_GPIO_SetPins+0x330>)
 8000fb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fb8:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim4Channel2);
 8000fbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fb3f 	bl	8000644 <MCAL_GPIO_Init>
 8000fc6:	e010      	b.n	8000fea <MCAL_GPTM_GPIO_SetPins+0x266>
		else if(GPTM_ConfigPtr->GPTM_OutputChannelX[CHANNEL_2_INDEX].CH_Enable)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00b      	beq.n	8000fea <MCAL_GPTM_GPIO_SetPins+0x266>
			GPIO_PinConfig_t Tim4Channel2 = {GPIOB, GPIO_PIN_7, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000fd2:	4a39      	ldr	r2, [pc, #228]	; (80010b8 <MCAL_GPTM_GPIO_SetPins+0x334>)
 8000fd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000fdc:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim4Channel2);
 8000fe0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fb2d 	bl	8000644 <MCAL_GPIO_Init>
		if(GPTM_ConfigPtr->GPTM_InputChannelX[CHANNEL_3_INDEX].CH_Enable)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00c      	beq.n	800100e <MCAL_GPTM_GPIO_SetPins+0x28a>
			GPIO_PinConfig_t Tim4Channel3 = {GPIOB, GPIO_PIN_8, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000ff4:	4a31      	ldr	r2, [pc, #196]	; (80010bc <MCAL_GPTM_GPIO_SetPins+0x338>)
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ffe:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim4Channel3);
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fb1c 	bl	8000644 <MCAL_GPIO_Init>
 800100c:	e010      	b.n	8001030 <MCAL_GPTM_GPIO_SetPins+0x2ac>
		else if(GPTM_ConfigPtr->GPTM_OutputChannelX[CHANNEL_3_INDEX].CH_Enable)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <MCAL_GPTM_GPIO_SetPins+0x2ac>
			GPIO_PinConfig_t Tim4Channel3 = {GPIOB, GPIO_PIN_8, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8001018:	4a29      	ldr	r2, [pc, #164]	; (80010c0 <MCAL_GPTM_GPIO_SetPins+0x33c>)
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001022:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim4Channel3);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fb0a 	bl	8000644 <MCAL_GPIO_Init>
		if(GPTM_ConfigPtr->GPTM_InputChannelX[CHANNEL_4_INDEX].CH_Enable)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00c      	beq.n	8001054 <MCAL_GPTM_GPIO_SetPins+0x2d0>
			GPIO_PinConfig_t Tim4Channel4 = {GPIOB, GPIO_PIN_9, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 800103a:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <MCAL_GPTM_GPIO_SetPins+0x340>)
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001044:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim4Channel4);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff faf9 	bl	8000644 <MCAL_GPIO_Init>
}
 8001052:	e010      	b.n	8001076 <MCAL_GPTM_GPIO_SetPins+0x2f2>
		else if(GPTM_ConfigPtr->GPTM_OutputChannelX[CHANNEL_4_INDEX].CH_Enable)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800105a:	2b00      	cmp	r3, #0
 800105c:	d00b      	beq.n	8001076 <MCAL_GPTM_GPIO_SetPins+0x2f2>
			GPIO_PinConfig_t Tim4Channel4 = {GPIOB, GPIO_PIN_9, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 800105e:	4a1a      	ldr	r2, [pc, #104]	; (80010c8 <MCAL_GPTM_GPIO_SetPins+0x344>)
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001068:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tim4Channel4);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fae7 	bl	8000644 <MCAL_GPIO_Init>
}
 8001076:	bf00      	nop
 8001078:	37a0      	adds	r7, #160	; 0xa0
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40010800 	.word	0x40010800
 8001084:	40000400 	.word	0x40000400
 8001088:	0800180c 	.word	0x0800180c
 800108c:	08001814 	.word	0x08001814
 8001090:	0800181c 	.word	0x0800181c
 8001094:	08001824 	.word	0x08001824
 8001098:	0800182c 	.word	0x0800182c
 800109c:	08001834 	.word	0x08001834
 80010a0:	0800183c 	.word	0x0800183c
 80010a4:	08001844 	.word	0x08001844
 80010a8:	40000800 	.word	0x40000800
 80010ac:	0800184c 	.word	0x0800184c
 80010b0:	08001854 	.word	0x08001854
 80010b4:	0800185c 	.word	0x0800185c
 80010b8:	08001864 	.word	0x08001864
 80010bc:	0800186c 	.word	0x0800186c
 80010c0:	08001874 	.word	0x08001874
 80010c4:	0800187c 	.word	0x0800187c
 80010c8:	08001884 	.word	0x08001884

080010cc <MCAL_GPTM_StartCounter>:


void MCAL_GPTM_StartCounter(GPTM_Typedef* TimX){
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	/*
	 * Enable the counter to enable the Timer Clock
	 */
	TimX->CR1 |= GPTM_COUNTER_ENABLE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f043 0201 	orr.w	r2, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <MCAL_GPTM_SetAutoReload>:
	 * Make an update software generation
	 */
	TimX->EGR |= GPTM_UPDATE_GENERATION;
}

void MCAL_GPTM_SetAutoReload(GPTM_Typedef* TimX,uint16_t Value){
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	807b      	strh	r3, [r7, #2]
	TimX->ARR = Value;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	bc80      	pop	{r7}
 8001104:	4770      	bx	lr

08001106 <MCAL_GPTM_SetPreScaler>:
uint16_t MCAL_GPTM_GetAutoReload(GPTM_Typedef* TimX){
	uint32_t Value = TimX->ARR;
	return (uint16_t)Value;
}

void MCAL_GPTM_SetPreScaler(GPTM_Typedef* TimX,uint16_t Value){
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
 800110e:	460b      	mov	r3, r1
 8001110:	807b      	strh	r3, [r7, #2]
	TimX->PSC = Value-1;
 8001112:	887b      	ldrh	r3, [r7, #2]
 8001114:	3b01      	subs	r3, #1
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <MCAL_GPTM_SetCCRx>:
	uint32_t Value = TimX->PSC;
	return ((uint16_t)(Value+1));
}

void MCAL_GPTM_SetCCRx(GPTM_Typedef* TimX, uint8_t CCRxIndex, uint16_t CCRxValue)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	460b      	mov	r3, r1
 8001130:	70fb      	strb	r3, [r7, #3]
 8001132:	4613      	mov	r3, r2
 8001134:	803b      	strh	r3, [r7, #0]
	if(CCRxIndex >= 0 || CCRxIndex < 4)
		TimX->CCR[CCRxIndex] = CCRxValue;
 8001136:	78fb      	ldrb	r3, [r7, #3]
 8001138:	883a      	ldrh	r2, [r7, #0]
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	330c      	adds	r3, #12
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	605a      	str	r2, [r3, #4]
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
	...

08001150 <TIM2_IRQHandler>:
	if(CCRxIndex >= 0 || CCRxIndex < 4)
		return (TimX->CCR[CCRxIndex]);
}

void TIM2_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	if(TIM2->SR & (1<<0))
 8001154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001158:	691b      	ldr	r3, [r3, #16]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d012      	beq.n	8001188 <TIM2_IRQHandler+0x38>
	{
		/*
		 * Stop Counting while handling ISR.
		 */
		CLEAR_BIT(TIM2->CR1,0);
 8001162:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800116c:	f023 0301 	bic.w	r3, r3, #1
 8001170:	6013      	str	r3, [r2, #0]
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM2->SR,0);
 8001172:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001176:	691b      	ldr	r3, [r3, #16]
 8001178:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800117c:	f023 0301 	bic.w	r3, r3, #1
 8001180:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[0]();
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <TIM2_IRQHandler+0x60>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4798      	blx	r3
	}

	if(TIM2->SR & GPTM_IRQ_EN_TIE)
 8001188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00a      	beq.n	80011ac <TIM2_IRQHandler+0x5c>
	{
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM2->SR,6);
 8001196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011a4:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[0]();
 80011a6:	4b02      	ldr	r3, [pc, #8]	; (80011b0 <TIM2_IRQHandler+0x60>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4798      	blx	r3
	}
}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000060 	.word	0x20000060

080011b4 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	if(TIM3->SR & (1<<0))
 80011b8:	4b12      	ldr	r3, [pc, #72]	; (8001204 <TIM3_IRQHandler+0x50>)
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d00e      	beq.n	80011e2 <TIM3_IRQHandler+0x2e>
	{
		/*
		 * Stop Counting while handling ISR.
		 */
		CLEAR_BIT(TIM3->CR1,0);
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <TIM3_IRQHandler+0x50>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0e      	ldr	r2, [pc, #56]	; (8001204 <TIM3_IRQHandler+0x50>)
 80011ca:	f023 0301 	bic.w	r3, r3, #1
 80011ce:	6013      	str	r3, [r2, #0]
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM3->SR,0);
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <TIM3_IRQHandler+0x50>)
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	4a0b      	ldr	r2, [pc, #44]	; (8001204 <TIM3_IRQHandler+0x50>)
 80011d6:	f023 0301 	bic.w	r3, r3, #1
 80011da:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[1]();
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <TIM3_IRQHandler+0x54>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4798      	blx	r3
	}

	if(TIM3->SR & GPTM_IRQ_EN_TIE)
 80011e2:	4b08      	ldr	r3, [pc, #32]	; (8001204 <TIM3_IRQHandler+0x50>)
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d008      	beq.n	8001200 <TIM3_IRQHandler+0x4c>
	{
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM3->SR,6);
 80011ee:	4b05      	ldr	r3, [pc, #20]	; (8001204 <TIM3_IRQHandler+0x50>)
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	4a04      	ldr	r2, [pc, #16]	; (8001204 <TIM3_IRQHandler+0x50>)
 80011f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011f8:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[1]();
 80011fa:	4b03      	ldr	r3, [pc, #12]	; (8001208 <TIM3_IRQHandler+0x54>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4798      	blx	r3
	}
}
 8001200:	bf00      	nop
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40000400 	.word	0x40000400
 8001208:	20000060 	.word	0x20000060

0800120c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	if(TIM4->SR & (1<<0))
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <TIM4_IRQHandler+0x50>)
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00e      	beq.n	800123a <TIM4_IRQHandler+0x2e>
	{
		/*
		 * Stop Counting while handling ISR.
		 */
		CLEAR_BIT(TIM4->CR1,0);
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <TIM4_IRQHandler+0x50>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0e      	ldr	r2, [pc, #56]	; (800125c <TIM4_IRQHandler+0x50>)
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	6013      	str	r3, [r2, #0]
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM4->SR,0);
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <TIM4_IRQHandler+0x50>)
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	4a0b      	ldr	r2, [pc, #44]	; (800125c <TIM4_IRQHandler+0x50>)
 800122e:	f023 0301 	bic.w	r3, r3, #1
 8001232:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[2]();
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <TIM4_IRQHandler+0x54>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4798      	blx	r3
	}

	if(TIM4->SR & GPTM_IRQ_EN_TIE)
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <TIM4_IRQHandler+0x50>)
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001242:	2b00      	cmp	r3, #0
 8001244:	d008      	beq.n	8001258 <TIM4_IRQHandler+0x4c>
	{
		/*
		 * Clear the TIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM4->SR,6);
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <TIM4_IRQHandler+0x50>)
 8001248:	691b      	ldr	r3, [r3, #16]
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <TIM4_IRQHandler+0x50>)
 800124c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001250:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[2]();
 8001252:	4b03      	ldr	r3, [pc, #12]	; (8001260 <TIM4_IRQHandler+0x54>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	4798      	blx	r3
	}
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40000800 	.word	0x40000800
 8001260:	20000060 	.word	0x20000060

08001264 <I2C1_EV_IRQHandler>:
										ISRs Definitions
-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
======================================================================================================*/

void I2C1_EV_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
	//vuint32_t Dummy_Read = 0; // Volatile for compiler optimization
	vuint32_t dummy = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]

	/* Interrupt handling for both master and slave mode of the device */
	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_1 = (I2C1->CR2 & (I2C_IRQ_ITEVFEN));	// Event interrupt enable
 800126e:	4b39      	ldr	r3, [pc, #228]	; (8001354 <I2C1_EV_IRQHandler+0xf0>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001276:	60fb      	str	r3, [r7, #12]
	Temp_2 = (I2C1->CR2 & (I2C_IRQ_IITBUFEN));	// Buffer interrupt enable
 8001278:	4b36      	ldr	r3, [pc, #216]	; (8001354 <I2C1_EV_IRQHandler+0xf0>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001280:	60bb      	str	r3, [r7, #8]
	Temp_3 = (I2C1->SR1 & (I2C_Flag_STOPF));	// Stop detection (slave mode)
 8001282:	4b34      	ldr	r3, [pc, #208]	; (8001354 <I2C1_EV_IRQHandler+0xf0>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	607b      	str	r3, [r7, #4]

	/* Handle Stop Condition Event */
	if(Temp_1 && Temp_3)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00a      	beq.n	80012a8 <I2C1_EV_IRQHandler+0x44>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d007      	beq.n	80012a8 <I2C1_EV_IRQHandler+0x44>
	{
		/* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		 * i have already read SR1 in Temp_3
		 * then next statement i write to CR1
		 */
		I2C1->CR1 |= 0x0000;
 8001298:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <I2C1_EV_IRQHandler+0xf0>)
 800129a:	4a2e      	ldr	r2, [pc, #184]	; (8001354 <I2C1_EV_IRQHandler+0xf0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6013      	str	r3, [r2, #0]
		g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_STOPF);
 80012a0:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <I2C1_EV_IRQHandler+0xf4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2004      	movs	r0, #4
 80012a6:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle Received address matched. */
	Temp_3 = (I2C1->SR1 & (I2C_Flag_ADDR));		//ADDR
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <I2C1_EV_IRQHandler+0xf0>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_3)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d00c      	beq.n	80012d2 <I2C1_EV_IRQHandler+0x6e>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d009      	beq.n	80012d2 <I2C1_EV_IRQHandler+0x6e>
		 */
		//Dummy_Read  = I2C1->SR1;
		//Dummy_Read  = I2C1->SR2;

		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 80012be:	4b25      	ldr	r3, [pc, #148]	; (8001354 <I2C1_EV_IRQHandler+0xf0>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <I2C1_EV_IRQHandler+0x6e>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_ADDR);
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <I2C1_EV_IRQHandler+0xf4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2001      	movs	r0, #1
 80012d0:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
	Temp_3 = (I2C1->SR1 & (I2C_Flag_TXE));		// TXE
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <I2C1_EV_IRQHandler+0xf0>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case TXE=1, ITEVTEN=1, ITBUFEN=1
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d015      	beq.n	800130e <I2C1_EV_IRQHandler+0xaa>
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d012      	beq.n	800130e <I2C1_EV_IRQHandler+0xaa>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00f      	beq.n	800130e <I2C1_EV_IRQHandler+0xaa>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 80012ee:	4b19      	ldr	r3, [pc, #100]	; (8001354 <I2C1_EV_IRQHandler+0xf0>)
 80012f0:	699b      	ldr	r3, [r3, #24]
 80012f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d109      	bne.n	800130e <I2C1_EV_IRQHandler+0xaa>
		}
		else
		{
			/* Slave mode */
			/* Check if slave in transmit mode */
			if(I2C1->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 1: Data bytes transmitted
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <I2C1_EV_IRQHandler+0xf0>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <I2C1_EV_IRQHandler+0xaa>
			{
				g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_TxE);
 8001306:	4b14      	ldr	r3, [pc, #80]	; (8001358 <I2C1_EV_IRQHandler+0xf4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2006      	movs	r0, #6
 800130c:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
	Temp_3 = (I2C1->SR1 & (I2C_Flag_RXNE));		// RXNE
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <I2C1_EV_IRQHandler+0xf0>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	f003 0306 	and.w	r3, r3, #6
 8001316:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d015      	beq.n	800134a <I2C1_EV_IRQHandler+0xe6>
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d012      	beq.n	800134a <I2C1_EV_IRQHandler+0xe6>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d00f      	beq.n	800134a <I2C1_EV_IRQHandler+0xe6>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <I2C1_EV_IRQHandler+0xf0>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <I2C1_EV_IRQHandler+0xe6>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			if(I2C1->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 0: Data bytes received
 8001336:	4b07      	ldr	r3, [pc, #28]	; (8001354 <I2C1_EV_IRQHandler+0xf0>)
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <I2C1_EV_IRQHandler+0xe6>
			{
				g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_RxNE);
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <I2C1_EV_IRQHandler+0xf4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2005      	movs	r0, #5
 8001348:	4798      	blx	r3
			}
		}
	}
	(void)dummy;
 800134a:	683b      	ldr	r3, [r7, #0]

}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40005400 	.word	0x40005400
 8001358:	2000006c 	.word	0x2000006c

0800135c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (I2C1->CR2) & I2C_IRQ_ITERREN;
 8001362:	4b39      	ldr	r3, [pc, #228]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800136a:	607b      	str	r3, [r7, #4]


/***********************Check for Bus error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_BERR);
 800136c:	4b36      	ldr	r3, [pc, #216]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	f003 0301 	and.w	r3, r3, #1
 8001374:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2 )
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d00c      	beq.n	8001396 <I2C1_ER_IRQHandler+0x3a>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d009      	beq.n	8001396 <I2C1_ER_IRQHandler+0x3a>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_BERR);
 8001382:	4b31      	ldr	r3, [pc, #196]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	4a30      	ldr	r2, [pc, #192]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 8001388:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800138c:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
	   g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_BERR);
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <I2C1_ER_IRQHandler+0xf0>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2000      	movs	r0, #0
 8001394:	4798      	blx	r3
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_ARLO);
 8001396:	4b2c      	ldr	r3, [pc, #176]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00c      	beq.n	80013c0 <I2C1_ER_IRQHandler+0x64>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d009      	beq.n	80013c0 <I2C1_ER_IRQHandler+0x64>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_ARLO);
 80013ac:	4b26      	ldr	r3, [pc, #152]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	4a25      	ldr	r2, [pc, #148]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 80013b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013b6:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_ARLO);
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <I2C1_ER_IRQHandler+0xf0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2001      	movs	r0, #1
 80013be:	4798      	blx	r3

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_AF);
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00c      	beq.n	80013ea <I2C1_ER_IRQHandler+0x8e>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d009      	beq.n	80013ea <I2C1_ER_IRQHandler+0x8e>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_AF);
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 80013dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013e0:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_AF);
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <I2C1_ER_IRQHandler+0xf0>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2002      	movs	r0, #2
 80013e8:	4798      	blx	r3
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_OVR);
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d00c      	beq.n	8001414 <I2C1_ER_IRQHandler+0xb8>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d009      	beq.n	8001414 <I2C1_ER_IRQHandler+0xb8>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_OVR);
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	4a10      	ldr	r2, [pc, #64]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 8001406:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800140a:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_OVR);
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <I2C1_ER_IRQHandler+0xf0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2003      	movs	r0, #3
 8001412:	4798      	blx	r3
	}

/***********************Check for Time out error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_TIMEOUT);
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 8001416:	695b      	ldr	r3, [r3, #20]
 8001418:	f003 0320 	and.w	r3, r3, #32
 800141c:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d00c      	beq.n	800143e <I2C1_ER_IRQHandler+0xe2>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d009      	beq.n	800143e <I2C1_ER_IRQHandler+0xe2>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_TIMEOUT);
 800142a:	4b07      	ldr	r3, [pc, #28]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	4a06      	ldr	r2, [pc, #24]	; (8001448 <I2C1_ER_IRQHandler+0xec>)
 8001430:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001434:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_TIMEOUT);
 8001436:	4b05      	ldr	r3, [pc, #20]	; (800144c <I2C1_ER_IRQHandler+0xf0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2005      	movs	r0, #5
 800143c:	4798      	blx	r3
	}
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40005400 	.word	0x40005400
 800144c:	20000074 	.word	0x20000074

08001450 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0

	//vuint32_t Dummy_Read = 0; // Volatile for compiler optimization
	vuint32_t dummy = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	603b      	str	r3, [r7, #0]

	/* Interrupt handling for both master and slave mode of the device */
	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_1 = (I2C2->CR2 & (I2C_IRQ_ITEVFEN));	// Event interrupt enable
 800145a:	4b39      	ldr	r3, [pc, #228]	; (8001540 <I2C2_EV_IRQHandler+0xf0>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001462:	60fb      	str	r3, [r7, #12]
	Temp_2 = (I2C2->CR2 & (I2C_IRQ_IITBUFEN));	// Buffer interrupt enable
 8001464:	4b36      	ldr	r3, [pc, #216]	; (8001540 <I2C2_EV_IRQHandler+0xf0>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800146c:	60bb      	str	r3, [r7, #8]
	Temp_3 = (I2C2->SR1 & (I2C_Flag_STOPF));	// Stop detection (slave mode)
 800146e:	4b34      	ldr	r3, [pc, #208]	; (8001540 <I2C2_EV_IRQHandler+0xf0>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f003 0304 	and.w	r3, r3, #4
 8001476:	607b      	str	r3, [r7, #4]

	/* Handle Stop Condition Event */
	if(Temp_1 && Temp_3)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00a      	beq.n	8001494 <I2C2_EV_IRQHandler+0x44>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d007      	beq.n	8001494 <I2C2_EV_IRQHandler+0x44>
	{
		/* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		 * i have already read SR1 in Temp_3
		 * then next statement i write to CR1
		 */
		I2C2->CR1 |= 0x0000;
 8001484:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <I2C2_EV_IRQHandler+0xf0>)
 8001486:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <I2C2_EV_IRQHandler+0xf0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6013      	str	r3, [r2, #0]
		g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_STOPF);
 800148c:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <I2C2_EV_IRQHandler+0xf4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2004      	movs	r0, #4
 8001492:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle Received address matched. */
	Temp_3 = (I2C2->SR1 & (I2C_Flag_ADDR));		//ADDR
 8001494:	4b2a      	ldr	r3, [pc, #168]	; (8001540 <I2C2_EV_IRQHandler+0xf0>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_3)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00c      	beq.n	80014be <I2C2_EV_IRQHandler+0x6e>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d009      	beq.n	80014be <I2C2_EV_IRQHandler+0x6e>
		 */
		//Dummy_Read  = I2C1->SR1;
		//Dummy_Read  = I2C1->SR2;

		/* Check master mode or slave mode */
		if(I2C2->SR2 & (1<<I2C_Flag_MSL))
 80014aa:	4b25      	ldr	r3, [pc, #148]	; (8001540 <I2C2_EV_IRQHandler+0xf0>)
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d103      	bne.n	80014be <I2C2_EV_IRQHandler+0x6e>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_ADDR);
 80014b6:	4b23      	ldr	r3, [pc, #140]	; (8001544 <I2C2_EV_IRQHandler+0xf4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2001      	movs	r0, #1
 80014bc:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
	Temp_3 = (I2C2->SR1 & (I2C_Flag_TXE));		// TXE
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <I2C2_EV_IRQHandler+0xf0>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case TXE=1, ITEVTEN=1, ITBUFEN=1
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d015      	beq.n	80014fa <I2C2_EV_IRQHandler+0xaa>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d012      	beq.n	80014fa <I2C2_EV_IRQHandler+0xaa>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00f      	beq.n	80014fa <I2C2_EV_IRQHandler+0xaa>
	{
		/* Check master mode or slave mode */
		if(I2C2->SR2 & (1<<I2C_Flag_MSL))
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <I2C2_EV_IRQHandler+0xf0>)
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d109      	bne.n	80014fa <I2C2_EV_IRQHandler+0xaa>
		}
		else
		{
			/* Slave mode */
			/* Check if slave in transmit mode */
			if(I2C2->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 1: Data bytes transmitted
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <I2C2_EV_IRQHandler+0xf0>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <I2C2_EV_IRQHandler+0xaa>
			{
				g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_TxE);
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <I2C2_EV_IRQHandler+0xf4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2006      	movs	r0, #6
 80014f8:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
	Temp_3 = (I2C2->SR1 & (I2C_Flag_RXNE));		// RXNE
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <I2C2_EV_IRQHandler+0xf0>)
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	f003 0306 	and.w	r3, r3, #6
 8001502:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d015      	beq.n	8001536 <I2C2_EV_IRQHandler+0xe6>
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d012      	beq.n	8001536 <I2C2_EV_IRQHandler+0xe6>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d00f      	beq.n	8001536 <I2C2_EV_IRQHandler+0xe6>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <I2C2_EV_IRQHandler+0xf8>)
 8001518:	699b      	ldr	r3, [r3, #24]
 800151a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d109      	bne.n	8001536 <I2C2_EV_IRQHandler+0xe6>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			if(I2C2->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 0: Data bytes received
 8001522:	4b07      	ldr	r3, [pc, #28]	; (8001540 <I2C2_EV_IRQHandler+0xf0>)
 8001524:	699b      	ldr	r3, [r3, #24]
 8001526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <I2C2_EV_IRQHandler+0xe6>
			{
				g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_RxNE);
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <I2C2_EV_IRQHandler+0xf4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2005      	movs	r0, #5
 8001534:	4798      	blx	r3
			}
		}
	}
	(void)dummy;
 8001536:	683b      	ldr	r3, [r7, #0]


}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40005800 	.word	0x40005800
 8001544:	20000070 	.word	0x20000070
 8001548:	40005400 	.word	0x40005400

0800154c <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (I2C2->CR2) & I2C_IRQ_ITERREN;
 8001552:	4b39      	ldr	r3, [pc, #228]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155a:	607b      	str	r3, [r7, #4]


/***********************Check for Bus error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_BERR);
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2 )
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00c      	beq.n	8001586 <I2C2_ER_IRQHandler+0x3a>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d009      	beq.n	8001586 <I2C2_ER_IRQHandler+0x3a>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_BERR);
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	4a30      	ldr	r2, [pc, #192]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 8001578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800157c:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
	   g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_BERR);
 800157e:	4b2f      	ldr	r3, [pc, #188]	; (800163c <I2C2_ER_IRQHandler+0xf0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2000      	movs	r0, #0
 8001584:	4798      	blx	r3
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_ARLO);
 8001586:	4b2c      	ldr	r3, [pc, #176]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00c      	beq.n	80015b0 <I2C2_ER_IRQHandler+0x64>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d009      	beq.n	80015b0 <I2C2_ER_IRQHandler+0x64>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_ARLO);
 800159c:	4b26      	ldr	r3, [pc, #152]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	4a25      	ldr	r2, [pc, #148]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 80015a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80015a6:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_ARLO);
 80015a8:	4b24      	ldr	r3, [pc, #144]	; (800163c <I2C2_ER_IRQHandler+0xf0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2001      	movs	r0, #1
 80015ae:	4798      	blx	r3

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_AF);
 80015b0:	4b21      	ldr	r3, [pc, #132]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d00c      	beq.n	80015da <I2C2_ER_IRQHandler+0x8e>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <I2C2_ER_IRQHandler+0x8e>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		I2C1->SR2 &= ~( 1 << I2C_Flag_AF);
 80015c6:	4b1e      	ldr	r3, [pc, #120]	; (8001640 <I2C2_ER_IRQHandler+0xf4>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	4a1d      	ldr	r2, [pc, #116]	; (8001640 <I2C2_ER_IRQHandler+0xf4>)
 80015cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015d0:	6193      	str	r3, [r2, #24]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_AF);
 80015d2:	4b1a      	ldr	r3, [pc, #104]	; (800163c <I2C2_ER_IRQHandler+0xf0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2002      	movs	r0, #2
 80015d8:	4798      	blx	r3
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_OVR);
 80015da:	4b17      	ldr	r3, [pc, #92]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00c      	beq.n	8001604 <I2C2_ER_IRQHandler+0xb8>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d009      	beq.n	8001604 <I2C2_ER_IRQHandler+0xb8>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_OVR);
 80015f0:	4b11      	ldr	r3, [pc, #68]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 80015f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015fa:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_OVR);
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <I2C2_ER_IRQHandler+0xf0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2003      	movs	r0, #3
 8001602:	4798      	blx	r3
	}

/***********************Check for Time out error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_TIMEOUT);
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	f003 0320 	and.w	r3, r3, #32
 800160c:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00c      	beq.n	800162e <I2C2_ER_IRQHandler+0xe2>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <I2C2_ER_IRQHandler+0xe2>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_TIMEOUT);
 800161a:	4b07      	ldr	r3, [pc, #28]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	4a06      	ldr	r2, [pc, #24]	; (8001638 <I2C2_ER_IRQHandler+0xec>)
 8001620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001624:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_TIMEOUT);
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <I2C2_ER_IRQHandler+0xf0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2005      	movs	r0, #5
 800162c:	4798      	blx	r3
	}
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40005800 	.word	0x40005800
 800163c:	20000078 	.word	0x20000078
 8001640:	40005400 	.word	0x40005400

08001644 <SPI1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void SPI1_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8001648:	4b02      	ldr	r3, [pc, #8]	; (8001654 <SPI1_IRQHandler+0x10>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4798      	blx	r3
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	2000007c 	.word	0x2000007c

08001658 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 800165c:	4b02      	ldr	r3, [pc, #8]	; (8001668 <SPI2_IRQHandler+0x10>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	4798      	blx	r3
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	2000007c 	.word	0x2000007c

0800166c <USART1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void USART1_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8001670:	4b02      	ldr	r3, [pc, #8]	; (800167c <USART1_IRQHandler+0x10>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4798      	blx	r3
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000008c 	.word	0x2000008c

08001680 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8001684:	4b02      	ldr	r3, [pc, #8]	; (8001690 <USART2_IRQHandler+0x10>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4798      	blx	r3
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000008c 	.word	0x2000008c

08001694 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 8001698:	4b02      	ldr	r3, [pc, #8]	; (80016a4 <USART3_IRQHandler+0x10>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4798      	blx	r3
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000008c 	.word	0x2000008c

080016a8 <main>:
#include "../HAL/Inc/SevenSegment.h"
#include "../HAL/Inc/Servo.h"


int main(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t led = {GPIOC,GPIO_PIN_13,GPIO_MODE_OUTPUT_PP,GPIO_OUTPUT_SPEED_10MHZ};
 80016ae:	4a28      	ldr	r2, [pc, #160]	; (8001750 <main+0xa8>)
 80016b0:	f107 0310 	add.w	r3, r7, #16
 80016b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b8:	e883 0003 	stmia.w	r3, {r0, r1}
	GPIO_PinConfig_t IR1 = {GPIOB,GPIO_PIN_9,GPIO_MODE_INPUT_FLO,GPIO_OUTPUT_SPEED_NONE};
 80016bc:	4a25      	ldr	r2, [pc, #148]	; (8001754 <main+0xac>)
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016c6:	e883 0003 	stmia.w	r3, {r0, r1}

	MCAL_GPIO_Init(&led);
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ffb8 	bl	8000644 <MCAL_GPIO_Init>
	MCAL_GPIO_TogglePin(&led);
 80016d4:	f107 0310 	add.w	r3, r7, #16
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff f8ee 	bl	80008ba <MCAL_GPIO_TogglePin>

	MCAL_GPIO_Init(&IR1);
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ffae 	bl	8000644 <MCAL_GPIO_Init>
	SERVO_Config_t ServoMotor1;
	ServoMotor1.SERVO_TimerPeripheral = TIM2;
 80016e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ec:	603b      	str	r3, [r7, #0]
	ServoMotor1.SERVO_Angle = SERVO_0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	717b      	strb	r3, [r7, #5]
	ServoMotor1.SERVO_ChannelIndex = CHANNEL_1_INDEX;
 80016f2:	2300      	movs	r3, #0
 80016f4:	713b      	strb	r3, [r7, #4]

	HAL_SERVO_Init(&ServoMotor1);
 80016f6:	463b      	mov	r3, r7
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe fd39 	bl	8000170 <HAL_SERVO_Init>

	while(1)
	{
		if(MCAL_GPIO_ReadPin(&IR1) == GPIO_PIN_CLEAR)
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f8ac 	bl	8000860 <MCAL_GPIO_ReadPin>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10b      	bne.n	8001726 <main+0x7e>
		{
			MCAL_GPIO_WritePin(&led, GPIO_PIN_CLEAR);
 800170e:	f107 0310 	add.w	r3, r7, #16
 8001712:	2100      	movs	r1, #0
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff f8b7 	bl	8000888 <MCAL_GPIO_WritePin>
			HAL_SERVO_WriteAngle(&ServoMotor1, SERVO_90);
 800171a:	463b      	mov	r3, r7
 800171c:	215a      	movs	r1, #90	; 0x5a
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fdd1 	bl	80002c6 <HAL_SERVO_WriteAngle>
 8001724:	e7eb      	b.n	80016fe <main+0x56>
		}
		else if(MCAL_GPIO_ReadPin(&IR1) == GPIO_PIN_SET)
 8001726:	f107 0308 	add.w	r3, r7, #8
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff f898 	bl	8000860 <MCAL_GPIO_ReadPin>
 8001730:	4603      	mov	r3, r0
 8001732:	2b01      	cmp	r3, #1
 8001734:	d1e3      	bne.n	80016fe <main+0x56>
		{
			MCAL_GPIO_WritePin(&led, GPIO_PIN_SET);
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	2101      	movs	r1, #1
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff f8a3 	bl	8000888 <MCAL_GPIO_WritePin>
			HAL_SERVO_WriteAngle(&ServoMotor1, SERVO_0);
 8001742:	463b      	mov	r3, r7
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f7fe fdbd 	bl	80002c6 <HAL_SERVO_WriteAngle>
		if(MCAL_GPIO_ReadPin(&IR1) == GPIO_PIN_CLEAR)
 800174c:	e7d7      	b.n	80016fe <main+0x56>
 800174e:	bf00      	nop
 8001750:	0800188c 	.word	0x0800188c
 8001754:	08001894 	.word	0x08001894

08001758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800175a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800175c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001760:	480c      	ldr	r0, [pc, #48]	; (8001794 <LoopForever+0x6>)
  ldr r1, =_edata
 8001762:	490d      	ldr	r1, [pc, #52]	; (8001798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001764:	4a0d      	ldr	r2, [pc, #52]	; (800179c <LoopForever+0xe>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001768:	e002      	b.n	8001770 <LoopCopyDataInit>

0800176a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800176c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800176e:	3304      	adds	r3, #4

08001770 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001770:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001772:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001774:	d3f9      	bcc.n	800176a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001778:	4c0a      	ldr	r4, [pc, #40]	; (80017a4 <LoopForever+0x16>)
  movs r3, #0
 800177a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800177c:	e001      	b.n	8001782 <LoopFillZerobss>

0800177e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800177e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001780:	3204      	adds	r2, #4

08001782 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001782:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001784:	d3fb      	bcc.n	800177e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001786:	f000 f811 	bl	80017ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800178a:	f7ff ff8d 	bl	80016a8 <main>

0800178e <LoopForever>:

LoopForever:
    b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   r0, =_estack
 8001790:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001798:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800179c:	080018a4 	.word	0x080018a4
  ldr r2, =_sbss
 80017a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80017a4:	20000098 	.word	0x20000098

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>
	...

080017ac <__libc_init_array>:
 80017ac:	b570      	push	{r4, r5, r6, lr}
 80017ae:	2500      	movs	r5, #0
 80017b0:	4e0c      	ldr	r6, [pc, #48]	; (80017e4 <__libc_init_array+0x38>)
 80017b2:	4c0d      	ldr	r4, [pc, #52]	; (80017e8 <__libc_init_array+0x3c>)
 80017b4:	1ba4      	subs	r4, r4, r6
 80017b6:	10a4      	asrs	r4, r4, #2
 80017b8:	42a5      	cmp	r5, r4
 80017ba:	d109      	bne.n	80017d0 <__libc_init_array+0x24>
 80017bc:	f000 f81a 	bl	80017f4 <_init>
 80017c0:	2500      	movs	r5, #0
 80017c2:	4e0a      	ldr	r6, [pc, #40]	; (80017ec <__libc_init_array+0x40>)
 80017c4:	4c0a      	ldr	r4, [pc, #40]	; (80017f0 <__libc_init_array+0x44>)
 80017c6:	1ba4      	subs	r4, r4, r6
 80017c8:	10a4      	asrs	r4, r4, #2
 80017ca:	42a5      	cmp	r5, r4
 80017cc:	d105      	bne.n	80017da <__libc_init_array+0x2e>
 80017ce:	bd70      	pop	{r4, r5, r6, pc}
 80017d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017d4:	4798      	blx	r3
 80017d6:	3501      	adds	r5, #1
 80017d8:	e7ee      	b.n	80017b8 <__libc_init_array+0xc>
 80017da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017de:	4798      	blx	r3
 80017e0:	3501      	adds	r5, #1
 80017e2:	e7f2      	b.n	80017ca <__libc_init_array+0x1e>
 80017e4:	0800189c 	.word	0x0800189c
 80017e8:	0800189c 	.word	0x0800189c
 80017ec:	0800189c 	.word	0x0800189c
 80017f0:	080018a0 	.word	0x080018a0

080017f4 <_init>:
 80017f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f6:	bf00      	nop
 80017f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017fa:	bc08      	pop	{r3}
 80017fc:	469e      	mov	lr, r3
 80017fe:	4770      	bx	lr

08001800 <_fini>:
 8001800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001802:	bf00      	nop
 8001804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001806:	bc08      	pop	{r3}
 8001808:	469e      	mov	lr, r3
 800180a:	4770      	bx	lr
