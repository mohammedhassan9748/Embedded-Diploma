
stm32f103x8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001240  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001370  08001370  00011370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001388  08001388  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001388  08001388  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001388  08001388  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001388  08001388  00011388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800138c  0800138c  0001138c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000008  08001398  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08001398  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003255  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c96  00000000  00000000  00023286  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000017b8  00000000  00000000  00023f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000378  00000000  00000000  000256d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002e0  00000000  00000000  00025a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001ff9  00000000  00000000  00025d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001398  00000000  00000000  00027d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a995  00000000  00000000  000290c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00033a56  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000bd8  00000000  00000000  00033ad4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08001358 	.word	0x08001358

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08001358 	.word	0x08001358

08000170 <HAL_EEPROM_Init>:
* @retval 			- None.
*
* Note				- This initializes only one I2C1 only and cannot be used on another I2C peripheral "Channel".
*
*/
void HAL_EEPROM_Init(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	I2C1_Config.I2Cx = I2C1;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000176:	4a0d      	ldr	r2, [pc, #52]	; (80001ac <HAL_EEPROM_Init+0x3c>)
 8000178:	601a      	str	r2, [r3, #0]
	I2C1_Config.I2C_PeripheralMode = I2C_MODE_I2C;
 800017a:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 800017c:	2200      	movs	r2, #0
 800017e:	809a      	strh	r2, [r3, #4]
	I2C1_Config.I2C_MasterSpeedMode = I2C_MASTER_SPEED_MODE_SM;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000182:	2200      	movs	r2, #0
 8000184:	80da      	strh	r2, [r3, #6]
	I2C1_Config.I2C_SCLK = I2C_SCLK_100KHZ;
 8000186:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000188:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <HAL_EEPROM_Init+0x40>)
 800018a:	609a      	str	r2, [r3, #8]
	I2C1_Config.I2C_AddressMode = I2C_ADDRESS_MODE_7_BIT;
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 800018e:	2200      	movs	r2, #0
 8000190:	819a      	strh	r2, [r3, #12]
	I2C1_Config.I2C_SlaveDeviceDuality = I2C_SLAVE_DUALITY_DISABLE;
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000194:	2200      	movs	r2, #0
 8000196:	81da      	strh	r2, [r3, #14]
	I2C1_Config.I2C_StretchMode = I2C_STRETCH_MODE_ENABLE;
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 800019a:	2200      	movs	r2, #0
 800019c:	825a      	strh	r2, [r3, #18]

	MCAL_I2C_Init(&I2C1_Config);
 800019e:	4802      	ldr	r0, [pc, #8]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 80001a0:	f000 fb68 	bl	8000874 <MCAL_I2C_Init>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	20000024 	.word	0x20000024
 80001ac:	40005400 	.word	0x40005400
 80001b0:	000186a0 	.word	0x000186a0

080001b4 <HAL_EEPROM_ReadNbytes>:
* @retval 			- None.
*
* Note				-
*
*/
uint8_t HAL_EEPROM_ReadNbytes(uint16_t MemoryAddress, uint8_t* dataBuffer, uint32_t dataLength){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b088      	sub	sp, #32
 80001b8:	af02      	add	r7, sp, #8
 80001ba:	4603      	mov	r3, r0
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	607a      	str	r2, [r7, #4]
 80001c0:	81fb      	strh	r3, [r7, #14]
	uint8_t MemoryAddressBuffer[2];
	MemoryAddressBuffer[0] = (uint8_t)(MemoryAddress>>8);
 80001c2:	89fb      	ldrh	r3, [r7, #14]
 80001c4:	0a1b      	lsrs	r3, r3, #8
 80001c6:	b29b      	uxth	r3, r3
 80001c8:	b2db      	uxtb	r3, r3
 80001ca:	753b      	strb	r3, [r7, #20]
	MemoryAddressBuffer[1] = (uint8_t) MemoryAddress;
 80001cc:	89fb      	ldrh	r3, [r7, #14]
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_MasterTxPolling(&I2C1_Config, EEPROM_SLAVE_ADDRESS, MemoryAddressBuffer, 2, I2C_Start, I2C_No_Stop);
 80001d2:	f107 0214 	add.w	r2, r7, #20
 80001d6:	2300      	movs	r3, #0
 80001d8:	9301      	str	r3, [sp, #4]
 80001da:	2300      	movs	r3, #0
 80001dc:	9300      	str	r3, [sp, #0]
 80001de:	2302      	movs	r3, #2
 80001e0:	2150      	movs	r1, #80	; 0x50
 80001e2:	4809      	ldr	r0, [pc, #36]	; (8000208 <HAL_EEPROM_ReadNbytes+0x54>)
 80001e4:	f000 fd2a 	bl	8000c3c <MCAL_I2C_MasterTxPolling>

	MCAL_I2C_MasterRxPolling(&I2C1_Config, EEPROM_SLAVE_ADDRESS, dataBuffer, dataLength, I2C_Repeated_Start, I2C_Stop);
 80001e8:	2301      	movs	r3, #1
 80001ea:	9301      	str	r3, [sp, #4]
 80001ec:	2301      	movs	r3, #1
 80001ee:	9300      	str	r3, [sp, #0]
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	68ba      	ldr	r2, [r7, #8]
 80001f4:	2150      	movs	r1, #80	; 0x50
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <HAL_EEPROM_ReadNbytes+0x54>)
 80001f8:	f000 fd95 	bl	8000d26 <MCAL_I2C_MasterRxPolling>

	return 0;
 80001fc:	2300      	movs	r3, #0
}
 80001fe:	4618      	mov	r0, r3
 8000200:	3718      	adds	r7, #24
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000024 	.word	0x20000024

0800020c <EXTI0_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void EXTI0_IRQHandler(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<0);
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <EXTI0_IRQHandler+0x1c>)
 8000212:	695b      	ldr	r3, [r3, #20]
 8000214:	4a04      	ldr	r2, [pc, #16]	; (8000228 <EXTI0_IRQHandler+0x1c>)
 8000216:	f043 0301 	orr.w	r3, r3, #1
 800021a:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 800021c:	4b03      	ldr	r3, [pc, #12]	; (800022c <EXTI0_IRQHandler+0x20>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4798      	blx	r3

}
 8000222:	bf00      	nop
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40010400 	.word	0x40010400
 800022c:	20000048 	.word	0x20000048

08000230 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<1);
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <EXTI1_IRQHandler+0x1c>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a04      	ldr	r2, [pc, #16]	; (800024c <EXTI1_IRQHandler+0x1c>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8000240:	4b03      	ldr	r3, [pc, #12]	; (8000250 <EXTI1_IRQHandler+0x20>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4798      	blx	r3

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40010400 	.word	0x40010400
 8000250:	20000048 	.word	0x20000048

08000254 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<2);
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <EXTI2_IRQHandler+0x1c>)
 800025a:	695b      	ldr	r3, [r3, #20]
 800025c:	4a04      	ldr	r2, [pc, #16]	; (8000270 <EXTI2_IRQHandler+0x1c>)
 800025e:	f043 0304 	orr.w	r3, r3, #4
 8000262:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 8000264:	4b03      	ldr	r3, [pc, #12]	; (8000274 <EXTI2_IRQHandler+0x20>)
 8000266:	689b      	ldr	r3, [r3, #8]
 8000268:	4798      	blx	r3

}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40010400 	.word	0x40010400
 8000274:	20000048 	.word	0x20000048

08000278 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<3);
 800027c:	4b05      	ldr	r3, [pc, #20]	; (8000294 <EXTI3_IRQHandler+0x1c>)
 800027e:	695b      	ldr	r3, [r3, #20]
 8000280:	4a04      	ldr	r2, [pc, #16]	; (8000294 <EXTI3_IRQHandler+0x1c>)
 8000282:	f043 0308 	orr.w	r3, r3, #8
 8000286:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[3]();
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <EXTI3_IRQHandler+0x20>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	4798      	blx	r3

}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40010400 	.word	0x40010400
 8000298:	20000048 	.word	0x20000048

0800029c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<4);
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <EXTI4_IRQHandler+0x1c>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <EXTI4_IRQHandler+0x1c>)
 80002a6:	f043 0310 	orr.w	r3, r3, #16
 80002aa:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[4]();
 80002ac:	4b03      	ldr	r3, [pc, #12]	; (80002bc <EXTI4_IRQHandler+0x20>)
 80002ae:	691b      	ldr	r3, [r3, #16]
 80002b0:	4798      	blx	r3

}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	40010400 	.word	0x40010400
 80002bc:	20000048 	.word	0x20000048

080002c0 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); g_IRQ_CallBackPtr[5]();}
 80002c4:	4b26      	ldr	r3, [pc, #152]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	f003 0320 	and.w	r3, r3, #32
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d008      	beq.n	80002e2 <EXTI9_5_IRQHandler+0x22>
 80002d0:	4b23      	ldr	r3, [pc, #140]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	4a22      	ldr	r2, [pc, #136]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 80002d6:	f043 0320 	orr.w	r3, r3, #32
 80002da:	6153      	str	r3, [r2, #20]
 80002dc:	4b21      	ldr	r3, [pc, #132]	; (8000364 <EXTI9_5_IRQHandler+0xa4>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); g_IRQ_CallBackPtr[6]();}
 80002e2:	4b1f      	ldr	r3, [pc, #124]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d008      	beq.n	8000300 <EXTI9_5_IRQHandler+0x40>
 80002ee:	4b1c      	ldr	r3, [pc, #112]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a1b      	ldr	r2, [pc, #108]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 80002f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <EXTI9_5_IRQHandler+0xa4>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); g_IRQ_CallBackPtr[7]();}
 8000300:	4b17      	ldr	r3, [pc, #92]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000308:	2b00      	cmp	r3, #0
 800030a:	d008      	beq.n	800031e <EXTI9_5_IRQHandler+0x5e>
 800030c:	4b14      	ldr	r3, [pc, #80]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	4a13      	ldr	r2, [pc, #76]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 8000312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000316:	6153      	str	r3, [r2, #20]
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <EXTI9_5_IRQHandler+0xa4>)
 800031a:	69db      	ldr	r3, [r3, #28]
 800031c:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); g_IRQ_CallBackPtr[8]();}
 800031e:	4b10      	ldr	r3, [pc, #64]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000326:	2b00      	cmp	r3, #0
 8000328:	d008      	beq.n	800033c <EXTI9_5_IRQHandler+0x7c>
 800032a:	4b0d      	ldr	r3, [pc, #52]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	4a0c      	ldr	r2, [pc, #48]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 8000330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000334:	6153      	str	r3, [r2, #20]
 8000336:	4b0b      	ldr	r3, [pc, #44]	; (8000364 <EXTI9_5_IRQHandler+0xa4>)
 8000338:	6a1b      	ldr	r3, [r3, #32]
 800033a:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); g_IRQ_CallBackPtr[9]();}
 800033c:	4b08      	ldr	r3, [pc, #32]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000344:	2b00      	cmp	r3, #0
 8000346:	d008      	beq.n	800035a <EXTI9_5_IRQHandler+0x9a>
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <EXTI9_5_IRQHandler+0xa0>)
 800034e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000352:	6153      	str	r3, [r2, #20]
 8000354:	4b03      	ldr	r3, [pc, #12]	; (8000364 <EXTI9_5_IRQHandler+0xa4>)
 8000356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000358:	4798      	blx	r3
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	40010400 	.word	0x40010400
 8000364:	20000048 	.word	0x20000048

08000368 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); g_IRQ_CallBackPtr[10]();}
 800036c:	4b26      	ldr	r3, [pc, #152]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000374:	2b00      	cmp	r3, #0
 8000376:	d008      	beq.n	800038a <EXTI15_10_IRQHandler+0x22>
 8000378:	4b23      	ldr	r3, [pc, #140]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a22      	ldr	r2, [pc, #136]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 800037e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000382:	6153      	str	r3, [r2, #20]
 8000384:	4b21      	ldr	r3, [pc, #132]	; (800040c <EXTI15_10_IRQHandler+0xa4>)
 8000386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000388:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); g_IRQ_CallBackPtr[11]();}
 800038a:	4b1f      	ldr	r3, [pc, #124]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000392:	2b00      	cmp	r3, #0
 8000394:	d008      	beq.n	80003a8 <EXTI15_10_IRQHandler+0x40>
 8000396:	4b1c      	ldr	r3, [pc, #112]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a1b      	ldr	r2, [pc, #108]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 800039c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b1a      	ldr	r3, [pc, #104]	; (800040c <EXTI15_10_IRQHandler+0xa4>)
 80003a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80003a6:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); g_IRQ_CallBackPtr[12]();}
 80003a8:	4b17      	ldr	r3, [pc, #92]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d008      	beq.n	80003c6 <EXTI15_10_IRQHandler+0x5e>
 80003b4:	4b14      	ldr	r3, [pc, #80]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 80003b6:	695b      	ldr	r3, [r3, #20]
 80003b8:	4a13      	ldr	r2, [pc, #76]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 80003ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003be:	6153      	str	r3, [r2, #20]
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <EXTI15_10_IRQHandler+0xa4>)
 80003c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c4:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); g_IRQ_CallBackPtr[13]();}
 80003c6:	4b10      	ldr	r3, [pc, #64]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d008      	beq.n	80003e4 <EXTI15_10_IRQHandler+0x7c>
 80003d2:	4b0d      	ldr	r3, [pc, #52]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a0c      	ldr	r2, [pc, #48]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 80003d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b0b      	ldr	r3, [pc, #44]	; (800040c <EXTI15_10_IRQHandler+0xa4>)
 80003e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003e2:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); g_IRQ_CallBackPtr[14]();}
 80003e4:	4b08      	ldr	r3, [pc, #32]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d008      	beq.n	8000402 <EXTI15_10_IRQHandler+0x9a>
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	4a04      	ldr	r2, [pc, #16]	; (8000408 <EXTI15_10_IRQHandler+0xa0>)
 80003f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003fa:	6153      	str	r3, [r2, #20]
 80003fc:	4b03      	ldr	r3, [pc, #12]	; (800040c <EXTI15_10_IRQHandler+0xa4>)
 80003fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000400:	4798      	blx	r3
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40010400 	.word	0x40010400
 800040c:	20000048 	.word	0x20000048

08000410 <Get_CRx_Position>:
/*================================================================
 * Description :
 * Private Function to get the 4 bits position required to configure of the CRx register according to the  pin number
 * of the specified GPIO_PinConfigPtr
 */
static uint8_t Get_CRx_Position(uint16_t PinNumber){
 8000410:	b480      	push	{r7}
 8000412:	b083      	sub	sp, #12
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	80fb      	strh	r3, [r7, #6]
	//Case PinNumber < GPIO_PIN_8
	switch(PinNumber){
 800041a:	88fb      	ldrh	r3, [r7, #6]
 800041c:	2b80      	cmp	r3, #128	; 0x80
 800041e:	d042      	beq.n	80004a6 <Get_CRx_Position+0x96>
 8000420:	2b80      	cmp	r3, #128	; 0x80
 8000422:	dc11      	bgt.n	8000448 <Get_CRx_Position+0x38>
 8000424:	2b08      	cmp	r3, #8
 8000426:	d036      	beq.n	8000496 <Get_CRx_Position+0x86>
 8000428:	2b08      	cmp	r3, #8
 800042a:	dc06      	bgt.n	800043a <Get_CRx_Position+0x2a>
 800042c:	2b02      	cmp	r3, #2
 800042e:	d02e      	beq.n	800048e <Get_CRx_Position+0x7e>
 8000430:	2b04      	cmp	r3, #4
 8000432:	d02e      	beq.n	8000492 <Get_CRx_Position+0x82>
 8000434:	2b01      	cmp	r3, #1
 8000436:	d028      	beq.n	800048a <Get_CRx_Position+0x7a>
 8000438:	e047      	b.n	80004ca <Get_CRx_Position+0xba>
 800043a:	2b20      	cmp	r3, #32
 800043c:	d02f      	beq.n	800049e <Get_CRx_Position+0x8e>
 800043e:	2b40      	cmp	r3, #64	; 0x40
 8000440:	d02f      	beq.n	80004a2 <Get_CRx_Position+0x92>
 8000442:	2b10      	cmp	r3, #16
 8000444:	d029      	beq.n	800049a <Get_CRx_Position+0x8a>
 8000446:	e040      	b.n	80004ca <Get_CRx_Position+0xba>
 8000448:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800044c:	d033      	beq.n	80004b6 <Get_CRx_Position+0xa6>
 800044e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000452:	dc09      	bgt.n	8000468 <Get_CRx_Position+0x58>
 8000454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000458:	d029      	beq.n	80004ae <Get_CRx_Position+0x9e>
 800045a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800045e:	d028      	beq.n	80004b2 <Get_CRx_Position+0xa2>
 8000460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000464:	d021      	beq.n	80004aa <Get_CRx_Position+0x9a>
 8000466:	e030      	b.n	80004ca <Get_CRx_Position+0xba>
 8000468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800046c:	d027      	beq.n	80004be <Get_CRx_Position+0xae>
 800046e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000472:	dc03      	bgt.n	800047c <Get_CRx_Position+0x6c>
 8000474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000478:	d01f      	beq.n	80004ba <Get_CRx_Position+0xaa>
 800047a:	e026      	b.n	80004ca <Get_CRx_Position+0xba>
 800047c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000480:	d01f      	beq.n	80004c2 <Get_CRx_Position+0xb2>
 8000482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000486:	d01e      	beq.n	80004c6 <Get_CRx_Position+0xb6>
 8000488:	e01f      	b.n	80004ca <Get_CRx_Position+0xba>
		case GPIO_PIN_0:
			return 0;
 800048a:	2300      	movs	r3, #0
 800048c:	e01e      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_1:
			return 4;
 800048e:	2304      	movs	r3, #4
 8000490:	e01c      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_2:
			return 8;
 8000492:	2308      	movs	r3, #8
 8000494:	e01a      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_3:
			return 12;
 8000496:	230c      	movs	r3, #12
 8000498:	e018      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_4:
			return 16;
 800049a:	2310      	movs	r3, #16
 800049c:	e016      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_5:
			return 20;
 800049e:	2314      	movs	r3, #20
 80004a0:	e014      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_6:
			return 24;
 80004a2:	2318      	movs	r3, #24
 80004a4:	e012      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_7:
			return 28;
 80004a6:	231c      	movs	r3, #28
 80004a8:	e010      	b.n	80004cc <Get_CRx_Position+0xbc>

	//Case PinNumber > GPIO_PIN_7
		case GPIO_PIN_8:
			return 0;
 80004aa:	2300      	movs	r3, #0
 80004ac:	e00e      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_9:
			return 4;
 80004ae:	2304      	movs	r3, #4
 80004b0:	e00c      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_10:
			return 8;
 80004b2:	2308      	movs	r3, #8
 80004b4:	e00a      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_11:
			return 12;
 80004b6:	230c      	movs	r3, #12
 80004b8:	e008      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_12:
			return 16;
 80004ba:	2310      	movs	r3, #16
 80004bc:	e006      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_13:
			return 20;
 80004be:	2314      	movs	r3, #20
 80004c0:	e004      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_14:
			return 24;
 80004c2:	2318      	movs	r3, #24
 80004c4:	e002      	b.n	80004cc <Get_CRx_Position+0xbc>
		case GPIO_PIN_15:
			return 28;
 80004c6:	231c      	movs	r3, #28
 80004c8:	e000      	b.n	80004cc <Get_CRx_Position+0xbc>
	}
	return 0;
 80004ca:	2300      	movs	r3, #0
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	370c      	adds	r7, #12
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
	...

080004d8 <MCAL_GPIO_Init>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_Init(GPIO_PinConfig_t* GPIO_PinConfigPtr){
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b085      	sub	sp, #20
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	static uint8_t GPIO_CLK_InitFlag[6] = {0,0,0,0,0,0};
	//Check port selected to enable it's clock
	if((GPIO_PinConfigPtr->GPIO_Port == GPIOA) && (GPIO_CLK_InitFlag[0] != 1))
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a7c      	ldr	r2, [pc, #496]	; (80006d8 <MCAL_GPIO_Init+0x200>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d10d      	bne.n	8000506 <MCAL_GPIO_Init+0x2e>
 80004ea:	4b7c      	ldr	r3, [pc, #496]	; (80006dc <MCAL_GPIO_Init+0x204>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d009      	beq.n	8000506 <MCAL_GPIO_Init+0x2e>
	{
		RCC_GPIOA_CLK_EN();
 80004f2:	4b7b      	ldr	r3, [pc, #492]	; (80006e0 <MCAL_GPIO_Init+0x208>)
 80004f4:	699b      	ldr	r3, [r3, #24]
 80004f6:	4a7a      	ldr	r2, [pc, #488]	; (80006e0 <MCAL_GPIO_Init+0x208>)
 80004f8:	f043 0304 	orr.w	r3, r3, #4
 80004fc:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[0] = 1;
 80004fe:	4b77      	ldr	r3, [pc, #476]	; (80006dc <MCAL_GPIO_Init+0x204>)
 8000500:	2201      	movs	r2, #1
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	e04a      	b.n	800059c <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOB) && (GPIO_CLK_InitFlag[1] != 1))
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a76      	ldr	r2, [pc, #472]	; (80006e4 <MCAL_GPIO_Init+0x20c>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d10d      	bne.n	800052c <MCAL_GPIO_Init+0x54>
 8000510:	4b72      	ldr	r3, [pc, #456]	; (80006dc <MCAL_GPIO_Init+0x204>)
 8000512:	785b      	ldrb	r3, [r3, #1]
 8000514:	2b01      	cmp	r3, #1
 8000516:	d009      	beq.n	800052c <MCAL_GPIO_Init+0x54>
	{
		RCC_GPIOB_CLK_EN();
 8000518:	4b71      	ldr	r3, [pc, #452]	; (80006e0 <MCAL_GPIO_Init+0x208>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a70      	ldr	r2, [pc, #448]	; (80006e0 <MCAL_GPIO_Init+0x208>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[1] = 1;
 8000524:	4b6d      	ldr	r3, [pc, #436]	; (80006dc <MCAL_GPIO_Init+0x204>)
 8000526:	2201      	movs	r2, #1
 8000528:	705a      	strb	r2, [r3, #1]
 800052a:	e037      	b.n	800059c <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOC) && (GPIO_CLK_InitFlag[2] != 1))
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a6d      	ldr	r2, [pc, #436]	; (80006e8 <MCAL_GPIO_Init+0x210>)
 8000532:	4293      	cmp	r3, r2
 8000534:	d10d      	bne.n	8000552 <MCAL_GPIO_Init+0x7a>
 8000536:	4b69      	ldr	r3, [pc, #420]	; (80006dc <MCAL_GPIO_Init+0x204>)
 8000538:	789b      	ldrb	r3, [r3, #2]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d009      	beq.n	8000552 <MCAL_GPIO_Init+0x7a>
	{
		RCC_GPIOC_CLK_EN();
 800053e:	4b68      	ldr	r3, [pc, #416]	; (80006e0 <MCAL_GPIO_Init+0x208>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	4a67      	ldr	r2, [pc, #412]	; (80006e0 <MCAL_GPIO_Init+0x208>)
 8000544:	f043 0310 	orr.w	r3, r3, #16
 8000548:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[2] = 1;
 800054a:	4b64      	ldr	r3, [pc, #400]	; (80006dc <MCAL_GPIO_Init+0x204>)
 800054c:	2201      	movs	r2, #1
 800054e:	709a      	strb	r2, [r3, #2]
 8000550:	e024      	b.n	800059c <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOD) && (GPIO_CLK_InitFlag[3] != 1))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a65      	ldr	r2, [pc, #404]	; (80006ec <MCAL_GPIO_Init+0x214>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d10d      	bne.n	8000578 <MCAL_GPIO_Init+0xa0>
 800055c:	4b5f      	ldr	r3, [pc, #380]	; (80006dc <MCAL_GPIO_Init+0x204>)
 800055e:	78db      	ldrb	r3, [r3, #3]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d009      	beq.n	8000578 <MCAL_GPIO_Init+0xa0>
	{
		RCC_GPIOD_CLK_EN();
 8000564:	4b5e      	ldr	r3, [pc, #376]	; (80006e0 <MCAL_GPIO_Init+0x208>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a5d      	ldr	r2, [pc, #372]	; (80006e0 <MCAL_GPIO_Init+0x208>)
 800056a:	f043 0320 	orr.w	r3, r3, #32
 800056e:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[3] = 1;
 8000570:	4b5a      	ldr	r3, [pc, #360]	; (80006dc <MCAL_GPIO_Init+0x204>)
 8000572:	2201      	movs	r2, #1
 8000574:	70da      	strb	r2, [r3, #3]
 8000576:	e011      	b.n	800059c <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOE) && (GPIO_CLK_InitFlag[4] != 1))
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a5c      	ldr	r2, [pc, #368]	; (80006f0 <MCAL_GPIO_Init+0x218>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d10c      	bne.n	800059c <MCAL_GPIO_Init+0xc4>
 8000582:	4b56      	ldr	r3, [pc, #344]	; (80006dc <MCAL_GPIO_Init+0x204>)
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	2b01      	cmp	r3, #1
 8000588:	d008      	beq.n	800059c <MCAL_GPIO_Init+0xc4>
	{
		RCC_GPIOE_CLK_EN();
 800058a:	4b55      	ldr	r3, [pc, #340]	; (80006e0 <MCAL_GPIO_Init+0x208>)
 800058c:	699b      	ldr	r3, [r3, #24]
 800058e:	4a54      	ldr	r2, [pc, #336]	; (80006e0 <MCAL_GPIO_Init+0x208>)
 8000590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000594:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[4] = 1;
 8000596:	4b51      	ldr	r3, [pc, #324]	; (80006dc <MCAL_GPIO_Init+0x204>)
 8000598:	2201      	movs	r2, #1
 800059a:	711a      	strb	r2, [r3, #4]
	}

	//Check for alternate function mode (Input or Output) to enable it's clock
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_OUTPUT_OD)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	799b      	ldrb	r3, [r3, #6]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d908      	bls.n	80005b6 <MCAL_GPIO_Init+0xde>
	{
		RCC_AFIO_CLK_EN();
 80005a4:	4b4e      	ldr	r3, [pc, #312]	; (80006e0 <MCAL_GPIO_Init+0x208>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a4d      	ldr	r2, [pc, #308]	; (80006e0 <MCAL_GPIO_Init+0x208>)
 80005aa:	f043 0301 	orr.w	r3, r3, #1
 80005ae:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[5] = 1;
 80005b0:	4b4a      	ldr	r3, [pc, #296]	; (80006dc <MCAL_GPIO_Init+0x204>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	715a      	strb	r2, [r3, #5]
	}

	//Pointer holds the configuration register address either High or Low depends on PinNo
	vuint32_t* GPIO_CRx = NULL_PTR;
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
	GPIO_CRx = ((GPIO_PinConfigPtr->GPIO_PinNo < GPIO_PIN_8)?&(GPIO_PinConfigPtr->GPIO_Port->CRL):&(GPIO_PinConfigPtr->GPIO_Port->CRH));
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	889b      	ldrh	r3, [r3, #4]
 80005be:	2bff      	cmp	r3, #255	; 0xff
 80005c0:	d802      	bhi.n	80005c8 <MCAL_GPIO_Init+0xf0>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	e002      	b.n	80005ce <MCAL_GPIO_Init+0xf6>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	3304      	adds	r3, #4
 80005ce:	60bb      	str	r3, [r7, #8]

	//MODE & CNF Variable (Initialized by it's default reset value)
	uint8_t PinConfig_Value = 0x4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	73fb      	strb	r3, [r7, #15]

	//Clear MODE & CNF
	(*GPIO_CRx) &= ~(0xF<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	889b      	ldrh	r3, [r3, #4]
 80005d8:	4618      	mov	r0, r3
 80005da:	f7ff ff19 	bl	8000410 <Get_CRx_Position>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	230f      	movs	r3, #15
 80005e4:	4093      	lsls	r3, r2
 80005e6:	43da      	mvns	r2, r3
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	401a      	ands	r2, r3
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	601a      	str	r2, [r3, #0]

	//Check if pin is output
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_INPUT_PD && GPIO_PinConfigPtr->GPIO_Mode < GPIO_MODE_AF_INPUT)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	799b      	ldrb	r3, [r3, #6]
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	d914      	bls.n	8000624 <MCAL_GPIO_Init+0x14c>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	799b      	ldrb	r3, [r3, #6]
 80005fe:	2b07      	cmp	r3, #7
 8000600:	d810      	bhi.n	8000624 <MCAL_GPIO_Init+0x14c>
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
		//Set MODE & CNF
		PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode-4)<<2) | (GPIO_PinConfigPtr->GPIO_Output_Speed)) & 0x0F;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	799b      	ldrb	r3, [r3, #6]
 800060a:	3b04      	subs	r3, #4
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	b25a      	sxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	79db      	ldrb	r3, [r3, #7]
 8000614:	b25b      	sxtb	r3, r3
 8000616:	4313      	orrs	r3, r2
 8000618:	b25b      	sxtb	r3, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f003 030f 	and.w	r3, r3, #15
 8000620:	73fb      	strb	r3, [r7, #15]
 8000622:	e037      	b.n	8000694 <MCAL_GPIO_Init+0x1bc>

	//Else pin is input
	else //MODE = 00: Input mode (reset state)
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]

		//Check if Input Analog mode or Input Floating
		if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_ANALOG || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_FLO)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	799b      	ldrb	r3, [r3, #6]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d003      	beq.n	8000638 <MCAL_GPIO_Init+0x160>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	799b      	ldrb	r3, [r3, #6]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d107      	bne.n	8000648 <MCAL_GPIO_Init+0x170>
		{	//Set MODE & CNF
			PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode)<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	799b      	ldrb	r3, [r3, #6]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	b2db      	uxtb	r3, r3
 8000640:	f003 030f 	and.w	r3, r3, #15
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	e025      	b.n	8000694 <MCAL_GPIO_Init+0x1bc>
		}

		//Check if Input with pull-up or Input with pull-down
		else if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PD)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	799b      	ldrb	r3, [r3, #6]
 800064c:	2b02      	cmp	r3, #2
 800064e:	d003      	beq.n	8000658 <MCAL_GPIO_Init+0x180>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	799b      	ldrb	r3, [r3, #6]
 8000654:	2b03      	cmp	r3, #3
 8000656:	d11b      	bne.n	8000690 <MCAL_GPIO_Init+0x1b8>
		{
			//Set MODE & CNF
			PinConfig_Value = ((GPIO_MODE_INPUT_PU<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 8000658:	2308      	movs	r3, #8
 800065a:	73fb      	strb	r3, [r7, #15]

			//Check if Input with pull-up
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	799b      	ldrb	r3, [r3, #6]
 8000660:	2b02      	cmp	r3, #2
 8000662:	d10a      	bne.n	800067a <MCAL_GPIO_Init+0x1a2>
			{
				//Set output data register ODR because pull up specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	68da      	ldr	r2, [r3, #12]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	889b      	ldrh	r3, [r3, #4]
 800066e:	4619      	mov	r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	430a      	orrs	r2, r1
 8000676:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000678:	e00c      	b.n	8000694 <MCAL_GPIO_Init+0x1bc>

			//Check if Input with pull-down
			else
			{
				//Clear output data register ODR because pull down specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68da      	ldr	r2, [r3, #12]
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	889b      	ldrh	r3, [r3, #4]
 8000684:	4619      	mov	r1, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	430a      	orrs	r2, r1
 800068c:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800068e:	e001      	b.n	8000694 <MCAL_GPIO_Init+0x1bc>
		}

		//Else Alternate function input
		else
		{
			PinConfig_Value = ((GPIO_MODE_INPUT_FLO<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 8000690:	2304      	movs	r3, #4
 8000692:	73fb      	strb	r3, [r7, #15]
		}

	}

	//Write on CRx register to configure pin -> x is (H or L)
	(*GPIO_CRx) &= ~(PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 8000694:	7bfc      	ldrb	r4, [r7, #15]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	889b      	ldrh	r3, [r3, #4]
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff feb8 	bl	8000410 <Get_CRx_Position>
 80006a0:	4603      	mov	r3, r0
 80006a2:	fa04 f303 	lsl.w	r3, r4, r3
 80006a6:	43da      	mvns	r2, r3
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	401a      	ands	r2, r3
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	601a      	str	r2, [r3, #0]
	(*GPIO_CRx) |= (PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 80006b2:	7bfc      	ldrb	r4, [r7, #15]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	889b      	ldrh	r3, [r3, #4]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fea9 	bl	8000410 <Get_CRx_Position>
 80006be:	4603      	mov	r3, r0
 80006c0:	fa04 f203 	lsl.w	r2, r4, r3
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	431a      	orrs	r2, r3
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	601a      	str	r2, [r3, #0]

	return;
 80006ce:	bf00      	nop

}
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd90      	pop	{r4, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40010800 	.word	0x40010800
 80006dc:	20000084 	.word	0x20000084
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010c00 	.word	0x40010c00
 80006e8:	40011000 	.word	0x40011000
 80006ec:	40011400 	.word	0x40011400
 80006f0:	40011800 	.word	0x40011800

080006f4 <TIM2_IRQHandler>:
	if(CCRxIndex >= 0 || CCRxIndex < 4)
		return (GPTM_PinConfigPtr->TIMx->CCR[CCRxIndex]);
}

void TIM2_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	if(TIM2->SR & (1<<0))
 80006f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006fc:	691b      	ldr	r3, [r3, #16]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	2b00      	cmp	r3, #0
 8000704:	d012      	beq.n	800072c <TIM2_IRQHandler+0x38>
	{
		/*
		 * Stop Counting while handling ISR.
		 */
		CLEAR_BIT(TIM2->CR1,0);
 8000706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000710:	f023 0301 	bic.w	r3, r3, #1
 8000714:	6013      	str	r3, [r2, #0]
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM2->SR,0);
 8000716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000720:	f023 0301 	bic.w	r3, r3, #1
 8000724:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[0]();
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <TIM2_IRQHandler+0x60>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4798      	blx	r3
	}

	if(TIM2->SR & GPTM_IRQ_EN_TIE)
 800072c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000736:	2b00      	cmp	r3, #0
 8000738:	d00a      	beq.n	8000750 <TIM2_IRQHandler+0x5c>
	{
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM2->SR,6);
 800073a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800073e:	691b      	ldr	r3, [r3, #16]
 8000740:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000748:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[0]();
 800074a:	4b02      	ldr	r3, [pc, #8]	; (8000754 <TIM2_IRQHandler+0x60>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4798      	blx	r3
	}
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000008c 	.word	0x2000008c

08000758 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	if(TIM3->SR & (1<<0))
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <TIM3_IRQHandler+0x50>)
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	f003 0301 	and.w	r3, r3, #1
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00e      	beq.n	8000786 <TIM3_IRQHandler+0x2e>
	{
		/*
		 * Stop Counting while handling ISR.
		 */
		CLEAR_BIT(TIM3->CR1,0);
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <TIM3_IRQHandler+0x50>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a0e      	ldr	r2, [pc, #56]	; (80007a8 <TIM3_IRQHandler+0x50>)
 800076e:	f023 0301 	bic.w	r3, r3, #1
 8000772:	6013      	str	r3, [r2, #0]
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM3->SR,0);
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <TIM3_IRQHandler+0x50>)
 8000776:	691b      	ldr	r3, [r3, #16]
 8000778:	4a0b      	ldr	r2, [pc, #44]	; (80007a8 <TIM3_IRQHandler+0x50>)
 800077a:	f023 0301 	bic.w	r3, r3, #1
 800077e:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[1]();
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <TIM3_IRQHandler+0x54>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	4798      	blx	r3
	}

	if(TIM3->SR & GPTM_IRQ_EN_TIE)
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <TIM3_IRQHandler+0x50>)
 8000788:	691b      	ldr	r3, [r3, #16]
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	2b00      	cmp	r3, #0
 8000790:	d008      	beq.n	80007a4 <TIM3_IRQHandler+0x4c>
	{
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM3->SR,6);
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <TIM3_IRQHandler+0x50>)
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <TIM3_IRQHandler+0x50>)
 8000798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800079c:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[1]();
 800079e:	4b03      	ldr	r3, [pc, #12]	; (80007ac <TIM3_IRQHandler+0x54>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	4798      	blx	r3
	}
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	40000400 	.word	0x40000400
 80007ac:	2000008c 	.word	0x2000008c

080007b0 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	if(TIM4->SR & (1<<0))
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <TIM4_IRQHandler+0x50>)
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d00e      	beq.n	80007de <TIM4_IRQHandler+0x2e>
	{
		/*
		 * Stop Counting while handling ISR.
		 */
		CLEAR_BIT(TIM4->CR1,0);
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <TIM4_IRQHandler+0x50>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <TIM4_IRQHandler+0x50>)
 80007c6:	f023 0301 	bic.w	r3, r3, #1
 80007ca:	6013      	str	r3, [r2, #0]
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM4->SR,0);
 80007cc:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <TIM4_IRQHandler+0x50>)
 80007ce:	691b      	ldr	r3, [r3, #16]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <TIM4_IRQHandler+0x50>)
 80007d2:	f023 0301 	bic.w	r3, r3, #1
 80007d6:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[2]();
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <TIM4_IRQHandler+0x54>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	4798      	blx	r3
	}

	if(TIM4->SR & GPTM_IRQ_EN_TIE)
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <TIM4_IRQHandler+0x50>)
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d008      	beq.n	80007fc <TIM4_IRQHandler+0x4c>
	{
		/*
		 * Clear the TIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM4->SR,6);
 80007ea:	4b05      	ldr	r3, [pc, #20]	; (8000800 <TIM4_IRQHandler+0x50>)
 80007ec:	691b      	ldr	r3, [r3, #16]
 80007ee:	4a04      	ldr	r2, [pc, #16]	; (8000800 <TIM4_IRQHandler+0x50>)
 80007f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007f4:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[2]();
 80007f6:	4b03      	ldr	r3, [pc, #12]	; (8000804 <TIM4_IRQHandler+0x54>)
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	4798      	blx	r3
	}
}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40000800 	.word	0x40000800
 8000804:	2000008c 	.word	0x2000008c

08000808 <I2C_GPIO_SetPins>:

/*================================================================
 * Description :
 * Private Function used to set the SDA & SCL pins of the required peripheral in GPIO.
 */
static void I2C_GPIO_SetPins(I2C_Config_t* I2C_ConfigPtr){
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t SDA,SCL;
	/*
	 * 1) Check if I2Cx is I2C1 or I2C2 to configure ports and pin numbers.
	 */
	if(I2C_ConfigPtr->I2Cx == I2C1)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a15      	ldr	r2, [pc, #84]	; (800086c <I2C_GPIO_SetPins+0x64>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d108      	bne.n	800082c <I2C_GPIO_SetPins+0x24>
	{
		//Configure SDA Pin Data
		SDA.GPIO_Port = GPIOB;
 800081a:	4b15      	ldr	r3, [pc, #84]	; (8000870 <I2C_GPIO_SetPins+0x68>)
 800081c:	613b      	str	r3, [r7, #16]
		SDA.GPIO_PinNo = GPIO_PIN_7;
 800081e:	2380      	movs	r3, #128	; 0x80
 8000820:	82bb      	strh	r3, [r7, #20]
		//Configure SCL Pin Data
		SCL.GPIO_Port = GPIOB;
 8000822:	4b13      	ldr	r3, [pc, #76]	; (8000870 <I2C_GPIO_SetPins+0x68>)
 8000824:	60bb      	str	r3, [r7, #8]
		SCL.GPIO_PinNo = GPIO_PIN_6;
 8000826:	2340      	movs	r3, #64	; 0x40
 8000828:	81bb      	strh	r3, [r7, #12]
 800082a:	e009      	b.n	8000840 <I2C_GPIO_SetPins+0x38>
	}
	else
	{
		//Configure SDA Pin Data
		SDA.GPIO_Port = GPIOB;
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <I2C_GPIO_SetPins+0x68>)
 800082e:	613b      	str	r3, [r7, #16]
		SDA.GPIO_PinNo = GPIO_PIN_11;
 8000830:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000834:	82bb      	strh	r3, [r7, #20]
		//Configure SCL Pin Data
		SCL.GPIO_Port = GPIOB;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <I2C_GPIO_SetPins+0x68>)
 8000838:	60bb      	str	r3, [r7, #8]
		SCL.GPIO_PinNo = GPIO_PIN_10;
 800083a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800083e:	81bb      	strh	r3, [r7, #12]
	}

	/*
	 * 2) Compelete configuration and Initialize the SDA and SCL Pins.
	 */
	SDA.GPIO_Mode = GPIO_MODE_AF_OUTPUT_OD;
 8000840:	2307      	movs	r3, #7
 8000842:	75bb      	strb	r3, [r7, #22]
	SDA.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 8000844:	2301      	movs	r3, #1
 8000846:	75fb      	strb	r3, [r7, #23]

	SCL.GPIO_Mode = GPIO_MODE_AF_OUTPUT_OD;
 8000848:	2307      	movs	r3, #7
 800084a:	73bb      	strb	r3, [r7, #14]
	SCL.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 800084c:	2301      	movs	r3, #1
 800084e:	73fb      	strb	r3, [r7, #15]

	MCAL_GPIO_Init(&SCL);
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fe3f 	bl	80004d8 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&SDA);
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	4618      	mov	r0, r3
 8000860:	f7ff fe3a 	bl	80004d8 <MCAL_GPIO_Init>
}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40005400 	.word	0x40005400
 8000870:	40010c00 	.word	0x40010c00

08000874 <MCAL_I2C_Init>:
 * @retval 			- None.
 *
 * Note				-
 *
 */
void MCAL_I2C_Init(I2C_Config_t* I2C_ConfigPtr){
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

	// Safety for registers
	uint16_t I2Cx_temp[6] = {0,0,0,0,0,0};
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]

	uint32_t I2Cx_PCLK1_temp__MHZ = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
	I2Cx_PCLK1_temp__MHZ = MCAL_RCC_PCLK1();
 800088c:	f000 fcb8 	bl	8001200 <MCAL_RCC_PCLK1>
 8000890:	61f8      	str	r0, [r7, #28]
	I2Cx_PCLK1_temp__MHZ /= 1000000;
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	4a50      	ldr	r2, [pc, #320]	; (80009d8 <MCAL_I2C_Init+0x164>)
 8000896:	fba2 2303 	umull	r2, r3, r2, r3
 800089a:	0c9b      	lsrs	r3, r3, #18
 800089c:	61fb      	str	r3, [r7, #28]
	I2Cx_PCLK1_temp__MHZ = (uint16_t)I2Cx_PCLK1_temp__MHZ;
 800089e:	69fb      	ldr	r3, [r7, #28]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	61fb      	str	r3, [r7, #28]

	/*
	 * 1) Enable the I2C Clock according to the Channel Selected.
	 */
	if(I2C_ConfigPtr->I2Cx == I2C1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a4c      	ldr	r2, [pc, #304]	; (80009dc <MCAL_I2C_Init+0x168>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d106      	bne.n	80008bc <MCAL_I2C_Init+0x48>
		RCC_I2C1_CLK_EN();
 80008ae:	4b4c      	ldr	r3, [pc, #304]	; (80009e0 <MCAL_I2C_Init+0x16c>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a4b      	ldr	r2, [pc, #300]	; (80009e0 <MCAL_I2C_Init+0x16c>)
 80008b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	e00a      	b.n	80008d2 <MCAL_I2C_Init+0x5e>
	else if(I2C_ConfigPtr->I2Cx == I2C2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a48      	ldr	r2, [pc, #288]	; (80009e4 <MCAL_I2C_Init+0x170>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d105      	bne.n	80008d2 <MCAL_I2C_Init+0x5e>
		RCC_I2C2_CLK_EN();
 80008c6:	4b46      	ldr	r3, [pc, #280]	; (80009e0 <MCAL_I2C_Init+0x16c>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a45      	ldr	r2, [pc, #276]	; (80009e0 <MCAL_I2C_Init+0x16c>)
 80008cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d0:	61d3      	str	r3, [r2, #28]

	/*
	 * 2) Configure the I2C Mode wether I2C or SMBUS.
	 * 	 Note: I2C Mode is the only mode supported for this current version of the driver.
	 */
	if(I2C_ConfigPtr->I2C_PeripheralMode == I2C_MODE_I2C)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	889b      	ldrh	r3, [r3, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d179      	bne.n	80009ce <MCAL_I2C_Init+0x15a>
		//-----------------------------------

		/*
		 * 3) Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings.
		 */
		I2Cx_temp[1] |= I2Cx_PCLK1_temp__MHZ;
 80008da:	89fa      	ldrh	r2, [r7, #14]
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b29b      	uxth	r3, r3
 80008e4:	81fb      	strh	r3, [r7, #14]

		/*
		 * 4) Set I2C master mode selection.
		 */
		I2Cx_temp[4] |= I2C_ConfigPtr->I2C_MasterSpeedMode;
 80008e6:	8aba      	ldrh	r2, [r7, #20]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	88db      	ldrh	r3, [r3, #6]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	82bb      	strh	r3, [r7, #20]

		/*
		 * 5) Set the frequency of the SCL Pin.
		 */
		uint32_t CCR_Value = ((I2Cx_PCLK1_temp__MHZ*1000000) / (I2C_ConfigPtr->I2C_SCLK<<1)) ;
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	4a3c      	ldr	r2, [pc, #240]	; (80009e8 <MCAL_I2C_Init+0x174>)
 80008f6:	fb02 f203 	mul.w	r2, r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	689b      	ldr	r3, [r3, #8]
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	fbb2 f3f3 	udiv	r3, r2, r3
 8000904:	61bb      	str	r3, [r7, #24]
		I2Cx_temp[4] |= (uint16_t)CCR_Value;
 8000906:	8aba      	ldrh	r2, [r7, #20]
 8000908:	69bb      	ldr	r3, [r7, #24]
 800090a:	b29b      	uxth	r3, r3
 800090c:	4313      	orrs	r3, r2
 800090e:	b29b      	uxth	r3, r3
 8000910:	82bb      	strh	r3, [r7, #20]

		/*
		 * 6) Set the maximum rise time in Sm mode (Master mode)
		 * 	 Note: SM Mode is the only supported mode. FM is not supported for this current version of the driver.
		 */
		I2Cx_temp[5] |= (I2Cx_PCLK1_temp__MHZ + 1) ;
 8000912:	8afa      	ldrh	r2, [r7, #22]
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	b29b      	uxth	r3, r3
 8000918:	3301      	adds	r3, #1
 800091a:	b29b      	uxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b29b      	uxth	r3, r3
 8000920:	82fb      	strh	r3, [r7, #22]

		/*
		 * 7) Set the General call / Acknowledge / Clock stretching (Slave mode).
		 */
		I2Cx_temp[0] |= (I2C_ConfigPtr->I2C_StretchMode |I2C_ConfigPtr->I2C_GeneralCallAddress
 8000922:	89ba      	ldrh	r2, [r7, #12]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	8a59      	ldrh	r1, [r3, #18]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	8a9b      	ldrh	r3, [r3, #20]
 800092c:	430b      	orrs	r3, r1
 800092e:	b299      	uxth	r1, r3
					 	 	 	 	 	 	 	 	 	| I2C_ConfigPtr->I2C_PeripheralMode);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	889b      	ldrh	r3, [r3, #4]
		I2Cx_temp[0] |= (I2C_ConfigPtr->I2C_StretchMode |I2C_ConfigPtr->I2C_GeneralCallAddress
 8000934:	430b      	orrs	r3, r1
 8000936:	b29b      	uxth	r3, r3
 8000938:	4313      	orrs	r3, r2
 800093a:	b29b      	uxth	r3, r3
 800093c:	81bb      	strh	r3, [r7, #12]

		/*
		 * 8) Set the slave address mode and the slave address itself for slave devices.
		 *    Note: Only 7 bit addressing is supported
		 */
		I2Cx_temp[2] |= (I2C_ConfigPtr->I2C_AddressMode);
 800093e:	8a3a      	ldrh	r2, [r7, #16]
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	899b      	ldrh	r3, [r3, #12]
 8000944:	4313      	orrs	r3, r2
 8000946:	b29b      	uxth	r3, r3
 8000948:	823b      	strh	r3, [r7, #16]
		I2Cx_temp[3] |= I2C_ConfigPtr->I2C_SlaveDeviceDuality;
 800094a:	8a7a      	ldrh	r2, [r7, #18]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	89db      	ldrh	r3, [r3, #14]
 8000950:	4313      	orrs	r3, r2
 8000952:	b29b      	uxth	r3, r3
 8000954:	827b      	strh	r3, [r7, #18]

		I2Cx_temp[2] |= (I2C_ConfigPtr->I2C_SlaveAddress.I2C_SlaveDevice_PrimaryAddress<<1);
 8000956:	8a3b      	ldrh	r3, [r7, #16]
 8000958:	b21a      	sxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	7c1b      	ldrb	r3, [r3, #16]
 800095e:	005b      	lsls	r3, r3, #1
 8000960:	b21b      	sxth	r3, r3
 8000962:	4313      	orrs	r3, r2
 8000964:	b21b      	sxth	r3, r3
 8000966:	b29b      	uxth	r3, r3
 8000968:	823b      	strh	r3, [r7, #16]
		if(I2C_ConfigPtr->I2C_SlaveDeviceDuality == I2C_SLAVE_DUALITY_ENABLE)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	89db      	ldrh	r3, [r3, #14]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d109      	bne.n	8000986 <MCAL_I2C_Init+0x112>
			I2Cx_temp[3] |= (I2C_ConfigPtr->I2C_SlaveAddress.I2C_SlaveDevice_SecondaryAddress<<1);
 8000972:	8a7b      	ldrh	r3, [r7, #18]
 8000974:	b21a      	sxth	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	7c5b      	ldrb	r3, [r3, #17]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	b21b      	sxth	r3, r3
 800097e:	4313      	orrs	r3, r2
 8000980:	b21b      	sxth	r3, r3
 8000982:	b29b      	uxth	r3, r3
 8000984:	827b      	strh	r3, [r7, #18]

		/*
		 * 9) Provide the real registers with the current value in the saftey registers, except for CR1 register.
		 */
		I2C_ConfigPtr->I2Cx->CR2 	= I2Cx_temp[1];
 8000986:	89fa      	ldrh	r2, [r7, #14]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
		I2C_ConfigPtr->I2Cx->OAR1 	= I2Cx_temp[2];
 800098e:	8a3a      	ldrh	r2, [r7, #16]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	609a      	str	r2, [r3, #8]
		I2C_ConfigPtr->I2Cx->OAR2 	= I2Cx_temp[3];
 8000996:	8a7a      	ldrh	r2, [r7, #18]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	60da      	str	r2, [r3, #12]
		I2C_ConfigPtr->I2Cx->CCR 	= I2Cx_temp[4];
 800099e:	8aba      	ldrh	r2, [r7, #20]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	61da      	str	r2, [r3, #28]
		I2C_ConfigPtr->I2Cx->TRISE 	= I2Cx_temp[5];
 80009a6:	8afa      	ldrh	r2, [r7, #22]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	621a      	str	r2, [r3, #32]
		I2C_ConfigPtr->I2Cx->CR1 = I2Cx_temp[0];
 80009ae:	89ba      	ldrh	r2, [r7, #12]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	601a      	str	r2, [r3, #0]

		I2C_GPIO_SetPins(I2C_ConfigPtr);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff ff26 	bl	8000808 <I2C_GPIO_SetPins>

		SET_BIT(I2C_ConfigPtr->I2Cx->CR1,I2C_PERIPHERAL_ENABLE_BIT);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f042 0201 	orr.w	r2, r2, #1
 80009ca:	601a      	str	r2, [r3, #0]
	{
		/* TODO
		 * SMBUS Configuration
		 */
	}
	return;
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
}
 80009d0:	3720      	adds	r7, #32
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	431bde83 	.word	0x431bde83
 80009dc:	40005400 	.word	0x40005400
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40005800 	.word	0x40005800
 80009e8:	000f4240 	.word	0x000f4240

080009ec <MCAL_I2C_GetFlagStatus>:
 * @retval 			- None.
 *
 * Note				-
 *
 */
I2C_Flag_Status_t MCAL_I2C_GetFlagStatus(I2C_Config_t* I2C_ConfigPtr, I2C_Flags_t flagType){
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	70fb      	strb	r3, [r7, #3]

	I2C_Flag_Status_t flagStatus = I2C_Flag_Reset;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]

	if(flagType <= I2C_Flag_SMBALERT)
 80009fc:	78fb      	ldrb	r3, [r7, #3]
 80009fe:	2b0f      	cmp	r3, #15
 8000a00:	d80f      	bhi.n	8000a22 <MCAL_I2C_GetFlagStatus+0x36>
	{
		if(READ_BIT(I2C_ConfigPtr->I2Cx->SR1,flagType))
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	78fa      	ldrb	r2, [r7, #3]
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a10:	401a      	ands	r2, r3
 8000a12:	78fb      	ldrb	r3, [r7, #3]
 8000a14:	fa22 f303 	lsr.w	r3, r2, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d013      	beq.n	8000a44 <MCAL_I2C_GetFlagStatus+0x58>
		{
			flagStatus = I2C_Flag_Set;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	73fb      	strb	r3, [r7, #15]
 8000a20:	e010      	b.n	8000a44 <MCAL_I2C_GetFlagStatus+0x58>
		}
	}
	else
	{
		if(READ_BIT(I2C_ConfigPtr->I2Cx->SR2,(flagType-16)))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	78fa      	ldrb	r2, [r7, #3]
 8000a2a:	3a10      	subs	r2, #16
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a32:	401a      	ands	r2, r3
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	3b10      	subs	r3, #16
 8000a38:	fa22 f303 	lsr.w	r3, r2, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MCAL_I2C_GetFlagStatus+0x58>
		{
			flagStatus = I2C_Flag_Set;
 8000a40:	2301      	movs	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
		}
	}

	return flagStatus;
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3714      	adds	r7, #20
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr

08000a50 <MCAL_I2C_GenerateStart>:
 *
 * Note				-
 *
 */
void MCAL_I2C_GenerateStart(I2C_Config_t* I2C_ConfigPtr, I2C_Start_Status_t startStatus,
		I2C_Start_Condition_t startCondition){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	70fb      	strb	r3, [r7, #3]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	70bb      	strb	r3, [r7, #2]
	/*
	 * Setting the START bit causes the interface to generate a Start condition and to switch to Master mode
	 * (MSL bit set) when the BUSY bit is cleared.
	 */

	if(startCondition != I2C_Repeated_Start)
 8000a60:	78bb      	ldrb	r3, [r7, #2]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d007      	beq.n	8000a76 <MCAL_I2C_GenerateStart+0x26>
	{
		// Wait the BUSY bit is cleared.
		while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_BUSY));
 8000a66:	bf00      	nop
 8000a68:	2111      	movs	r1, #17
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff ffbe 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1f8      	bne.n	8000a68 <MCAL_I2C_GenerateStart+0x18>

	}

	//Setting the START bit if I2C_Start_Enable
	if(startStatus == I2C_Start_Enable)
 8000a76:	78fb      	ldrb	r3, [r7, #3]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d108      	bne.n	8000a8e <MCAL_I2C_GenerateStart+0x3e>
		I2C_ConfigPtr->I2Cx->CR1 |= (1<<8);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a8a:	601a      	str	r2, [r3, #0]
	else
		I2C_ConfigPtr->I2Cx->CR1 &= ~(1<<8);

}
 8000a8c:	e007      	b.n	8000a9e <MCAL_I2C_GenerateStart+0x4e>
		I2C_ConfigPtr->I2Cx->CR1 &= ~(1<<8);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000a9c:	601a      	str	r2, [r3, #0]
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <MCAL_I2C_GenerateStop>:
 * @retval 			- None.
 *
 * Note				-
 *
 */
void MCAL_I2C_GenerateStop(I2C_Config_t* I2C_ConfigPtr, I2C_Stop_Status_t stopStatus){
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
 8000aae:	460b      	mov	r3, r1
 8000ab0:	70fb      	strb	r3, [r7, #3]

	//Setting the START bit if I2C_Start_Enable
	if(stopStatus == I2C_Stop_Enable)
 8000ab2:	78fb      	ldrb	r3, [r7, #3]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d108      	bne.n	8000aca <MCAL_I2C_GenerateStop+0x24>
		I2C_ConfigPtr->I2Cx->CR1 |= (1<<9);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ac6:	601a      	str	r2, [r3, #0]
	else
		I2C_ConfigPtr->I2Cx->CR1 &= ~(1<<9);
}
 8000ac8:	e007      	b.n	8000ada <MCAL_I2C_GenerateStop+0x34>
		I2C_ConfigPtr->I2Cx->CR1 &= ~(1<<9);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000ad8:	601a      	str	r2, [r3, #0]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr

08000ae4 <MCAL_I2C_SendAddress>:
 * @retval 			- None.
 *
 * Note				-
 *
 */
void MCAL_I2C_SendAddress(I2C_Config_t* I2C_ConfigPtr, uint16_t devAddress, I2C_Direction_t Dir){
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	807b      	strh	r3, [r7, #2]
 8000af0:	4613      	mov	r3, r2
 8000af2:	707b      	strb	r3, [r7, #1]

	/*
	 * In 7-bit addressing mode (The Only Supported), one address byte is sent.
	 */
	devAddress = (devAddress<<1);
 8000af4:	887b      	ldrh	r3, [r7, #2]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	807b      	strh	r3, [r7, #2]
	devAddress |= Dir;
 8000afa:	787b      	ldrb	r3, [r7, #1]
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	887b      	ldrh	r3, [r7, #2]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	807b      	strh	r3, [r7, #2]
	I2C_ConfigPtr->I2Cx->DR = devAddress;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	887a      	ldrh	r2, [r7, #2]
 8000b0a:	611a      	str	r2, [r3, #16]

}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr

08000b16 <MCAL_I2C_MasterSendDataPolling>:

// Master Sending/Writing only using polling technique API *Note used for whole sequence*
void MCAL_I2C_MasterSendDataPolling(I2C_Config_t* I2C_ConfigPtr, uint8_t* pTxBuffer, uint32_t dataLength)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b086      	sub	sp, #24
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	60f8      	str	r0, [r7, #12]
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
	for(int i=0;i<dataLength;i++)
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	e011      	b.n	8000b4c <MCAL_I2C_MasterSendDataPolling+0x36>
	{
		I2C_ConfigPtr->I2Cx->DR = pTxBuffer[i];
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	68ba      	ldr	r2, [r7, #8]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	611a      	str	r2, [r3, #16]
		while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_TXE) == I2C_Flag_Reset);
 8000b36:	bf00      	nop
 8000b38:	2107      	movs	r1, #7
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f7ff ff56 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f8      	beq.n	8000b38 <MCAL_I2C_MasterSendDataPolling+0x22>
	for(int i=0;i<dataLength;i++)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d8e9      	bhi.n	8000b28 <MCAL_I2C_MasterSendDataPolling+0x12>
	}
}
 8000b54:	bf00      	nop
 8000b56:	3718      	adds	r7, #24
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <MCAL_I2C_MasterRecDataPolling>:

// Master Receiving/Reading only using polling technique API *Note used for whole sequence*
void MCAL_I2C_MasterRecDataPolling (I2C_Config_t* I2C_ConfigPtr, uint8_t* pRxBuffer, uint32_t dataLength,
		I2C_Stop_Condition_t stopCondition)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	70fb      	strb	r3, [r7, #3]
	vuint32_t SRxTemp = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]

	if(dataLength > 1)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d936      	bls.n	8000be2 <MCAL_I2C_MasterRecDataPolling+0x86>
	{
		// • Clear ADDR.
		SRxTemp = I2C_ConfigPtr->I2Cx->SR1;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	613b      	str	r3, [r7, #16]
		SRxTemp = I2C_ConfigPtr->I2Cx->SR2;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	613b      	str	r3, [r7, #16]

		for(int i=0;i<dataLength;i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e026      	b.n	8000bd8 <MCAL_I2C_MasterRecDataPolling+0x7c>
		{

			// Poll on RXNE, wait for data register to be full for reading it.
			while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_RXNE) == I2C_Flag_Reset);
 8000b8a:	bf00      	nop
 8000b8c:	2106      	movs	r1, #6
 8000b8e:	68f8      	ldr	r0, [r7, #12]
 8000b90:	f7ff ff2c 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f8      	beq.n	8000b8c <MCAL_I2C_MasterRecDataPolling+0x30>

			if(i == dataLength-2)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	1e9a      	subs	r2, r3, #2
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d10e      	bne.n	8000bc2 <MCAL_I2C_MasterRecDataPolling+0x66>
			{
				// • Clear ACK bit
				I2C_ConfigPtr->I2Cx->CR1 &= ~(1<<10);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bb2:	601a      	str	r2, [r3, #0]

				// • Program START/STOP
				if(stopCondition == I2C_Stop)
 8000bb4:	78fb      	ldrb	r3, [r7, #3]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d103      	bne.n	8000bc2 <MCAL_I2C_MasterRecDataPolling+0x66>
					MCAL_I2C_GenerateStop(I2C_ConfigPtr, I2C_Stop_Enable);
 8000bba:	2101      	movs	r1, #1
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f7ff ff72 	bl	8000aa6 <MCAL_I2C_GenerateStop>
			}

			// • Read Data in DR
			pRxBuffer[i] = I2C_ConfigPtr->I2Cx->DR;
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	6919      	ldr	r1, [r3, #16]
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	4413      	add	r3, r2
 8000bce:	b2ca      	uxtb	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<dataLength;i++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d8d4      	bhi.n	8000b8a <MCAL_I2C_MasterRecDataPolling+0x2e>
 8000be0:	e027      	b.n	8000c32 <MCAL_I2C_MasterRecDataPolling+0xd6>

		}
	}

	else if(dataLength == 1)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d124      	bne.n	8000c32 <MCAL_I2C_MasterRecDataPolling+0xd6>
	{
		// • Clear ACK bit
		I2C_ConfigPtr->I2Cx->CR1 &= ~(1<<10);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000bf6:	601a      	str	r2, [r3, #0]

		// • Clear ADDR.
		SRxTemp = I2C_ConfigPtr->I2Cx->SR1;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	613b      	str	r3, [r7, #16]
		SRxTemp = I2C_ConfigPtr->I2Cx->SR2;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	613b      	str	r3, [r7, #16]

		// Poll on RXNE, wait for data register to be full for reading it.
		while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_RXNE) == I2C_Flag_Reset);
 8000c08:	bf00      	nop
 8000c0a:	2106      	movs	r1, #6
 8000c0c:	68f8      	ldr	r0, [r7, #12]
 8000c0e:	f7ff feed 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d0f8      	beq.n	8000c0a <MCAL_I2C_MasterRecDataPolling+0xae>

		// • Program START/STOP
		if(stopCondition == I2C_Stop)
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d103      	bne.n	8000c26 <MCAL_I2C_MasterRecDataPolling+0xca>
			MCAL_I2C_GenerateStop(I2C_ConfigPtr, I2C_Stop_Enable);
 8000c1e:	2101      	movs	r1, #1
 8000c20:	68f8      	ldr	r0, [r7, #12]
 8000c22:	f7ff ff40 	bl	8000aa6 <MCAL_I2C_GenerateStop>

		// • Read Data in DR
		*pRxBuffer = I2C_ConfigPtr->I2Cx->DR;
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	701a      	strb	r2, [r3, #0]
	}
	(void)SRxTemp;
 8000c32:	693b      	ldr	r3, [r7, #16]
}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <MCAL_I2C_MasterTxPolling>:
 * Note				- This API is implemented to support only polling technique and cannot be used with interrupts.
 *
 */
void MCAL_I2C_MasterTxPolling(I2C_Config_t* I2C_ConfigPtr, uint16_t devAddress, uint8_t* pTxBuffer,
		uint32_t dataLength, I2C_Start_Condition_t startCondition,I2C_Stop_Condition_t stopCondition)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	817b      	strh	r3, [r7, #10]
	//Temp Registers for Reading
	vuint32_t SRxTemp = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]

	/*
	 * Setting the START bit causes the interface to generate a Start condition and to switch to Master mode
	 * (MSL bit set) when the BUSY bit is cleared.
	 */
	MCAL_I2C_GenerateStart(I2C_ConfigPtr,I2C_Start_Enable,startCondition);
 8000c50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c54:	461a      	mov	r2, r3
 8000c56:	2101      	movs	r1, #1
 8000c58:	68f8      	ldr	r0, [r7, #12]
 8000c5a:	f7ff fef9 	bl	8000a50 <MCAL_I2C_GenerateStart>
	/*
	 * Once the Start condition is sent:
	 * • The SB bit is set by hardware.
	 * So wait for the SB flag to be set.
	 */
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_SB) == I2C_Flag_Reset);
 8000c5e:	bf00      	nop
 8000c60:	2100      	movs	r1, #0
 8000c62:	68f8      	ldr	r0, [r7, #12]
 8000c64:	f7ff fec2 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0f8      	beq.n	8000c60 <MCAL_I2C_MasterTxPolling+0x24>

	/*
	 * 	Then the master waits for a read of the SR1 register followed by a write in the DR register with
	 * 	the Slave address. SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	 */
	SRxTemp = I2C_ConfigPtr->I2Cx->SR1;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	617b      	str	r3, [r7, #20]
	MCAL_I2C_SendAddress(I2C_ConfigPtr, devAddress, I2C_Direction_Write);
 8000c76:	897b      	ldrh	r3, [r7, #10]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	68f8      	ldr	r0, [r7, #12]
 8000c7e:	f7ff ff31 	bl	8000ae4 <MCAL_I2C_SendAddress>
	/*
	 * In 7-bit addressing mode (The Only Supported), one address byte is sent.
	 * As soon as the address byte is sent,
	 * The ADDR bit is set by hardware,
	 */
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_ADDR) == I2C_Flag_Reset);
 8000c82:	bf00      	nop
 8000c84:	2101      	movs	r1, #1
 8000c86:	68f8      	ldr	r0, [r7, #12]
 8000c88:	f7ff feb0 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f8      	beq.n	8000c84 <MCAL_I2C_MasterTxPolling+0x48>

	/*
	 * Then the master waits for a read of the SR1 register followed by a read of the SR2 register to clear ADDR
	 * bit.
	 */
	SRxTemp = I2C_ConfigPtr->I2Cx->SR1;
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	695b      	ldr	r3, [r3, #20]
 8000c98:	617b      	str	r3, [r7, #20]
	SRxTemp = I2C_ConfigPtr->I2Cx->SR2;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	617b      	str	r3, [r7, #20]

	/*
	 * Checking if the Master is transmitting as well as if the bus is busy which means that this master still
	 * has access to the bus.
	 */
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_MSL) == I2C_Flag_Reset);
 8000ca2:	bf00      	nop
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	68f8      	ldr	r0, [r7, #12]
 8000ca8:	f7ff fea0 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d0f8      	beq.n	8000ca4 <MCAL_I2C_MasterTxPolling+0x68>
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_BUSY) == I2C_Flag_Reset);
 8000cb2:	bf00      	nop
 8000cb4:	2111      	movs	r1, #17
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	f7ff fe98 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d0f8      	beq.n	8000cb4 <MCAL_I2C_MasterTxPolling+0x78>
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_TRA) == I2C_Flag_Reset);
 8000cc2:	bf00      	nop
 8000cc4:	2112      	movs	r1, #18
 8000cc6:	68f8      	ldr	r0, [r7, #12]
 8000cc8:	f7ff fe90 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d0f8      	beq.n	8000cc4 <MCAL_I2C_MasterTxPolling+0x88>
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_TXE) == I2C_Flag_Reset);
 8000cd2:	bf00      	nop
 8000cd4:	2107      	movs	r1, #7
 8000cd6:	68f8      	ldr	r0, [r7, #12]
 8000cd8:	f7ff fe88 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f8      	beq.n	8000cd4 <MCAL_I2C_MasterTxPolling+0x98>

	/*
	 * Following the address transmission and after clearing ADDR, the master sends bytes from the DR register
	 * to the SDA line via the internal shift register.
	 */
	MCAL_I2C_MasterSendDataPolling(I2C_ConfigPtr, pTxBuffer, dataLength);
 8000ce2:	683a      	ldr	r2, [r7, #0]
 8000ce4:	6879      	ldr	r1, [r7, #4]
 8000ce6:	68f8      	ldr	r0, [r7, #12]
 8000ce8:	f7ff ff15 	bl	8000b16 <MCAL_I2C_MasterSendDataPolling>

	//   when i=dataLenght, TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_TXE) == I2C_Flag_Reset);
 8000cec:	bf00      	nop
 8000cee:	2107      	movs	r1, #7
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f7ff fe7b 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d0f8      	beq.n	8000cee <MCAL_I2C_MasterTxPolling+0xb2>

	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_BTF) == I2C_Flag_Reset);
 8000cfc:	bf00      	nop
 8000cfe:	2102      	movs	r1, #2
 8000d00:	68f8      	ldr	r0, [r7, #12]
 8000d02:	f7ff fe73 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d0f8      	beq.n	8000cfe <MCAL_I2C_MasterTxPolling+0xc2>

	//After the last byte is written to the DR register, the STOP bit is set by software to generate a
	//Stop condition. The interface automatically goes back to slave mode (MSL bit cleared).
	if(stopCondition == I2C_Stop)
 8000d0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d103      	bne.n	8000d1c <MCAL_I2C_MasterTxPolling+0xe0>
		MCAL_I2C_GenerateStop(I2C_ConfigPtr, I2C_Stop_Enable);
 8000d14:	2101      	movs	r1, #1
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff fec5 	bl	8000aa6 <MCAL_I2C_GenerateStop>

	(void)SRxTemp;
 8000d1c:	697b      	ldr	r3, [r7, #20]
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <MCAL_I2C_MasterRxPolling>:
 * Note				- This API is implemented to support only polling technique and cannot be used with interrupts.
 *
 */
void MCAL_I2C_MasterRxPolling(I2C_Config_t* I2C_ConfigPtr, uint16_t devAddress, uint8_t* pRxBuffer,
		uint32_t dataLength, I2C_Start_Condition_t startCondition, I2C_Stop_Condition_t stopCondition)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b086      	sub	sp, #24
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	60f8      	str	r0, [r7, #12]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	460b      	mov	r3, r1
 8000d34:	817b      	strh	r3, [r7, #10]
	//Temp Registers for Reading
	vuint32_t SRxTemp = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]

	//Enable the Acknowledgment even if it is disabled in the initialization
	SET_BIT(I2C_ConfigPtr->I2Cx->CR1,I2C_ACKNOWLEDGMENT_ENABLE_BIT);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d48:	601a      	str	r2, [r3, #0]

	//Setting the START bit causes the interface to generate a Start condition and to switch to Master mode
	//(MSL bit set) when the BUSY bit is cleared.
	MCAL_I2C_GenerateStart(I2C_ConfigPtr,I2C_Start_Enable,startCondition);
 8000d4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	2101      	movs	r1, #1
 8000d52:	68f8      	ldr	r0, [r7, #12]
 8000d54:	f7ff fe7c 	bl	8000a50 <MCAL_I2C_GenerateStart>

	// Once the Start condition is sent: • The SB bit is set by hardware. So wait for the SB flag to be set.
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_SB) == I2C_Flag_Reset);
 8000d58:	bf00      	nop
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	68f8      	ldr	r0, [r7, #12]
 8000d5e:	f7ff fe45 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d0f8      	beq.n	8000d5a <MCAL_I2C_MasterRxPolling+0x34>

	// Then the master waits for a read of the SR1 register followed by a write in the DR register with
	// the Slave address. SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	SRxTemp = I2C_ConfigPtr->I2Cx->SR1;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	695b      	ldr	r3, [r3, #20]
 8000d6e:	617b      	str	r3, [r7, #20]
	MCAL_I2C_SendAddress(I2C_ConfigPtr, devAddress, I2C_Direction_Read);
 8000d70:	897b      	ldrh	r3, [r7, #10]
 8000d72:	2201      	movs	r2, #1
 8000d74:	4619      	mov	r1, r3
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f7ff feb4 	bl	8000ae4 <MCAL_I2C_SendAddress>


	// Following the address transmission and after clearing ADDR, the master receives bytes from the DR register
	// from the SDA line via the internal shift register.
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_ADDR) == I2C_Flag_Reset);
 8000d7c:	bf00      	nop
 8000d7e:	2101      	movs	r1, #1
 8000d80:	68f8      	ldr	r0, [r7, #12]
 8000d82:	f7ff fe33 	bl	80009ec <MCAL_I2C_GetFlagStatus>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d0f8      	beq.n	8000d7e <MCAL_I2C_MasterRxPolling+0x58>

	MCAL_I2C_MasterRecDataPolling(I2C_ConfigPtr, pRxBuffer, dataLength, stopCondition);
 8000d8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d90:	683a      	ldr	r2, [r7, #0]
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f7ff fee1 	bl	8000b5c <MCAL_I2C_MasterRecDataPolling>

	(void)SRxTemp;
 8000d9a:	697b      	ldr	r3, [r7, #20]
}
 8000d9c:	bf00      	nop
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <I2C1_EV_IRQHandler>:
										ISRs Definitions
-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
======================================================================================================*/

void I2C1_EV_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
	//vuint32_t Dummy_Read = 0; // Volatile for compiler optimization
	vuint32_t dummy = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]

	/* Interrupt handling for both master and slave mode of the device */
	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_1 = (I2C1->CR2 & (I2C_IRQ_ITEVFEN));	// Event interrupt enable
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <I2C1_EV_IRQHandler+0xf0>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000db6:	60fb      	str	r3, [r7, #12]
	Temp_2 = (I2C1->CR2 & (I2C_IRQ_IITBUFEN));	// Buffer interrupt enable
 8000db8:	4b36      	ldr	r3, [pc, #216]	; (8000e94 <I2C1_EV_IRQHandler+0xf0>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc0:	60bb      	str	r3, [r7, #8]
	Temp_3 = (I2C1->SR1 & (I2C_Flag_STOPF));	// Stop detection (slave mode)
 8000dc2:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <I2C1_EV_IRQHandler+0xf0>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	607b      	str	r3, [r7, #4]

	/* Handle Stop Condition Event */
	if(Temp_1 && Temp_3)
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d00a      	beq.n	8000de8 <I2C1_EV_IRQHandler+0x44>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d007      	beq.n	8000de8 <I2C1_EV_IRQHandler+0x44>
	{
		/* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		 * i have already read SR1 in Temp_3
		 * then next statement i write to CR1
		 */
		I2C1->CR1 |= 0x0000;
 8000dd8:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <I2C1_EV_IRQHandler+0xf0>)
 8000dda:	4a2e      	ldr	r2, [pc, #184]	; (8000e94 <I2C1_EV_IRQHandler+0xf0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6013      	str	r3, [r2, #0]
		g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_STOPF);
 8000de0:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <I2C1_EV_IRQHandler+0xf4>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2004      	movs	r0, #4
 8000de6:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle Received address matched. */
	Temp_3 = (I2C1->SR1 & (I2C_Flag_ADDR));		//ADDR
 8000de8:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <I2C1_EV_IRQHandler+0xf0>)
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_3)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d00c      	beq.n	8000e12 <I2C1_EV_IRQHandler+0x6e>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d009      	beq.n	8000e12 <I2C1_EV_IRQHandler+0x6e>
		 */
		//Dummy_Read  = I2C1->SR1;
		//Dummy_Read  = I2C1->SR2;

		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <I2C1_EV_IRQHandler+0xf0>)
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d103      	bne.n	8000e12 <I2C1_EV_IRQHandler+0x6e>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_ADDR);
 8000e0a:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <I2C1_EV_IRQHandler+0xf4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2001      	movs	r0, #1
 8000e10:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
	Temp_3 = (I2C1->SR1 & (I2C_Flag_TXE));		// TXE
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <I2C1_EV_IRQHandler+0xf0>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case TXE=1, ITEVTEN=1, ITBUFEN=1
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d015      	beq.n	8000e4e <I2C1_EV_IRQHandler+0xaa>
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d012      	beq.n	8000e4e <I2C1_EV_IRQHandler+0xaa>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00f      	beq.n	8000e4e <I2C1_EV_IRQHandler+0xaa>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 8000e2e:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <I2C1_EV_IRQHandler+0xf0>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d109      	bne.n	8000e4e <I2C1_EV_IRQHandler+0xaa>
		}
		else
		{
			/* Slave mode */
			/* Check if slave in transmit mode */
			if(I2C1->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 1: Data bytes transmitted
 8000e3a:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <I2C1_EV_IRQHandler+0xf0>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <I2C1_EV_IRQHandler+0xaa>
			{
				g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_TxE);
 8000e46:	4b14      	ldr	r3, [pc, #80]	; (8000e98 <I2C1_EV_IRQHandler+0xf4>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2006      	movs	r0, #6
 8000e4c:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
	Temp_3 = (I2C1->SR1 & (I2C_Flag_RXNE));		// RXNE
 8000e4e:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <I2C1_EV_IRQHandler+0xf0>)
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	f003 0306 	and.w	r3, r3, #6
 8000e56:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d015      	beq.n	8000e8a <I2C1_EV_IRQHandler+0xe6>
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d012      	beq.n	8000e8a <I2C1_EV_IRQHandler+0xe6>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00f      	beq.n	8000e8a <I2C1_EV_IRQHandler+0xe6>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <I2C1_EV_IRQHandler+0xf0>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d109      	bne.n	8000e8a <I2C1_EV_IRQHandler+0xe6>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			if(I2C1->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 0: Data bytes received
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <I2C1_EV_IRQHandler+0xf0>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d003      	beq.n	8000e8a <I2C1_EV_IRQHandler+0xe6>
			{
				g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_RxNE);
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <I2C1_EV_IRQHandler+0xf4>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2005      	movs	r0, #5
 8000e88:	4798      	blx	r3
			}
		}
	}
	(void)dummy;
 8000e8a:	683b      	ldr	r3, [r7, #0]

}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40005400 	.word	0x40005400
 8000e98:	20000098 	.word	0x20000098

08000e9c <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (I2C1->CR2) & I2C_IRQ_ITERREN;
 8000ea2:	4b39      	ldr	r3, [pc, #228]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eaa:	607b      	str	r3, [r7, #4]


/***********************Check for Bus error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_BERR);
 8000eac:	4b36      	ldr	r3, [pc, #216]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2 )
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d00c      	beq.n	8000ed6 <I2C1_ER_IRQHandler+0x3a>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d009      	beq.n	8000ed6 <I2C1_ER_IRQHandler+0x3a>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_BERR);
 8000ec2:	4b31      	ldr	r3, [pc, #196]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	4a30      	ldr	r2, [pc, #192]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ecc:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
	   g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_BERR);
 8000ece:	4b2f      	ldr	r3, [pc, #188]	; (8000f8c <I2C1_ER_IRQHandler+0xf0>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	4798      	blx	r3
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_ARLO);
 8000ed6:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000ed8:	695b      	ldr	r3, [r3, #20]
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d00c      	beq.n	8000f00 <I2C1_ER_IRQHandler+0x64>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d009      	beq.n	8000f00 <I2C1_ER_IRQHandler+0x64>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_ARLO);
 8000eec:	4b26      	ldr	r3, [pc, #152]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000eee:	695b      	ldr	r3, [r3, #20]
 8000ef0:	4a25      	ldr	r2, [pc, #148]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000ef2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000ef6:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_ARLO);
 8000ef8:	4b24      	ldr	r3, [pc, #144]	; (8000f8c <I2C1_ER_IRQHandler+0xf0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2001      	movs	r0, #1
 8000efe:	4798      	blx	r3

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_AF);
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000f02:	695b      	ldr	r3, [r3, #20]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00c      	beq.n	8000f2a <I2C1_ER_IRQHandler+0x8e>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d009      	beq.n	8000f2a <I2C1_ER_IRQHandler+0x8e>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_AF);
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a1b      	ldr	r2, [pc, #108]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f20:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_AF);
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <I2C1_ER_IRQHandler+0xf0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2002      	movs	r0, #2
 8000f28:	4798      	blx	r3
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_OVR);
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f003 0308 	and.w	r3, r3, #8
 8000f32:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d00c      	beq.n	8000f54 <I2C1_ER_IRQHandler+0xb8>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d009      	beq.n	8000f54 <I2C1_ER_IRQHandler+0xb8>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_OVR);
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	4a10      	ldr	r2, [pc, #64]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f4a:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_OVR);
 8000f4c:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <I2C1_ER_IRQHandler+0xf0>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2003      	movs	r0, #3
 8000f52:	4798      	blx	r3
	}

/***********************Check for Time out error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_TIMEOUT);
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	f003 0320 	and.w	r3, r3, #32
 8000f5c:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00c      	beq.n	8000f7e <I2C1_ER_IRQHandler+0xe2>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d009      	beq.n	8000f7e <I2C1_ER_IRQHandler+0xe2>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_TIMEOUT);
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <I2C1_ER_IRQHandler+0xec>)
 8000f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f74:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_TIMEOUT);
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <I2C1_ER_IRQHandler+0xf0>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2005      	movs	r0, #5
 8000f7c:	4798      	blx	r3
	}
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40005400 	.word	0x40005400
 8000f8c:	200000a0 	.word	0x200000a0

08000f90 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0

	//vuint32_t Dummy_Read = 0; // Volatile for compiler optimization
	vuint32_t dummy = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	603b      	str	r3, [r7, #0]

	/* Interrupt handling for both master and slave mode of the device */
	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_1 = (I2C2->CR2 & (I2C_IRQ_ITEVFEN));	// Event interrupt enable
 8000f9a:	4b39      	ldr	r3, [pc, #228]	; (8001080 <I2C2_EV_IRQHandler+0xf0>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fa2:	60fb      	str	r3, [r7, #12]
	Temp_2 = (I2C2->CR2 & (I2C_IRQ_IITBUFEN));	// Buffer interrupt enable
 8000fa4:	4b36      	ldr	r3, [pc, #216]	; (8001080 <I2C2_EV_IRQHandler+0xf0>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fac:	60bb      	str	r3, [r7, #8]
	Temp_3 = (I2C2->SR1 & (I2C_Flag_STOPF));	// Stop detection (slave mode)
 8000fae:	4b34      	ldr	r3, [pc, #208]	; (8001080 <I2C2_EV_IRQHandler+0xf0>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	607b      	str	r3, [r7, #4]

	/* Handle Stop Condition Event */
	if(Temp_1 && Temp_3)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00a      	beq.n	8000fd4 <I2C2_EV_IRQHandler+0x44>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d007      	beq.n	8000fd4 <I2C2_EV_IRQHandler+0x44>
	{
		/* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		 * i have already read SR1 in Temp_3
		 * then next statement i write to CR1
		 */
		I2C2->CR1 |= 0x0000;
 8000fc4:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <I2C2_EV_IRQHandler+0xf0>)
 8000fc6:	4a2e      	ldr	r2, [pc, #184]	; (8001080 <I2C2_EV_IRQHandler+0xf0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	6013      	str	r3, [r2, #0]
		g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_STOPF);
 8000fcc:	4b2d      	ldr	r3, [pc, #180]	; (8001084 <I2C2_EV_IRQHandler+0xf4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2004      	movs	r0, #4
 8000fd2:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle Received address matched. */
	Temp_3 = (I2C2->SR1 & (I2C_Flag_ADDR));		//ADDR
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <I2C2_EV_IRQHandler+0xf0>)
 8000fd6:	695b      	ldr	r3, [r3, #20]
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_3)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00c      	beq.n	8000ffe <I2C2_EV_IRQHandler+0x6e>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d009      	beq.n	8000ffe <I2C2_EV_IRQHandler+0x6e>
		 */
		//Dummy_Read  = I2C1->SR1;
		//Dummy_Read  = I2C1->SR2;

		/* Check master mode or slave mode */
		if(I2C2->SR2 & (1<<I2C_Flag_MSL))
 8000fea:	4b25      	ldr	r3, [pc, #148]	; (8001080 <I2C2_EV_IRQHandler+0xf0>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d103      	bne.n	8000ffe <I2C2_EV_IRQHandler+0x6e>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_ADDR);
 8000ff6:	4b23      	ldr	r3, [pc, #140]	; (8001084 <I2C2_EV_IRQHandler+0xf4>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
	Temp_3 = (I2C2->SR1 & (I2C_Flag_TXE));		// TXE
 8000ffe:	4b20      	ldr	r3, [pc, #128]	; (8001080 <I2C2_EV_IRQHandler+0xf0>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	f003 0307 	and.w	r3, r3, #7
 8001006:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case TXE=1, ITEVTEN=1, ITBUFEN=1
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d015      	beq.n	800103a <I2C2_EV_IRQHandler+0xaa>
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d012      	beq.n	800103a <I2C2_EV_IRQHandler+0xaa>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00f      	beq.n	800103a <I2C2_EV_IRQHandler+0xaa>
	{
		/* Check master mode or slave mode */
		if(I2C2->SR2 & (1<<I2C_Flag_MSL))
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <I2C2_EV_IRQHandler+0xf0>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d109      	bne.n	800103a <I2C2_EV_IRQHandler+0xaa>
		}
		else
		{
			/* Slave mode */
			/* Check if slave in transmit mode */
			if(I2C2->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 1: Data bytes transmitted
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <I2C2_EV_IRQHandler+0xf0>)
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <I2C2_EV_IRQHandler+0xaa>
			{
				g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_TxE);
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <I2C2_EV_IRQHandler+0xf4>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2006      	movs	r0, #6
 8001038:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
	Temp_3 = (I2C2->SR1 & (I2C_Flag_RXNE));		// RXNE
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <I2C2_EV_IRQHandler+0xf0>)
 800103c:	695b      	ldr	r3, [r3, #20]
 800103e:	f003 0306 	and.w	r3, r3, #6
 8001042:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d015      	beq.n	8001076 <I2C2_EV_IRQHandler+0xe6>
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d012      	beq.n	8001076 <I2C2_EV_IRQHandler+0xe6>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00f      	beq.n	8001076 <I2C2_EV_IRQHandler+0xe6>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <I2C2_EV_IRQHandler+0xf8>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d109      	bne.n	8001076 <I2C2_EV_IRQHandler+0xe6>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			if(I2C2->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 0: Data bytes received
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <I2C2_EV_IRQHandler+0xf0>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <I2C2_EV_IRQHandler+0xe6>
			{
				g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_RxNE);
 800106e:	4b05      	ldr	r3, [pc, #20]	; (8001084 <I2C2_EV_IRQHandler+0xf4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2005      	movs	r0, #5
 8001074:	4798      	blx	r3
			}
		}
	}
	(void)dummy;
 8001076:	683b      	ldr	r3, [r7, #0]


}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40005800 	.word	0x40005800
 8001084:	2000009c 	.word	0x2000009c
 8001088:	40005400 	.word	0x40005400

0800108c <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (I2C2->CR2) & I2C_IRQ_ITERREN;
 8001092:	4b39      	ldr	r3, [pc, #228]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800109a:	607b      	str	r3, [r7, #4]


/***********************Check for Bus error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_BERR);
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 800109e:	695b      	ldr	r3, [r3, #20]
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2 )
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00c      	beq.n	80010c6 <I2C2_ER_IRQHandler+0x3a>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d009      	beq.n	80010c6 <I2C2_ER_IRQHandler+0x3a>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_BERR);
 80010b2:	4b31      	ldr	r3, [pc, #196]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	4a30      	ldr	r2, [pc, #192]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 80010b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010bc:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
	   g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_BERR);
 80010be:	4b2f      	ldr	r3, [pc, #188]	; (800117c <I2C2_ER_IRQHandler+0xf0>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2000      	movs	r0, #0
 80010c4:	4798      	blx	r3
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_ARLO);
 80010c6:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d00c      	beq.n	80010f0 <I2C2_ER_IRQHandler+0x64>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d009      	beq.n	80010f0 <I2C2_ER_IRQHandler+0x64>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_ARLO);
 80010dc:	4b26      	ldr	r3, [pc, #152]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 80010de:	695b      	ldr	r3, [r3, #20]
 80010e0:	4a25      	ldr	r2, [pc, #148]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 80010e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010e6:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_ARLO);
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <I2C2_ER_IRQHandler+0xf0>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2001      	movs	r0, #1
 80010ee:	4798      	blx	r3

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_AF);
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 80010f2:	695b      	ldr	r3, [r3, #20]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00c      	beq.n	800111a <I2C2_ER_IRQHandler+0x8e>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d009      	beq.n	800111a <I2C2_ER_IRQHandler+0x8e>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		I2C1->SR2 &= ~( 1 << I2C_Flag_AF);
 8001106:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <I2C2_ER_IRQHandler+0xf4>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	4a1d      	ldr	r2, [pc, #116]	; (8001180 <I2C2_ER_IRQHandler+0xf4>)
 800110c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001110:	6193      	str	r3, [r2, #24]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_AF);
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <I2C2_ER_IRQHandler+0xf0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2002      	movs	r0, #2
 8001118:	4798      	blx	r3
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_OVR);
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00c      	beq.n	8001144 <I2C2_ER_IRQHandler+0xb8>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d009      	beq.n	8001144 <I2C2_ER_IRQHandler+0xb8>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_OVR);
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	4a10      	ldr	r2, [pc, #64]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 8001136:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800113a:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_OVR);
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <I2C2_ER_IRQHandler+0xf0>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2003      	movs	r0, #3
 8001142:	4798      	blx	r3
	}

/***********************Check for Time out error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_TIMEOUT);
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 8001146:	695b      	ldr	r3, [r3, #20]
 8001148:	f003 0320 	and.w	r3, r3, #32
 800114c:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d00c      	beq.n	800116e <I2C2_ER_IRQHandler+0xe2>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d009      	beq.n	800116e <I2C2_ER_IRQHandler+0xe2>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_TIMEOUT);
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 800115c:	695b      	ldr	r3, [r3, #20]
 800115e:	4a06      	ldr	r2, [pc, #24]	; (8001178 <I2C2_ER_IRQHandler+0xec>)
 8001160:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001164:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_TIMEOUT);
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <I2C2_ER_IRQHandler+0xf0>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2005      	movs	r0, #5
 800116c:	4798      	blx	r3
	}
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40005800 	.word	0x40005800
 800117c:	200000a4 	.word	0x200000a4
 8001180:	40005400 	.word	0x40005400

08001184 <MCAL_RCC_SYSCLK>:
* @retval 			- SYSCLK Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_SYSCLK(void){
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
	* 00: HSI oscillator used as system clock
	* 01: HSE oscillator used as system clock
	* 10: PLL used as system clock
	* 11: Not applicable.
	*/
	switch( ( (RCC->CFGR) >> 2 ) & 0x3)
 8001188:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <MCAL_RCC_SYSCLK+0x3c>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	089b      	lsrs	r3, r3, #2
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	2b03      	cmp	r3, #3
 8001194:	d810      	bhi.n	80011b8 <MCAL_RCC_SYSCLK+0x34>
 8001196:	a201      	add	r2, pc, #4	; (adr r2, 800119c <MCAL_RCC_SYSCLK+0x18>)
 8001198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011b1 	.word	0x080011b1
 80011a4:	080011b5 	.word	0x080011b5
 80011a8:	080011b9 	.word	0x080011b9
	{
		case 0:
			return HSI_CLK;
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <MCAL_RCC_SYSCLK+0x40>)
 80011ae:	e003      	b.n	80011b8 <MCAL_RCC_SYSCLK+0x34>
		case 1:
			return HSE_CLK; //To be configured by the user @Config HSE_CLK_Define
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <MCAL_RCC_SYSCLK+0x44>)
 80011b2:	e001      	b.n	80011b8 <MCAL_RCC_SYSCLK+0x34>
		case 2:
			return 16000000; //To do later
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <MCAL_RCC_SYSCLK+0x44>)
 80011b6:	e7ff      	b.n	80011b8 <MCAL_RCC_SYSCLK+0x34>
		case 3:
			break;
	}

}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	40021000 	.word	0x40021000
 80011c4:	007a1200 	.word	0x007a1200
 80011c8:	00f42400 	.word	0x00f42400

080011cc <MCAL_RCC_HCLK>:
* @retval 			- HCLK Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_HCLK(void){
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0

	/*
	* HPRE[3:0]: AHB prescaler
	*/
	uint32_t HCLK = (MCAL_RCC_SYSCLK() >> (g_AHB_Prescaler_Table[ (RCC->CFGR >> 4) & 0b1111 ]));
 80011d2:	f7ff ffd7 	bl	8001184 <MCAL_RCC_SYSCLK>
 80011d6:	4601      	mov	r1, r0
 80011d8:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <MCAL_RCC_HCLK+0x2c>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	4a06      	ldr	r2, [pc, #24]	; (80011fc <MCAL_RCC_HCLK+0x30>)
 80011e4:	5cd3      	ldrb	r3, [r2, r3]
 80011e6:	fa21 f303 	lsr.w	r3, r1, r3
 80011ea:	607b      	str	r3, [r7, #4]
	return HCLK;
 80011ec:	687b      	ldr	r3, [r7, #4]
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40021000 	.word	0x40021000
 80011fc:	08001378 	.word	0x08001378

08001200 <MCAL_RCC_PCLK1>:
* @retval 			- PCLK1 Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_PCLK1(void){
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0

	/*
	* PPRE1[2:0]: APB Low-speed prescaler (APB1)
	*/

	uint32_t PCLK1 =  (MCAL_RCC_HCLK() >> (g_APB_Prescaler_Table[ (RCC->CFGR >> 8) & 0b111 ]));
 8001206:	f7ff ffe1 	bl	80011cc <MCAL_RCC_HCLK>
 800120a:	4601      	mov	r1, r0
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MCAL_RCC_PCLK1+0x2c>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	4a06      	ldr	r2, [pc, #24]	; (8001230 <MCAL_RCC_PCLK1+0x30>)
 8001218:	5cd3      	ldrb	r3, [r2, r3]
 800121a:	fa21 f303 	lsr.w	r3, r1, r3
 800121e:	607b      	str	r3, [r7, #4]
	return PCLK1;
 8001220:	687b      	ldr	r3, [r7, #4]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40021000 	.word	0x40021000
 8001230:	08001370 	.word	0x08001370

08001234 <SPI1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void SPI1_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8001238:	4b02      	ldr	r3, [pc, #8]	; (8001244 <SPI1_IRQHandler+0x10>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4798      	blx	r3
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200000a8 	.word	0x200000a8

08001248 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <SPI2_IRQHandler+0x10>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	4798      	blx	r3
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200000a8 	.word	0x200000a8

0800125c <USART1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void USART1_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8001260:	4b02      	ldr	r3, [pc, #8]	; (800126c <USART1_IRQHandler+0x10>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4798      	blx	r3
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200000b8 	.word	0x200000b8

08001270 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <USART2_IRQHandler+0x10>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	4798      	blx	r3
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200000b8 	.word	0x200000b8

08001284 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 8001288:	4b02      	ldr	r3, [pc, #8]	; (8001294 <USART3_IRQHandler+0x10>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	4798      	blx	r3
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200000b8 	.word	0x200000b8

08001298 <main>:
uint8_t BufferRec[5];

GPIO_PinConfig_t led = {GPIOC,GPIO_PIN_13,GPIO_MODE_OUTPUT_PP,GPIO_OUTPUT_SPEED_10MHZ};

int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	MCAL_GPIO_Init(&led);
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <main+0x1c>)
 800129e:	f7ff f91b 	bl	80004d8 <MCAL_GPIO_Init>
	HAL_EEPROM_Init();
 80012a2:	f7fe ff65 	bl	8000170 <HAL_EEPROM_Init>
	while (1)
	{
		HAL_EEPROM_ReadNbytes(0x50, BufferRec, 5);
 80012a6:	2205      	movs	r2, #5
 80012a8:	4903      	ldr	r1, [pc, #12]	; (80012b8 <main+0x20>)
 80012aa:	2050      	movs	r0, #80	; 0x50
 80012ac:	f7fe ff82 	bl	80001b4 <HAL_EEPROM_ReadNbytes>
 80012b0:	e7f9      	b.n	80012a6 <main+0xe>
 80012b2:	bf00      	nop
 80012b4:	20000000 	.word	0x20000000
 80012b8:	200000c4 	.word	0x200000c4

080012bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012be:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012c6:	490d      	ldr	r1, [pc, #52]	; (80012fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <LoopForever+0xe>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012dc:	4c0a      	ldr	r4, [pc, #40]	; (8001308 <LoopForever+0x16>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012ea:	f000 f811 	bl	8001310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ee:	f7ff ffd3 	bl	8001298 <main>

080012f2 <LoopForever>:

LoopForever:
    b LoopForever
 80012f2:	e7fe      	b.n	80012f2 <LoopForever>
  ldr   r0, =_estack
 80012f4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012fc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001300:	08001390 	.word	0x08001390
  ldr r2, =_sbss
 8001304:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8001308:	200000cc 	.word	0x200000cc

0800130c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800130c:	e7fe      	b.n	800130c <ADC1_2_IRQHandler>
	...

08001310 <__libc_init_array>:
 8001310:	b570      	push	{r4, r5, r6, lr}
 8001312:	2500      	movs	r5, #0
 8001314:	4e0c      	ldr	r6, [pc, #48]	; (8001348 <__libc_init_array+0x38>)
 8001316:	4c0d      	ldr	r4, [pc, #52]	; (800134c <__libc_init_array+0x3c>)
 8001318:	1ba4      	subs	r4, r4, r6
 800131a:	10a4      	asrs	r4, r4, #2
 800131c:	42a5      	cmp	r5, r4
 800131e:	d109      	bne.n	8001334 <__libc_init_array+0x24>
 8001320:	f000 f81a 	bl	8001358 <_init>
 8001324:	2500      	movs	r5, #0
 8001326:	4e0a      	ldr	r6, [pc, #40]	; (8001350 <__libc_init_array+0x40>)
 8001328:	4c0a      	ldr	r4, [pc, #40]	; (8001354 <__libc_init_array+0x44>)
 800132a:	1ba4      	subs	r4, r4, r6
 800132c:	10a4      	asrs	r4, r4, #2
 800132e:	42a5      	cmp	r5, r4
 8001330:	d105      	bne.n	800133e <__libc_init_array+0x2e>
 8001332:	bd70      	pop	{r4, r5, r6, pc}
 8001334:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001338:	4798      	blx	r3
 800133a:	3501      	adds	r5, #1
 800133c:	e7ee      	b.n	800131c <__libc_init_array+0xc>
 800133e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001342:	4798      	blx	r3
 8001344:	3501      	adds	r5, #1
 8001346:	e7f2      	b.n	800132e <__libc_init_array+0x1e>
 8001348:	08001388 	.word	0x08001388
 800134c:	08001388 	.word	0x08001388
 8001350:	08001388 	.word	0x08001388
 8001354:	0800138c 	.word	0x0800138c

08001358 <_init>:
 8001358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800135a:	bf00      	nop
 800135c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800135e:	bc08      	pop	{r3}
 8001360:	469e      	mov	lr, r3
 8001362:	4770      	bx	lr

08001364 <_fini>:
 8001364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001366:	bf00      	nop
 8001368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800136a:	bc08      	pop	{r3}
 800136c:	469e      	mov	lr, r3
 800136e:	4770      	bx	lr
