
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b74  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000ca4  08000ca4  00010ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cb4  08000cb4  00010cbc  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb4  08000cb4  00010cbc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb4  08000cbc  00010cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb4  08000cb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb8  08000cb8  00010cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000000  08000cbc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08000cbc  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010cbc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018a7  00000000  00000000  00010ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000718  00000000  00000000  0001258c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000c02  00000000  00000000  00012ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001f0  00000000  00000000  000138a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000198  00000000  00000000  00013a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000008f0  00000000  00000000  00013c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000a9a  00000000  00000000  00014520  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007d7f  00000000  00000000  00014fba  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001cd39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000640  00000000  00000000  0001cdb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c8c 	.word	0x08000c8c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c8c 	.word	0x08000c8c

08000170 <EXTI0_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000034 	.word	0x20000034

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000034 	.word	0x20000034

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3

}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000034 	.word	0x20000034

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000034 	.word	0x20000034

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000034 	.word	0x20000034

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); g_IRQ_CallBackPtr[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); g_IRQ_CallBackPtr[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); g_IRQ_CallBackPtr[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); g_IRQ_CallBackPtr[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); g_IRQ_CallBackPtr[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000034 	.word	0x20000034

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); g_IRQ_CallBackPtr[10]();}
 80002d0:	4b26      	ldr	r3, [pc, #152]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b23      	ldr	r3, [pc, #140]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a22      	ldr	r2, [pc, #136]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b21      	ldr	r3, [pc, #132]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); g_IRQ_CallBackPtr[11]();}
 80002ee:	4b1f      	ldr	r3, [pc, #124]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b1c      	ldr	r3, [pc, #112]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a1b      	ldr	r2, [pc, #108]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); g_IRQ_CallBackPtr[12]();}
 800030c:	4b17      	ldr	r3, [pc, #92]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b14      	ldr	r3, [pc, #80]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a13      	ldr	r2, [pc, #76]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); g_IRQ_CallBackPtr[13]();}
 800032a:	4b10      	ldr	r3, [pc, #64]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a0c      	ldr	r2, [pc, #48]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); g_IRQ_CallBackPtr[14]();}
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010400 	.word	0x40010400
 8000370:	20000034 	.word	0x20000034

08000374 <Get_CRx_Position>:
/*================================================================
 * Description :
 * Private Function to get the 4 bits position required to configure of the CRx register according to the  pin number
 * of the specified GPIO_PinConfigPtr
 */
static uint8_t Get_CRx_Position(uint16_t PinNumber){
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	80fb      	strh	r3, [r7, #6]
	//Case PinNumber < GPIO_PIN_8
	switch(PinNumber){
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	2b80      	cmp	r3, #128	; 0x80
 8000382:	d042      	beq.n	800040a <Get_CRx_Position+0x96>
 8000384:	2b80      	cmp	r3, #128	; 0x80
 8000386:	dc11      	bgt.n	80003ac <Get_CRx_Position+0x38>
 8000388:	2b08      	cmp	r3, #8
 800038a:	d036      	beq.n	80003fa <Get_CRx_Position+0x86>
 800038c:	2b08      	cmp	r3, #8
 800038e:	dc06      	bgt.n	800039e <Get_CRx_Position+0x2a>
 8000390:	2b02      	cmp	r3, #2
 8000392:	d02e      	beq.n	80003f2 <Get_CRx_Position+0x7e>
 8000394:	2b04      	cmp	r3, #4
 8000396:	d02e      	beq.n	80003f6 <Get_CRx_Position+0x82>
 8000398:	2b01      	cmp	r3, #1
 800039a:	d028      	beq.n	80003ee <Get_CRx_Position+0x7a>
 800039c:	e047      	b.n	800042e <Get_CRx_Position+0xba>
 800039e:	2b20      	cmp	r3, #32
 80003a0:	d02f      	beq.n	8000402 <Get_CRx_Position+0x8e>
 80003a2:	2b40      	cmp	r3, #64	; 0x40
 80003a4:	d02f      	beq.n	8000406 <Get_CRx_Position+0x92>
 80003a6:	2b10      	cmp	r3, #16
 80003a8:	d029      	beq.n	80003fe <Get_CRx_Position+0x8a>
 80003aa:	e040      	b.n	800042e <Get_CRx_Position+0xba>
 80003ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003b0:	d033      	beq.n	800041a <Get_CRx_Position+0xa6>
 80003b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003b6:	dc09      	bgt.n	80003cc <Get_CRx_Position+0x58>
 80003b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003bc:	d029      	beq.n	8000412 <Get_CRx_Position+0x9e>
 80003be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003c2:	d028      	beq.n	8000416 <Get_CRx_Position+0xa2>
 80003c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003c8:	d021      	beq.n	800040e <Get_CRx_Position+0x9a>
 80003ca:	e030      	b.n	800042e <Get_CRx_Position+0xba>
 80003cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003d0:	d027      	beq.n	8000422 <Get_CRx_Position+0xae>
 80003d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003d6:	dc03      	bgt.n	80003e0 <Get_CRx_Position+0x6c>
 80003d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003dc:	d01f      	beq.n	800041e <Get_CRx_Position+0xaa>
 80003de:	e026      	b.n	800042e <Get_CRx_Position+0xba>
 80003e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003e4:	d01f      	beq.n	8000426 <Get_CRx_Position+0xb2>
 80003e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003ea:	d01e      	beq.n	800042a <Get_CRx_Position+0xb6>
 80003ec:	e01f      	b.n	800042e <Get_CRx_Position+0xba>
		case GPIO_PIN_0:
			return 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	e01e      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_1:
			return 4;
 80003f2:	2304      	movs	r3, #4
 80003f4:	e01c      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_2:
			return 8;
 80003f6:	2308      	movs	r3, #8
 80003f8:	e01a      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_3:
			return 12;
 80003fa:	230c      	movs	r3, #12
 80003fc:	e018      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_4:
			return 16;
 80003fe:	2310      	movs	r3, #16
 8000400:	e016      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_5:
			return 20;
 8000402:	2314      	movs	r3, #20
 8000404:	e014      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_6:
			return 24;
 8000406:	2318      	movs	r3, #24
 8000408:	e012      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_7:
			return 28;
 800040a:	231c      	movs	r3, #28
 800040c:	e010      	b.n	8000430 <Get_CRx_Position+0xbc>

	//Case PinNumber > GPIO_PIN_7
		case GPIO_PIN_8:
			return 0;
 800040e:	2300      	movs	r3, #0
 8000410:	e00e      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_9:
			return 4;
 8000412:	2304      	movs	r3, #4
 8000414:	e00c      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_10:
			return 8;
 8000416:	2308      	movs	r3, #8
 8000418:	e00a      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_11:
			return 12;
 800041a:	230c      	movs	r3, #12
 800041c:	e008      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_12:
			return 16;
 800041e:	2310      	movs	r3, #16
 8000420:	e006      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_13:
			return 20;
 8000422:	2314      	movs	r3, #20
 8000424:	e004      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_14:
			return 24;
 8000426:	2318      	movs	r3, #24
 8000428:	e002      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_15:
			return 28;
 800042a:	231c      	movs	r3, #28
 800042c:	e000      	b.n	8000430 <Get_CRx_Position+0xbc>
	}
	return 0;
 800042e:	2300      	movs	r3, #0
}
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
	...

0800043c <MCAL_GPIO_Init>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_Init(GPIO_PinConfig_t* GPIO_PinConfigPtr){
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]

	//Check port selected to enable it's clock
	if(GPIO_PinConfigPtr->GPIO_Port == GPIOA)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a66      	ldr	r2, [pc, #408]	; (80005e4 <MCAL_GPIO_Init+0x1a8>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <MCAL_GPIO_Init+0x20>
	{
		RCC_GPIOA_CLK_EN();
 800044e:	4b66      	ldr	r3, [pc, #408]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a65      	ldr	r2, [pc, #404]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000454:	f043 0304 	orr.w	r3, r3, #4
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	e029      	b.n	80004b0 <MCAL_GPIO_Init+0x74>
	}
	else if(GPIO_PinConfigPtr->GPIO_Port == GPIOB)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a62      	ldr	r2, [pc, #392]	; (80005ec <MCAL_GPIO_Init+0x1b0>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <MCAL_GPIO_Init+0x38>
	{
		RCC_GPIOB_CLK_EN();
 8000466:	4b60      	ldr	r3, [pc, #384]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a5f      	ldr	r2, [pc, #380]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 800046c:	f043 0308 	orr.w	r3, r3, #8
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	e01d      	b.n	80004b0 <MCAL_GPIO_Init+0x74>
	}
	else if(GPIO_PinConfigPtr->GPIO_Port == GPIOC)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a5d      	ldr	r2, [pc, #372]	; (80005f0 <MCAL_GPIO_Init+0x1b4>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <MCAL_GPIO_Init+0x50>
	{
		RCC_GPIOC_CLK_EN();
 800047e:	4b5a      	ldr	r3, [pc, #360]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a59      	ldr	r2, [pc, #356]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000484:	f043 0310 	orr.w	r3, r3, #16
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	e011      	b.n	80004b0 <MCAL_GPIO_Init+0x74>
	}
	else if(GPIO_PinConfigPtr->GPIO_Port == GPIOD)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a58      	ldr	r2, [pc, #352]	; (80005f4 <MCAL_GPIO_Init+0x1b8>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <MCAL_GPIO_Init+0x68>
	{
		RCC_GPIOD_CLK_EN();
 8000496:	4b54      	ldr	r3, [pc, #336]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a53      	ldr	r2, [pc, #332]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 800049c:	f043 0320 	orr.w	r3, r3, #32
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	e005      	b.n	80004b0 <MCAL_GPIO_Init+0x74>
	}
	else
	{
		RCC_GPIOE_CLK_EN();
 80004a4:	4b50      	ldr	r3, [pc, #320]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a4f      	ldr	r2, [pc, #316]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 80004aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ae:	6193      	str	r3, [r2, #24]
	}

	//Check for alternate function mode (Input or Output) to enable it's clock
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_OUTPUT_OD)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	799b      	ldrb	r3, [r3, #6]
 80004b4:	2b05      	cmp	r3, #5
 80004b6:	d905      	bls.n	80004c4 <MCAL_GPIO_Init+0x88>
	{
		RCC_AFIO_CLK_EN();
 80004b8:	4b4b      	ldr	r3, [pc, #300]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a4a      	ldr	r2, [pc, #296]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6193      	str	r3, [r2, #24]
	}

	//Pointer holds the configuration register address either High or Low depends on PinNo
	vuint32_t* GPIO_CRx = NULL_PTR;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
	GPIO_CRx = ((GPIO_PinConfigPtr->GPIO_PinNo < GPIO_PIN_8)?&(GPIO_PinConfigPtr->GPIO_Port->CRL):&(GPIO_PinConfigPtr->GPIO_Port->CRH));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	889b      	ldrh	r3, [r3, #4]
 80004cc:	2bff      	cmp	r3, #255	; 0xff
 80004ce:	d802      	bhi.n	80004d6 <MCAL_GPIO_Init+0x9a>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	e002      	b.n	80004dc <MCAL_GPIO_Init+0xa0>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	3304      	adds	r3, #4
 80004dc:	60bb      	str	r3, [r7, #8]

	//MODE & CNF Variable (Initialized by it's default reset value)
	uint8_t PinConfig_Value = 0x4;
 80004de:	2304      	movs	r3, #4
 80004e0:	73fb      	strb	r3, [r7, #15]

	//Clear MODE & CNF
	(*GPIO_CRx) &= ~(0xF<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	889b      	ldrh	r3, [r3, #4]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff44 	bl	8000374 <Get_CRx_Position>
 80004ec:	4603      	mov	r3, r0
 80004ee:	461a      	mov	r2, r3
 80004f0:	230f      	movs	r3, #15
 80004f2:	4093      	lsls	r3, r2
 80004f4:	43da      	mvns	r2, r3
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	401a      	ands	r2, r3
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	601a      	str	r2, [r3, #0]

	//Check if pin is output
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_INPUT_PD && GPIO_PinConfigPtr->GPIO_Mode < GPIO_MODE_AF_INPUT)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	799b      	ldrb	r3, [r3, #6]
 8000504:	2b03      	cmp	r3, #3
 8000506:	d914      	bls.n	8000532 <MCAL_GPIO_Init+0xf6>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	799b      	ldrb	r3, [r3, #6]
 800050c:	2b07      	cmp	r3, #7
 800050e:	d810      	bhi.n	8000532 <MCAL_GPIO_Init+0xf6>
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]
		//Set MODE & CNF
		PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode-4)<<2) | (GPIO_PinConfigPtr->GPIO_Output_Speed)) & 0x0F;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	799b      	ldrb	r3, [r3, #6]
 8000518:	3b04      	subs	r3, #4
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	b25a      	sxtb	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	79db      	ldrb	r3, [r3, #7]
 8000522:	b25b      	sxtb	r3, r3
 8000524:	4313      	orrs	r3, r2
 8000526:	b25b      	sxtb	r3, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f003 030f 	and.w	r3, r3, #15
 800052e:	73fb      	strb	r3, [r7, #15]
 8000530:	e037      	b.n	80005a2 <MCAL_GPIO_Init+0x166>

	//Else pin is input
	else //MODE = 00: Input mode (reset state)
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	73fb      	strb	r3, [r7, #15]

		//Check if Input Analog mode or Input Floating
		if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_ANALOG || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_FLO)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	799b      	ldrb	r3, [r3, #6]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d003      	beq.n	8000546 <MCAL_GPIO_Init+0x10a>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	799b      	ldrb	r3, [r3, #6]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d107      	bne.n	8000556 <MCAL_GPIO_Init+0x11a>
		{	//Set MODE & CNF
			PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode)<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	799b      	ldrb	r3, [r3, #6]
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	b2db      	uxtb	r3, r3
 800054e:	f003 030f 	and.w	r3, r3, #15
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e025      	b.n	80005a2 <MCAL_GPIO_Init+0x166>
		}

		//Check if Input with pull-up or Input with pull-down
		else if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PD)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	799b      	ldrb	r3, [r3, #6]
 800055a:	2b02      	cmp	r3, #2
 800055c:	d003      	beq.n	8000566 <MCAL_GPIO_Init+0x12a>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	799b      	ldrb	r3, [r3, #6]
 8000562:	2b03      	cmp	r3, #3
 8000564:	d11b      	bne.n	800059e <MCAL_GPIO_Init+0x162>
		{
			//Set MODE & CNF
			PinConfig_Value = ((GPIO_MODE_INPUT_PU<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 8000566:	2308      	movs	r3, #8
 8000568:	73fb      	strb	r3, [r7, #15]

			//Check if Input with pull-up
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	799b      	ldrb	r3, [r3, #6]
 800056e:	2b02      	cmp	r3, #2
 8000570:	d10a      	bne.n	8000588 <MCAL_GPIO_Init+0x14c>
			{
				//Set output data register ODR because pull up specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	889b      	ldrh	r3, [r3, #4]
 800057c:	4619      	mov	r1, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	430a      	orrs	r2, r1
 8000584:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000586:	e00c      	b.n	80005a2 <MCAL_GPIO_Init+0x166>

			//Check if Input with pull-down
			else
			{
				//Clear output data register ODR because pull down specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	68da      	ldr	r2, [r3, #12]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	889b      	ldrh	r3, [r3, #4]
 8000592:	4619      	mov	r1, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	430a      	orrs	r2, r1
 800059a:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800059c:	e001      	b.n	80005a2 <MCAL_GPIO_Init+0x166>
		}

		//Else Alternate function input
		else
		{
			PinConfig_Value = ((GPIO_MODE_INPUT_FLO<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 800059e:	2304      	movs	r3, #4
 80005a0:	73fb      	strb	r3, [r7, #15]
		}

	}

	//Write on CRx register to configure pin -> x is (H or L)
	(*GPIO_CRx) &= ~(PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 80005a2:	7bfc      	ldrb	r4, [r7, #15]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	889b      	ldrh	r3, [r3, #4]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fee3 	bl	8000374 <Get_CRx_Position>
 80005ae:	4603      	mov	r3, r0
 80005b0:	fa04 f303 	lsl.w	r3, r4, r3
 80005b4:	43da      	mvns	r2, r3
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	401a      	ands	r2, r3
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	601a      	str	r2, [r3, #0]
	(*GPIO_CRx) |= (PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 80005c0:	7bfc      	ldrb	r4, [r7, #15]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	889b      	ldrh	r3, [r3, #4]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fed4 	bl	8000374 <Get_CRx_Position>
 80005cc:	4603      	mov	r3, r0
 80005ce:	fa04 f203 	lsl.w	r2, r4, r3
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	431a      	orrs	r2, r3
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	601a      	str	r2, [r3, #0]

	return;
 80005dc:	bf00      	nop

}
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	40010800 	.word	0x40010800
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010c00 	.word	0x40010c00
 80005f0:	40011000 	.word	0x40011000
 80005f4:	40011400 	.word	0x40011400

080005f8 <MCAL_GPIO_WritePin>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_WritePin(GPIO_PinConfig_t* GPIO_PinConfigPtr, uint8_t PinValue){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	460b      	mov	r3, r1
 8000602:	70fb      	strb	r3, [r7, #3]

	//Check if sent pin state is one.
	if(PinValue == GPIO_PIN_SET)
 8000604:	78fb      	ldrb	r3, [r7, #3]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d105      	bne.n	8000616 <MCAL_GPIO_WritePin+0x1e>
	{

		GPIO_PinConfigPtr->GPIO_Port->BSRR = GPIO_PinConfigPtr->GPIO_PinNo;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	889a      	ldrh	r2, [r3, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	611a      	str	r2, [r3, #16]
	else
	{
		GPIO_PinConfigPtr->GPIO_Port->BRR = GPIO_PinConfigPtr->GPIO_PinNo;
	}

}
 8000614:	e004      	b.n	8000620 <MCAL_GPIO_WritePin+0x28>
		GPIO_PinConfigPtr->GPIO_Port->BRR = GPIO_PinConfigPtr->GPIO_PinNo;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	889a      	ldrh	r2, [r3, #4]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	615a      	str	r2, [r3, #20]
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bc80      	pop	{r7}
 8000628:	4770      	bx	lr
	...

0800062c <MCAL_SPI_Init>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_SPI_Init(SPI_Config_t* SPI_ConfigPtr){
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

	// Safety for registers
	uint16_t SPIx_CR1_temp = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	81fb      	strh	r3, [r7, #14]
	uint16_t SPIx_CR2_temp = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	81bb      	strh	r3, [r7, #12]

	/*
	* 1) Enable the SPI Clock according to the Channel Selected.
	*/
	if(SPI_ConfigPtr->SPIx == SPI1)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a42      	ldr	r2, [pc, #264]	; (800074c <MCAL_SPI_Init+0x120>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d106      	bne.n	8000654 <MCAL_SPI_Init+0x28>
		RCC_SPI1_CLK_EN();
 8000646:	4b42      	ldr	r3, [pc, #264]	; (8000750 <MCAL_SPI_Init+0x124>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4a41      	ldr	r2, [pc, #260]	; (8000750 <MCAL_SPI_Init+0x124>)
 800064c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000650:	6193      	str	r3, [r2, #24]
 8000652:	e005      	b.n	8000660 <MCAL_SPI_Init+0x34>
	else
		RCC_SPI2_CLK_EN();
 8000654:	4b3e      	ldr	r3, [pc, #248]	; (8000750 <MCAL_SPI_Init+0x124>)
 8000656:	69db      	ldr	r3, [r3, #28]
 8000658:	4a3d      	ldr	r2, [pc, #244]	; (8000750 <MCAL_SPI_Init+0x124>)
 800065a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800065e:	61d3      	str	r3, [r2, #28]

	/*
	* 2) Set the device Mode (Master or Slave) & Enable the SPI Peripheral.
	*/
	SPIx_CR1_temp |= SPI_ConfigPtr->SPI_Mode;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	889a      	ldrh	r2, [r3, #4]
 8000664:	89fb      	ldrh	r3, [r7, #14]
 8000666:	4313      	orrs	r3, r2
 8000668:	81fb      	strh	r3, [r7, #14]
	/*
	* 3) Set the device communication node (FullDuplex - HafDuplex - Simplex).
	* NOTE: We aim only for bits 15 and 10 (BIDIMODE & RXONLY), therefore we masked them since they contain another bits
	* in the definition for discrimination.
	*/
	SPIx_CR1_temp |= (SPI_ConfigPtr->SPI_CommMode & 0x8400);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	88db      	ldrh	r3, [r3, #6]
 800066e:	b21b      	sxth	r3, r3
 8000670:	f423 43f7 	bic.w	r3, r3, #31616	; 0x7b80
 8000674:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000678:	b21a      	sxth	r2, r3
 800067a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800067e:	4313      	orrs	r3, r2
 8000680:	b21b      	sxth	r3, r3
 8000682:	81fb      	strh	r3, [r7, #14]

	/*
	* 4) Check if Master Mode is Selected to define the serial clock baud rate.
	*/
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	889b      	ldrh	r3, [r3, #4]
 8000688:	2b04      	cmp	r3, #4
 800068a:	d104      	bne.n	8000696 <MCAL_SPI_Init+0x6a>
		SPIx_CR1_temp |= SPI_ConfigPtr->SPI_PreScaler;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	8a5a      	ldrh	r2, [r3, #18]
 8000690:	89fb      	ldrh	r3, [r7, #14]
 8000692:	4313      	orrs	r3, r2
 8000694:	81fb      	strh	r3, [r7, #14]

	/*
	* 5) Set the DFF bit to define 8- or 16-bit data frame format.
	*/
	SPIx_CR1_temp |= SPI_ConfigPtr->SPI_DataSize;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	895a      	ldrh	r2, [r3, #10]
 800069a:	89fb      	ldrh	r3, [r7, #14]
 800069c:	4313      	orrs	r3, r2
 800069e:	81fb      	strh	r3, [r7, #14]

	/*
	* 6) Select the CPOL and CPHA bits to define one of the four relationships between the data transfer and the serial clock.
	*/
	SPIx_CR1_temp |= (SPI_ConfigPtr->SPI_ClkPhase) | (SPI_ConfigPtr->SPI_ClkPolarity);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	89da      	ldrh	r2, [r3, #14]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	899b      	ldrh	r3, [r3, #12]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	89fb      	ldrh	r3, [r7, #14]
 80006ae:	4313      	orrs	r3, r2
 80006b0:	81fb      	strh	r3, [r7, #14]

	/*
	* 7) Configure the LSBFIRST bit in the SPI_CR1 register to define the frame format.
	*/
	SPIx_CR1_temp |= SPI_ConfigPtr->SPI_FrameFormat;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	891a      	ldrh	r2, [r3, #8]
 80006b6:	89fb      	ldrh	r3, [r7, #14]
 80006b8:	4313      	orrs	r3, r2
 80006ba:	81fb      	strh	r3, [r7, #14]

	if(SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_MASTER_OD || SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_MASTER_OE)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	8a1b      	ldrh	r3, [r3, #16]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d003      	beq.n	80006cc <MCAL_SPI_Init+0xa0>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	8a1b      	ldrh	r3, [r3, #16]
 80006c8:	2b04      	cmp	r3, #4
 80006ca:	d105      	bne.n	80006d8 <MCAL_SPI_Init+0xac>
		SPIx_CR2_temp |= SPI_ConfigPtr->SPI_SlaveSelect;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	8a1a      	ldrh	r2, [r3, #16]
 80006d0:	89bb      	ldrh	r3, [r7, #12]
 80006d2:	4313      	orrs	r3, r2
 80006d4:	81bb      	strh	r3, [r7, #12]
 80006d6:	e004      	b.n	80006e2 <MCAL_SPI_Init+0xb6>
	else
		SPIx_CR1_temp |= SPI_ConfigPtr->SPI_SlaveSelect;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	8a1a      	ldrh	r2, [r3, #16]
 80006dc:	89fb      	ldrh	r3, [r7, #14]
 80006de:	4313      	orrs	r3, r2
 80006e0:	81fb      	strh	r3, [r7, #14]

	/*
	* 8) Enable or Disable Interrupt according to the configuration & Update Interrupt Handling CallBack.
	*/
	if(SPI_ConfigPtr->SPI_IRQ_EN != SPI_IE_DISABLE){
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	8a9b      	ldrh	r3, [r3, #20]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d01e      	beq.n	8000728 <MCAL_SPI_Init+0xfc>

		//Enable Interrupt mask in SPI
		SPIx_CR2_temp |= SPI_ConfigPtr->SPI_IRQ_EN;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	8a9a      	ldrh	r2, [r3, #20]
 80006ee:	89bb      	ldrh	r3, [r7, #12]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	81bb      	strh	r3, [r7, #12]

		//Enable Interrupt mask in NVIC
		if(SPI_ConfigPtr->SPIx == SPI1)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a14      	ldr	r2, [pc, #80]	; (800074c <MCAL_SPI_Init+0x120>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d10a      	bne.n	8000714 <MCAL_SPI_Init+0xe8>
		{
			g_IRQ_CallBackPtr[0] = SPI_ConfigPtr->IRQ_CallBackPtr;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	699b      	ldr	r3, [r3, #24]
 8000702:	4a14      	ldr	r2, [pc, #80]	; (8000754 <MCAL_SPI_Init+0x128>)
 8000704:	6013      	str	r3, [r2, #0]
			NVIC_IRQ35_EN();
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MCAL_SPI_Init+0x12c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <MCAL_SPI_Init+0x12c>)
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	6013      	str	r3, [r2, #0]
 8000712:	e009      	b.n	8000728 <MCAL_SPI_Init+0xfc>
		}
		else
		{
			g_IRQ_CallBackPtr[1] = SPI_ConfigPtr->IRQ_CallBackPtr;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	4a0e      	ldr	r2, [pc, #56]	; (8000754 <MCAL_SPI_Init+0x128>)
 800071a:	6053      	str	r3, [r2, #4]
			NVIC_IRQ36_EN();
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MCAL_SPI_Init+0x12c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a0d      	ldr	r2, [pc, #52]	; (8000758 <MCAL_SPI_Init+0x12c>)
 8000722:	f043 0310 	orr.w	r3, r3, #16
 8000726:	6013      	str	r3, [r2, #0]
	}

	/*
	* 9) Enable the SPI peripheral by setting the SPE bit to 1.
	*/
	SPIx_CR1_temp |= SPI_ENABLE;
 8000728:	89fb      	ldrh	r3, [r7, #14]
 800072a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800072e:	81fb      	strh	r3, [r7, #14]

	/*
	* 10) Set the real registers values with the safety templates.
	*/
	SPI_ConfigPtr->SPIx->CR1 = SPIx_CR1_temp;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	89fa      	ldrh	r2, [r7, #14]
 8000736:	601a      	str	r2, [r3, #0]
	SPI_ConfigPtr->SPIx->CR2 = SPIx_CR2_temp;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	89ba      	ldrh	r2, [r7, #12]
 800073e:	605a      	str	r2, [r3, #4]

}
 8000740:	bf00      	nop
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	40013000 	.word	0x40013000
 8000750:	40021000 	.word	0x40021000
 8000754:	2000002c 	.word	0x2000002c
 8000758:	e000e104 	.word	0xe000e104

0800075c <MCAL_SPI_GPIO_SetPins>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_SPI_GPIO_SetPins(SPI_Config_t* SPI_ConfigPtr){
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t MOSI,MISO,SCK,NSS;
	int NSS_Index;
	/*
	* 1) Check if SPIx is SPI1 or SPI2.
	*/
	if(SPI_ConfigPtr->SPIx == SPI1)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a67      	ldr	r2, [pc, #412]	; (8000908 <MCAL_SPI_GPIO_SetPins+0x1ac>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d112      	bne.n	8000794 <MCAL_SPI_GPIO_SetPins+0x38>
	{
		//Configure NSS Pin Data
		NSS.GPIO_Port = GPIOA;
 800076e:	4b67      	ldr	r3, [pc, #412]	; (800090c <MCAL_SPI_GPIO_SetPins+0x1b0>)
 8000770:	60fb      	str	r3, [r7, #12]
		NSS.GPIO_PinNo = GPIO_PIN_4;
 8000772:	2310      	movs	r3, #16
 8000774:	823b      	strh	r3, [r7, #16]

		//Configure SCK Pin Data
		SCK.GPIO_Port = GPIOA;
 8000776:	4b65      	ldr	r3, [pc, #404]	; (800090c <MCAL_SPI_GPIO_SetPins+0x1b0>)
 8000778:	617b      	str	r3, [r7, #20]
		SCK.GPIO_PinNo = GPIO_PIN_5;
 800077a:	2320      	movs	r3, #32
 800077c:	833b      	strh	r3, [r7, #24]

		//Configure MISO Pin Data
		MISO.GPIO_Port = GPIOA;
 800077e:	4b63      	ldr	r3, [pc, #396]	; (800090c <MCAL_SPI_GPIO_SetPins+0x1b0>)
 8000780:	61fb      	str	r3, [r7, #28]
		MISO.GPIO_PinNo = GPIO_PIN_6;
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	843b      	strh	r3, [r7, #32]

		//Configure MOSI Pin Data
		MOSI.GPIO_Port = GPIOA;
 8000786:	4b61      	ldr	r3, [pc, #388]	; (800090c <MCAL_SPI_GPIO_SetPins+0x1b0>)
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
		MOSI.GPIO_PinNo = GPIO_PIN_7;
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	853b      	strh	r3, [r7, #40]	; 0x28
		NSS_Index = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000792:	e015      	b.n	80007c0 <MCAL_SPI_GPIO_SetPins+0x64>

	}
	else
	{
		//Configure NSS Pin Data
		NSS.GPIO_Port = GPIOB;
 8000794:	4b5e      	ldr	r3, [pc, #376]	; (8000910 <MCAL_SPI_GPIO_SetPins+0x1b4>)
 8000796:	60fb      	str	r3, [r7, #12]
		NSS.GPIO_PinNo = GPIO_PIN_12;
 8000798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800079c:	823b      	strh	r3, [r7, #16]

		//Configure SCK Pin Data
		SCK.GPIO_Port = GPIOB;
 800079e:	4b5c      	ldr	r3, [pc, #368]	; (8000910 <MCAL_SPI_GPIO_SetPins+0x1b4>)
 80007a0:	617b      	str	r3, [r7, #20]
		SCK.GPIO_PinNo = GPIO_PIN_13;
 80007a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a6:	833b      	strh	r3, [r7, #24]

		//Configure MISO Pin Data
		MISO.GPIO_Port = GPIOB;
 80007a8:	4b59      	ldr	r3, [pc, #356]	; (8000910 <MCAL_SPI_GPIO_SetPins+0x1b4>)
 80007aa:	61fb      	str	r3, [r7, #28]
		MISO.GPIO_PinNo = GPIO_PIN_14;
 80007ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007b0:	843b      	strh	r3, [r7, #32]

		//Configure MOSI Pin Data
		MOSI.GPIO_Port = GPIOB;
 80007b2:	4b57      	ldr	r3, [pc, #348]	; (8000910 <MCAL_SPI_GPIO_SetPins+0x1b4>)
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
		MOSI.GPIO_PinNo = GPIO_PIN_15;
 80007b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007ba:	853b      	strh	r3, [r7, #40]	; 0x28
		NSS_Index = 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c


	/*
	* 2) Configure SCK Pin.
	*/
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	889b      	ldrh	r3, [r3, #4]
 80007c4:	2b04      	cmp	r3, #4
 80007c6:	d104      	bne.n	80007d2 <MCAL_SPI_GPIO_SetPins+0x76>
	{
		SCK.GPIO_Mode = GPIO_MODE_AF_OUTPUT_PP;
 80007c8:	2306      	movs	r3, #6
 80007ca:	76bb      	strb	r3, [r7, #26]
		SCK.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 80007cc:	2301      	movs	r3, #1
 80007ce:	76fb      	strb	r3, [r7, #27]
 80007d0:	e007      	b.n	80007e2 <MCAL_SPI_GPIO_SetPins+0x86>
	}
	else if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_SLAVE)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	889b      	ldrh	r3, [r3, #4]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d103      	bne.n	80007e2 <MCAL_SPI_GPIO_SetPins+0x86>
	{
		SCK.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80007da:	2301      	movs	r3, #1
 80007dc:	76bb      	strb	r3, [r7, #26]
		SCK.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 80007de:	2300      	movs	r3, #0
 80007e0:	76fb      	strb	r3, [r7, #27]
	}
	MCAL_GPIO_Init(&SCK);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4618      	mov	r0, r3
 80007e8:	f7ff fe28 	bl	800043c <MCAL_GPIO_Init>

	/*
	* 2) Configure MOSI Pin.
	*/
	//Check if the MOSI on the Master or Slave Device won't be configured at all first and if not, configure it as it should be.
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	889b      	ldrh	r3, [r3, #4]
 80007f0:	2b04      	cmp	r3, #4
 80007f2:	d110      	bne.n	8000816 <MCAL_SPI_GPIO_SetPins+0xba>
	{
		if(SPI_ConfigPtr->SPI_CommMode == SPI_SIMPLEX_RX_ONLY)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	88db      	ldrh	r3, [r3, #6]
 80007f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007fc:	d01f      	beq.n	800083e <MCAL_SPI_GPIO_SetPins+0xe2>
			//Do Nothing
			//MOSI on the Master Device won't be configured at all.
		}
		else
		{
			MOSI.GPIO_Mode = GPIO_MODE_AF_OUTPUT_PP;
 80007fe:	2306      	movs	r3, #6
 8000800:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			MOSI.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			MCAL_GPIO_Init(&MOSI);
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	4618      	mov	r0, r3
 8000810:	f7ff fe14 	bl	800043c <MCAL_GPIO_Init>
 8000814:	e013      	b.n	800083e <MCAL_SPI_GPIO_SetPins+0xe2>
		}
	}
	else
	{
		if(SPI_ConfigPtr->SPI_CommMode == SPI_HALF_DUPLEX || SPI_ConfigPtr->SPI_CommMode == SPI_SIMPLEX_TX_ONLY)
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	88db      	ldrh	r3, [r3, #6]
 800081a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800081e:	d00e      	beq.n	800083e <MCAL_SPI_GPIO_SetPins+0xe2>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	88db      	ldrh	r3, [r3, #6]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d00a      	beq.n	800083e <MCAL_SPI_GPIO_SetPins+0xe2>
			//Do Nothing
			//MOSI on the Slave Device won't be configured at all.
		}
		else
		{
			MOSI.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000828:	2301      	movs	r3, #1
 800082a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			MOSI.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 800082e:	2300      	movs	r3, #0
 8000830:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			MCAL_GPIO_Init(&MOSI);
 8000834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fdff 	bl	800043c <MCAL_GPIO_Init>

	/*
	* 3) Configure MISO Pin.
	*/
	//Check if the MISO on the Master or Slave Device won't be configured at all first and if not, configure it as it should be.
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	889b      	ldrh	r3, [r3, #4]
 8000842:	2b04      	cmp	r3, #4
 8000844:	d114      	bne.n	8000870 <MCAL_SPI_GPIO_SetPins+0x114>
	{
		if(SPI_ConfigPtr->SPI_CommMode == SPI_HALF_DUPLEX || SPI_ConfigPtr->SPI_CommMode == SPI_SIMPLEX_TX_ONLY)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	88db      	ldrh	r3, [r3, #6]
 800084a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800084e:	d01f      	beq.n	8000890 <MCAL_SPI_GPIO_SetPins+0x134>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	88db      	ldrh	r3, [r3, #6]
 8000854:	2b04      	cmp	r3, #4
 8000856:	d01b      	beq.n	8000890 <MCAL_SPI_GPIO_SetPins+0x134>
			//Do Nothing
			//MISO on the Master Device won't be configured at all.
		}
		else
		{
			MISO.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000858:	2301      	movs	r3, #1
 800085a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			MISO.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 800085e:	2300      	movs	r3, #0
 8000860:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			MCAL_GPIO_Init(&MISO);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fde7 	bl	800043c <MCAL_GPIO_Init>
 800086e:	e00f      	b.n	8000890 <MCAL_SPI_GPIO_SetPins+0x134>
		}
	}
	else
	{
		if(SPI_ConfigPtr->SPI_CommMode == SPI_SIMPLEX_RX_ONLY)
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	88db      	ldrh	r3, [r3, #6]
 8000874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000878:	d00a      	beq.n	8000890 <MCAL_SPI_GPIO_SetPins+0x134>
			//Do Nothing
			//MISO on the Slave Device won't be configured at all.
		}
		else
		{
			MISO.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800087a:	2301      	movs	r3, #1
 800087c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			MISO.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 8000880:	2300      	movs	r3, #0
 8000882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			MCAL_GPIO_Init(&MISO);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fdd6 	bl	800043c <MCAL_GPIO_Init>
	}

	/*
	* 4) Configure NSS Pin.
	*/
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	889b      	ldrh	r3, [r3, #4]
 8000894:	2b04      	cmp	r3, #4
 8000896:	d11b      	bne.n	80008d0 <MCAL_SPI_GPIO_SetPins+0x174>
	{
		if(SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_MASTER_OE)
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	8a1b      	ldrh	r3, [r3, #16]
 800089c:	2b04      	cmp	r3, #4
 800089e:	d109      	bne.n	80008b4 <MCAL_SPI_GPIO_SetPins+0x158>
		{
			NSS.GPIO_Mode = GPIO_MODE_AF_OUTPUT_PP;
 80008a0:	2306      	movs	r3, #6
 80008a2:	74bb      	strb	r3, [r7, #18]
			NSS.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 80008a4:	2301      	movs	r3, #1
 80008a6:	74fb      	strb	r3, [r7, #19]
			MCAL_GPIO_Init(&NSS);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fdc5 	bl	800043c <MCAL_GPIO_Init>
 80008b2:	e01a      	b.n	80008ea <MCAL_SPI_GPIO_SetPins+0x18e>
		}
		else if(SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_MASTER_OD)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	8a1b      	ldrh	r3, [r3, #16]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d116      	bne.n	80008ea <MCAL_SPI_GPIO_SetPins+0x18e>
		{
			NSS.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80008bc:	2301      	movs	r3, #1
 80008be:	74bb      	strb	r3, [r7, #18]
			NSS.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	74fb      	strb	r3, [r7, #19]
			MCAL_GPIO_Init(&NSS);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fdb7 	bl	800043c <MCAL_GPIO_Init>
 80008ce:	e00c      	b.n	80008ea <MCAL_SPI_GPIO_SetPins+0x18e>
		}
	}
	else
	{
		if(SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_SLAVE)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	8a1b      	ldrh	r3, [r3, #16]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d108      	bne.n	80008ea <MCAL_SPI_GPIO_SetPins+0x18e>
		{
			NSS.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80008d8:	2301      	movs	r3, #1
 80008da:	74bb      	strb	r3, [r7, #18]
			NSS.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 80008dc:	2300      	movs	r3, #0
 80008de:	74fb      	strb	r3, [r7, #19]
			MCAL_GPIO_Init(&NSS);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fda9 	bl	800043c <MCAL_GPIO_Init>
		}
	}
	g_NSS_Pin[NSS_Index] = NSS;
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <MCAL_SPI_GPIO_SetPins+0x1b8>)
 80008ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	4413      	add	r3, r2
 80008f2:	f107 020c 	add.w	r2, r7, #12
 80008f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008fa:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80008fe:	bf00      	nop
 8000900:	3730      	adds	r7, #48	; 0x30
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40013000 	.word	0x40013000
 800090c:	40010800 	.word	0x40010800
 8000910:	40010c00 	.word	0x40010c00
 8000914:	2000001c 	.word	0x2000001c

08000918 <MCAL_SPI_Transmit>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_SPI_Transmit(SPI_Config_t* SPI_ConfigPtr, uint16_t* pTxBuffer, SPI_Polling_Mechanism_t Polling_Status){
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	4613      	mov	r3, r2
 8000924:	71fb      	strb	r3, [r7, #7]

	//Check for Polling_Status
	if(Polling_Status == SPI_Polling_Enable)
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d107      	bne.n	800093c <MCAL_SPI_Transmit+0x24>
		//wait for transmit data register to be empty
		while( ! ( (SPI_ConfigPtr->SPIx->SR) & (1<<1) ) );
 800092c:	bf00      	nop
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	f003 0302 	and.w	r3, r3, #2
 8000938:	2b00      	cmp	r3, #0
 800093a:	d0f8      	beq.n	800092e <MCAL_SPI_Transmit+0x16>

	//Check if Half-Duplex Mode was configured
	if (SPI_ConfigPtr->SPI_CommMode == SPI_HALF_DUPLEX)
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	88db      	ldrh	r3, [r3, #6]
 8000940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000944:	d11f      	bne.n	8000986 <MCAL_SPI_Transmit+0x6e>
	{
		while(READ_BIT(SPI_ConfigPtr->SPIx->SR,7));
 8000946:	bf00      	nop
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000952:	2b00      	cmp	r3, #0
 8000954:	d1f8      	bne.n	8000948 <MCAL_SPI_Transmit+0x30>
		CLEAR_BIT(SPI_ConfigPtr->SPIx->CR1,6);
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000964:	601a      	str	r2, [r3, #0]
		SET_BIT(SPI_ConfigPtr->SPIx->CR1,14);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000974:	601a      	str	r2, [r3, #0]
		SET_BIT(SPI_ConfigPtr->SPIx->CR1,6);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000984:	601a      	str	r2, [r3, #0]
	}
	//Send the data to the Tx Buffer
	SPI_ConfigPtr->SPIx->DR = (*pTxBuffer);
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	881a      	ldrh	r2, [r3, #0]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	60da      	str	r2, [r3, #12]

}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr

0800099a <MCAL_SPI_Receive>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_SPI_Receive(SPI_Config_t* SPI_ConfigPtr, uint16_t* pTxBuffer, SPI_Polling_Mechanism_t Polling_Status){
 800099a:	b480      	push	{r7}
 800099c:	b085      	sub	sp, #20
 800099e:	af00      	add	r7, sp, #0
 80009a0:	60f8      	str	r0, [r7, #12]
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	4613      	mov	r3, r2
 80009a6:	71fb      	strb	r3, [r7, #7]

	//Check for Polling_Status
	if(Polling_Status == SPI_Polling_Enable)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	2b01      	cmp	r3, #1
 80009ac:	d107      	bne.n	80009be <MCAL_SPI_Receive+0x24>
		//wait for receive data register to be empty
		while( ! ( (SPI_ConfigPtr->SPIx->SR) & (1<<0) ) );
 80009ae:	bf00      	nop
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d0f8      	beq.n	80009b0 <MCAL_SPI_Receive+0x16>

	//Check if Half-Duplex Mode was configured
	if (SPI_ConfigPtr->SPI_CommMode == SPI_HALF_DUPLEX)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	88db      	ldrh	r3, [r3, #6]
 80009c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009c6:	d11f      	bne.n	8000a08 <MCAL_SPI_Receive+0x6e>
	{
		while(READ_BIT(SPI_ConfigPtr->SPIx->SR,7));
 80009c8:	bf00      	nop
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	689b      	ldr	r3, [r3, #8]
 80009d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d1f8      	bne.n	80009ca <MCAL_SPI_Receive+0x30>
		CLEAR_BIT(SPI_ConfigPtr->SPIx->CR1,6);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80009e6:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(SPI_ConfigPtr->SPIx->CR1,14);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80009f6:	601a      	str	r2, [r3, #0]
		SET_BIT(SPI_ConfigPtr->SPIx->CR1,6);
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a06:	601a      	str	r2, [r3, #0]
	}
	//Send the data to the Tx Buffer
	(*pTxBuffer) = (uint16_t)SPI_ConfigPtr->SPIx->DR;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	801a      	strh	r2, [r3, #0]

}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr

08000a1e <MCAL_SPI_TX_RX>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock.
*
*/
void MCAL_SPI_TX_RX(SPI_Config_t* SPI_ConfigPtr, uint16_t* pTxBuffer, SPI_Polling_Mechanism_t Polling_Status){
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b084      	sub	sp, #16
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	60f8      	str	r0, [r7, #12]
 8000a26:	60b9      	str	r1, [r7, #8]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	71fb      	strb	r3, [r7, #7]

	//Transmit Data
	MCAL_SPI_Transmit(SPI_ConfigPtr,pTxBuffer,Polling_Status);
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	68b9      	ldr	r1, [r7, #8]
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff ff70 	bl	8000918 <MCAL_SPI_Transmit>
	//Then Receive Data
	MCAL_SPI_Receive(SPI_ConfigPtr,pTxBuffer,Polling_Status);
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68b9      	ldr	r1, [r7, #8]
 8000a3e:	68f8      	ldr	r0, [r7, #12]
 8000a40:	f7ff ffab 	bl	800099a <MCAL_SPI_Receive>

}
 8000a44:	bf00      	nop
 8000a46:	3710      	adds	r7, #16
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <MCAL_SPI_sendString>:
*
* Note				- Supports polling technique only - cannot be used with interrupts.
*
*/
void MCAL_SPI_sendString(SPI_Config_t* SPI_ConfigPtr, uint8_t* Str)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]

	uint8_t i = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	73fb      	strb	r3, [r7, #15]
	uint16_t DataTemp;
	while(Str[i] != '\0')
 8000a5a:	e00f      	b.n	8000a7c <MCAL_SPI_sendString+0x30>
	{
		DataTemp = Str[i];
 8000a5c:	7bfb      	ldrb	r3, [r7, #15]
 8000a5e:	683a      	ldr	r2, [r7, #0]
 8000a60:	4413      	add	r3, r2
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	81bb      	strh	r3, [r7, #12]
		MCAL_SPI_TX_RX(SPI_ConfigPtr,&DataTemp,SPI_Polling_Enable);
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	4619      	mov	r1, r3
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ffd4 	bl	8000a1e <MCAL_SPI_TX_RX>
		i++;
 8000a76:	7bfb      	ldrb	r3, [r7, #15]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	73fb      	strb	r3, [r7, #15]
	while(Str[i] != '\0')
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
 8000a7e:	683a      	ldr	r2, [r7, #0]
 8000a80:	4413      	add	r3, r2
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d1e9      	bne.n	8000a5c <MCAL_SPI_sendString+0x10>
	}
	return;
 8000a88:	bf00      	nop

}
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SPI1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void SPI1_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000a94:	4b02      	ldr	r3, [pc, #8]	; (8000aa0 <SPI1_IRQHandler+0x10>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4798      	blx	r3
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000002c 	.word	0x2000002c

08000aa4 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8000aa8:	4b02      	ldr	r3, [pc, #8]	; (8000ab4 <SPI2_IRQHandler+0x10>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	4798      	blx	r3
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000002c 	.word	0x2000002c

08000ab8 <USART1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void USART1_IRQHandler(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000abc:	4b02      	ldr	r3, [pc, #8]	; (8000ac8 <USART1_IRQHandler+0x10>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4798      	blx	r3
}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000034 	.word	0x20000034

08000acc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8000ad0:	4b02      	ldr	r3, [pc, #8]	; (8000adc <USART2_IRQHandler+0x10>)
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	4798      	blx	r3
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000034 	.word	0x20000034

08000ae0 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 8000ae4:	4b02      	ldr	r3, [pc, #8]	; (8000af0 <USART3_IRQHandler+0x10>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	4798      	blx	r3
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000034 	.word	0x20000034

08000af4 <main>:

void setup(void);
void WaitForSlaveSetup(void);

int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	setup();
 8000af8:	f000 f816 	bl	8000b28 <setup>


	#ifdef MCU_Act_As_Master
		WaitForSlaveSetup();
 8000afc:	f000 f85c 	bl	8000bb8 <WaitForSlaveSetup>
		MCAL_GPIO_WritePin(&nss1, GPIO_PIN_CLEAR);
 8000b00:	2100      	movs	r1, #0
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <main+0x28>)
 8000b04:	f7ff fd78 	bl	80005f8 <MCAL_GPIO_WritePin>
		MCAL_SPI_sendString(&spi1,"I am Micro1 ;)#");
 8000b08:	4905      	ldr	r1, [pc, #20]	; (8000b20 <main+0x2c>)
 8000b0a:	4806      	ldr	r0, [pc, #24]	; (8000b24 <main+0x30>)
 8000b0c:	f7ff ff9e 	bl	8000a4c <MCAL_SPI_sendString>
		MCAL_GPIO_WritePin(&nss1, GPIO_PIN_SET);
 8000b10:	2101      	movs	r1, #1
 8000b12:	4802      	ldr	r0, [pc, #8]	; (8000b1c <main+0x28>)
 8000b14:	f7ff fd70 	bl	80005f8 <MCAL_GPIO_WritePin>
			HAL_LCD_WriteString(Buffer);
			PrintFlag = 0;
		}
	#endif

    while(1)
 8000b18:	e7fe      	b.n	8000b18 <main+0x24>
 8000b1a:	bf00      	nop
 8000b1c:	20000070 	.word	0x20000070
 8000b20:	08000ca4 	.word	0x08000ca4
 8000b24:	20000078 	.word	0x20000078

08000b28 <setup>:
//==================================================================================================================================//
//==================================================================================================================================//
//==================================================================================================================================//

void setup(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	//Common Configuration for master & slave
	spi1.SPIx = SPI1;
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <setup+0x80>)
 8000b2e:	4a1f      	ldr	r2, [pc, #124]	; (8000bac <setup+0x84>)
 8000b30:	601a      	str	r2, [r3, #0]
	spi1.SPI_ClkPhase = SPI_2ND_EDGE_CAPTURE_STROBE;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <setup+0x80>)
 8000b34:	2201      	movs	r2, #1
 8000b36:	81da      	strh	r2, [r3, #14]
	spi1.SPI_ClkPolarity = SPI_CLOCK_IDLE_HIGH;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <setup+0x80>)
 8000b3a:	2202      	movs	r2, #2
 8000b3c:	819a      	strh	r2, [r3, #12]
	spi1.SPI_DataSize = SPI_DATA_SIZE_8;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <setup+0x80>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	815a      	strh	r2, [r3, #10]
	spi1.SPI_FrameFormat = SPI_FRAME_FORMAT_MSB;
 8000b44:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <setup+0x80>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	811a      	strh	r2, [r3, #8]
	spi1.SPI_PreScaler = SPI_PRESCALER_DIVISOR_8;
 8000b4a:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <setup+0x80>)
 8000b4c:	2210      	movs	r2, #16
 8000b4e:	825a      	strh	r2, [r3, #18]


#ifdef MCU_Act_As_Master
	spi1.SPI_CommMode = SPI_FULL_DUPLEX;
 8000b50:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <setup+0x80>)
 8000b52:	2202      	movs	r2, #2
 8000b54:	80da      	strh	r2, [r3, #6]
	spi1.SPI_Mode = SPI_MODE_MASTER;
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <setup+0x80>)
 8000b58:	2204      	movs	r2, #4
 8000b5a:	809a      	strh	r2, [r3, #4]
	spi1.SPI_SlaveSelect = SPI_SS_SOFTWARE_SET;
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <setup+0x80>)
 8000b5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b62:	821a      	strh	r2, [r3, #16]
	spi1.SPI_IRQ_EN = SPI_IE_DISABLE;
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <setup+0x80>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	829a      	strh	r2, [r3, #20]
	spi1.IRQ_CallBackPtr = NULL_PTR;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ba8 <setup+0x80>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
	//Slave Select pin cofiguration
	nss1.GPIO_Port = GPIOA;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <setup+0x88>)
 8000b72:	4a10      	ldr	r2, [pc, #64]	; (8000bb4 <setup+0x8c>)
 8000b74:	601a      	str	r2, [r3, #0]
	nss1.GPIO_PinNo = GPIO_PIN_4;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <setup+0x88>)
 8000b78:	2210      	movs	r2, #16
 8000b7a:	809a      	strh	r2, [r3, #4]
	nss1.GPIO_Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <setup+0x88>)
 8000b7e:	2204      	movs	r2, #4
 8000b80:	719a      	strb	r2, [r3, #6]
	nss1.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <setup+0x88>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	71da      	strb	r2, [r3, #7]
	MCAL_GPIO_Init(&nss1);
 8000b88:	4809      	ldr	r0, [pc, #36]	; (8000bb0 <setup+0x88>)
 8000b8a:	f7ff fc57 	bl	800043c <MCAL_GPIO_Init>
	MCAL_GPIO_WritePin(&nss1, GPIO_PIN_SET);
 8000b8e:	2101      	movs	r1, #1
 8000b90:	4807      	ldr	r0, [pc, #28]	; (8000bb0 <setup+0x88>)
 8000b92:	f7ff fd31 	bl	80005f8 <MCAL_GPIO_WritePin>
	spi1.IRQ_CallBackPtr = NULL_PTR;
	//MCAL_GPIO_Init(&led);
	HAL_LCD_Init();
#endif

	MCAL_SPI_Init(&spi1);
 8000b96:	4804      	ldr	r0, [pc, #16]	; (8000ba8 <setup+0x80>)
 8000b98:	f7ff fd48 	bl	800062c <MCAL_SPI_Init>
	MCAL_SPI_GPIO_SetPins(&spi1);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <setup+0x80>)
 8000b9e:	f7ff fddd 	bl	800075c <MCAL_SPI_GPIO_SetPins>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000078 	.word	0x20000078
 8000bac:	40013000 	.word	0x40013000
 8000bb0:	20000070 	.word	0x20000070
 8000bb4:	40010800 	.word	0x40010800

08000bb8 <WaitForSlaveSetup>:


void WaitForSlaveSetup(void){
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
	for(int i=0;i<550;i++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	e00b      	b.n	8000bdc <WaitForSlaveSetup+0x24>
		for(int i=0;i<255;i++);
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	e002      	b.n	8000bd0 <WaitForSlaveSetup+0x18>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2bfe      	cmp	r3, #254	; 0xfe
 8000bd4:	ddf9      	ble.n	8000bca <WaitForSlaveSetup+0x12>
	for(int i=0;i<550;i++)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f240 2225 	movw	r2, #549	; 0x225
 8000be2:	4293      	cmp	r3, r2
 8000be4:	ddee      	ble.n	8000bc4 <WaitForSlaveSetup+0xc>
}
 8000be6:	bf00      	nop
 8000be8:	370c      	adds	r7, #12
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bf4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	; (8000c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <LoopForever+0xe>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	; (8000c3c <LoopForever+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c1e:	f000 f811 	bl	8000c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c22:	f7ff ff67 	bl	8000af4 <main>

08000c26 <LoopForever>:

LoopForever:
    b LoopForever
 8000c26:	e7fe      	b.n	8000c26 <LoopForever>
  ldr   r0, =_estack
 8000c28:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c34:	08000cbc 	.word	0x08000cbc
  ldr r2, =_sbss
 8000c38:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c3c:	20000094 	.word	0x20000094

08000c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_2_IRQHandler>
	...

08000c44 <__libc_init_array>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	2500      	movs	r5, #0
 8000c48:	4e0c      	ldr	r6, [pc, #48]	; (8000c7c <__libc_init_array+0x38>)
 8000c4a:	4c0d      	ldr	r4, [pc, #52]	; (8000c80 <__libc_init_array+0x3c>)
 8000c4c:	1ba4      	subs	r4, r4, r6
 8000c4e:	10a4      	asrs	r4, r4, #2
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	d109      	bne.n	8000c68 <__libc_init_array+0x24>
 8000c54:	f000 f81a 	bl	8000c8c <_init>
 8000c58:	2500      	movs	r5, #0
 8000c5a:	4e0a      	ldr	r6, [pc, #40]	; (8000c84 <__libc_init_array+0x40>)
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	; (8000c88 <__libc_init_array+0x44>)
 8000c5e:	1ba4      	subs	r4, r4, r6
 8000c60:	10a4      	asrs	r4, r4, #2
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d105      	bne.n	8000c72 <__libc_init_array+0x2e>
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
 8000c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c6c:	4798      	blx	r3
 8000c6e:	3501      	adds	r5, #1
 8000c70:	e7ee      	b.n	8000c50 <__libc_init_array+0xc>
 8000c72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c76:	4798      	blx	r3
 8000c78:	3501      	adds	r5, #1
 8000c7a:	e7f2      	b.n	8000c62 <__libc_init_array+0x1e>
 8000c7c:	08000cb4 	.word	0x08000cb4
 8000c80:	08000cb4 	.word	0x08000cb4
 8000c84:	08000cb4 	.word	0x08000cb4
 8000c88:	08000cb8 	.word	0x08000cb8

08000c8c <_init>:
 8000c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8e:	bf00      	nop
 8000c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c92:	bc08      	pop	{r3}
 8000c94:	469e      	mov	lr, r3
 8000c96:	4770      	bx	lr

08000c98 <_fini>:
 8000c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9a:	bf00      	nop
 8000c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9e:	bc08      	pop	{r3}
 8000ca0:	469e      	mov	lr, r3
 8000ca2:	4770      	bx	lr
