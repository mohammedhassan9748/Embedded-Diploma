
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b64  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08000c94  08000c94  00010c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d0c  08000d0c  00010d14  2**0
                  CONTENTS
  4 .ARM          00000000  08000d0c  08000d0c  00010d14  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d0c  08000d14  00010d14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d0c  08000d0c  00010d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d10  08000d10  00010d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  20000000  08000d14  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08000d14  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010d14  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000137a  00000000  00000000  00010d3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000065e  00000000  00000000  000120b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009c2  00000000  00000000  00012715  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001c0  00000000  00000000  000130d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000168  00000000  00000000  00013298  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000748  00000000  00000000  00013400  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000952  00000000  00000000  00013b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007685  00000000  00000000  0001449a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001bb1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000054c  00000000  00000000  0001bb9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c7c 	.word	0x08000c7c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c7c 	.word	0x08000c7c

08000170 <EXTI0_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3

}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); g_IRQ_CallBackPtr[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); g_IRQ_CallBackPtr[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); g_IRQ_CallBackPtr[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); g_IRQ_CallBackPtr[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); g_IRQ_CallBackPtr[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000001c 	.word	0x2000001c

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); g_IRQ_CallBackPtr[10]();}
 80002d0:	4b26      	ldr	r3, [pc, #152]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b23      	ldr	r3, [pc, #140]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a22      	ldr	r2, [pc, #136]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b21      	ldr	r3, [pc, #132]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); g_IRQ_CallBackPtr[11]();}
 80002ee:	4b1f      	ldr	r3, [pc, #124]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b1c      	ldr	r3, [pc, #112]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a1b      	ldr	r2, [pc, #108]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); g_IRQ_CallBackPtr[12]();}
 800030c:	4b17      	ldr	r3, [pc, #92]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b14      	ldr	r3, [pc, #80]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a13      	ldr	r2, [pc, #76]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); g_IRQ_CallBackPtr[13]();}
 800032a:	4b10      	ldr	r3, [pc, #64]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a0c      	ldr	r2, [pc, #48]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); g_IRQ_CallBackPtr[14]();}
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010400 	.word	0x40010400
 8000370:	2000001c 	.word	0x2000001c

08000374 <Get_CRx_Position>:
/*================================================================
 * Description :
 * Private Function to get the 4 bits position required to configure of the CRx register according to the  pin number
 * of the specified GPIO_PinConfigPtr
 */
static uint8_t Get_CRx_Position(uint16_t PinNumber){
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	80fb      	strh	r3, [r7, #6]
	//Case PinNumber < GPIO_PIN_8
	switch(PinNumber){
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	2b80      	cmp	r3, #128	; 0x80
 8000382:	d042      	beq.n	800040a <Get_CRx_Position+0x96>
 8000384:	2b80      	cmp	r3, #128	; 0x80
 8000386:	dc11      	bgt.n	80003ac <Get_CRx_Position+0x38>
 8000388:	2b08      	cmp	r3, #8
 800038a:	d036      	beq.n	80003fa <Get_CRx_Position+0x86>
 800038c:	2b08      	cmp	r3, #8
 800038e:	dc06      	bgt.n	800039e <Get_CRx_Position+0x2a>
 8000390:	2b02      	cmp	r3, #2
 8000392:	d02e      	beq.n	80003f2 <Get_CRx_Position+0x7e>
 8000394:	2b04      	cmp	r3, #4
 8000396:	d02e      	beq.n	80003f6 <Get_CRx_Position+0x82>
 8000398:	2b01      	cmp	r3, #1
 800039a:	d028      	beq.n	80003ee <Get_CRx_Position+0x7a>
 800039c:	e047      	b.n	800042e <Get_CRx_Position+0xba>
 800039e:	2b20      	cmp	r3, #32
 80003a0:	d02f      	beq.n	8000402 <Get_CRx_Position+0x8e>
 80003a2:	2b40      	cmp	r3, #64	; 0x40
 80003a4:	d02f      	beq.n	8000406 <Get_CRx_Position+0x92>
 80003a6:	2b10      	cmp	r3, #16
 80003a8:	d029      	beq.n	80003fe <Get_CRx_Position+0x8a>
 80003aa:	e040      	b.n	800042e <Get_CRx_Position+0xba>
 80003ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003b0:	d033      	beq.n	800041a <Get_CRx_Position+0xa6>
 80003b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003b6:	dc09      	bgt.n	80003cc <Get_CRx_Position+0x58>
 80003b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003bc:	d029      	beq.n	8000412 <Get_CRx_Position+0x9e>
 80003be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003c2:	d028      	beq.n	8000416 <Get_CRx_Position+0xa2>
 80003c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003c8:	d021      	beq.n	800040e <Get_CRx_Position+0x9a>
 80003ca:	e030      	b.n	800042e <Get_CRx_Position+0xba>
 80003cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003d0:	d027      	beq.n	8000422 <Get_CRx_Position+0xae>
 80003d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003d6:	dc03      	bgt.n	80003e0 <Get_CRx_Position+0x6c>
 80003d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003dc:	d01f      	beq.n	800041e <Get_CRx_Position+0xaa>
 80003de:	e026      	b.n	800042e <Get_CRx_Position+0xba>
 80003e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003e4:	d01f      	beq.n	8000426 <Get_CRx_Position+0xb2>
 80003e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003ea:	d01e      	beq.n	800042a <Get_CRx_Position+0xb6>
 80003ec:	e01f      	b.n	800042e <Get_CRx_Position+0xba>
		case GPIO_PIN_0:
			return 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	e01e      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_1:
			return 4;
 80003f2:	2304      	movs	r3, #4
 80003f4:	e01c      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_2:
			return 8;
 80003f6:	2308      	movs	r3, #8
 80003f8:	e01a      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_3:
			return 12;
 80003fa:	230c      	movs	r3, #12
 80003fc:	e018      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_4:
			return 16;
 80003fe:	2310      	movs	r3, #16
 8000400:	e016      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_5:
			return 20;
 8000402:	2314      	movs	r3, #20
 8000404:	e014      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_6:
			return 24;
 8000406:	2318      	movs	r3, #24
 8000408:	e012      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_7:
			return 28;
 800040a:	231c      	movs	r3, #28
 800040c:	e010      	b.n	8000430 <Get_CRx_Position+0xbc>

	//Case PinNumber > GPIO_PIN_7
		case GPIO_PIN_8:
			return 0;
 800040e:	2300      	movs	r3, #0
 8000410:	e00e      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_9:
			return 4;
 8000412:	2304      	movs	r3, #4
 8000414:	e00c      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_10:
			return 8;
 8000416:	2308      	movs	r3, #8
 8000418:	e00a      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_11:
			return 12;
 800041a:	230c      	movs	r3, #12
 800041c:	e008      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_12:
			return 16;
 800041e:	2310      	movs	r3, #16
 8000420:	e006      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_13:
			return 20;
 8000422:	2314      	movs	r3, #20
 8000424:	e004      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_14:
			return 24;
 8000426:	2318      	movs	r3, #24
 8000428:	e002      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_15:
			return 28;
 800042a:	231c      	movs	r3, #28
 800042c:	e000      	b.n	8000430 <Get_CRx_Position+0xbc>
	}
	return 0;
 800042e:	2300      	movs	r3, #0
}
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
	...

0800043c <MCAL_GPIO_Init>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_Init(GPIO_PinConfig_t* GPIO_PinConfigPtr){
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]

	//Check port selected to enable it's clock
	if(GPIO_PinConfigPtr->GPIO_Port == GPIOA)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a66      	ldr	r2, [pc, #408]	; (80005e4 <MCAL_GPIO_Init+0x1a8>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <MCAL_GPIO_Init+0x20>
	{
		RCC_GPIOA_CLK_EN();
 800044e:	4b66      	ldr	r3, [pc, #408]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a65      	ldr	r2, [pc, #404]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000454:	f043 0304 	orr.w	r3, r3, #4
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	e029      	b.n	80004b0 <MCAL_GPIO_Init+0x74>
	}
	else if(GPIO_PinConfigPtr->GPIO_Port == GPIOB)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a62      	ldr	r2, [pc, #392]	; (80005ec <MCAL_GPIO_Init+0x1b0>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <MCAL_GPIO_Init+0x38>
	{
		RCC_GPIOB_CLK_EN();
 8000466:	4b60      	ldr	r3, [pc, #384]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a5f      	ldr	r2, [pc, #380]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 800046c:	f043 0308 	orr.w	r3, r3, #8
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	e01d      	b.n	80004b0 <MCAL_GPIO_Init+0x74>
	}
	else if(GPIO_PinConfigPtr->GPIO_Port == GPIOC)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a5d      	ldr	r2, [pc, #372]	; (80005f0 <MCAL_GPIO_Init+0x1b4>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <MCAL_GPIO_Init+0x50>
	{
		RCC_GPIOC_CLK_EN();
 800047e:	4b5a      	ldr	r3, [pc, #360]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a59      	ldr	r2, [pc, #356]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000484:	f043 0310 	orr.w	r3, r3, #16
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	e011      	b.n	80004b0 <MCAL_GPIO_Init+0x74>
	}
	else if(GPIO_PinConfigPtr->GPIO_Port == GPIOD)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a58      	ldr	r2, [pc, #352]	; (80005f4 <MCAL_GPIO_Init+0x1b8>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <MCAL_GPIO_Init+0x68>
	{
		RCC_GPIOD_CLK_EN();
 8000496:	4b54      	ldr	r3, [pc, #336]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a53      	ldr	r2, [pc, #332]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 800049c:	f043 0320 	orr.w	r3, r3, #32
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	e005      	b.n	80004b0 <MCAL_GPIO_Init+0x74>
	}
	else
	{
		RCC_GPIOE_CLK_EN();
 80004a4:	4b50      	ldr	r3, [pc, #320]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a4f      	ldr	r2, [pc, #316]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 80004aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ae:	6193      	str	r3, [r2, #24]
	}

	//Check for alternate function mode (Input or Output) to enable it's clock
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_OUTPUT_OD)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	799b      	ldrb	r3, [r3, #6]
 80004b4:	2b05      	cmp	r3, #5
 80004b6:	d905      	bls.n	80004c4 <MCAL_GPIO_Init+0x88>
	{
		RCC_AFIO_CLK_EN();
 80004b8:	4b4b      	ldr	r3, [pc, #300]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a4a      	ldr	r2, [pc, #296]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6193      	str	r3, [r2, #24]
	}

	//Pointer holds the configuration register address either High or Low depends on PinNo
	vuint32_t* GPIO_CRx = NULL_PTR;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
	GPIO_CRx = ((GPIO_PinConfigPtr->GPIO_PinNo < GPIO_PIN_8)?&(GPIO_PinConfigPtr->GPIO_Port->CRL):&(GPIO_PinConfigPtr->GPIO_Port->CRH));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	889b      	ldrh	r3, [r3, #4]
 80004cc:	2bff      	cmp	r3, #255	; 0xff
 80004ce:	d802      	bhi.n	80004d6 <MCAL_GPIO_Init+0x9a>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	e002      	b.n	80004dc <MCAL_GPIO_Init+0xa0>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	3304      	adds	r3, #4
 80004dc:	60bb      	str	r3, [r7, #8]

	//MODE & CNF Variable (Initialized by it's default reset value)
	uint8_t PinConfig_Value = 0x4;
 80004de:	2304      	movs	r3, #4
 80004e0:	73fb      	strb	r3, [r7, #15]

	//Clear MODE & CNF
	(*GPIO_CRx) &= ~(0xF<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	889b      	ldrh	r3, [r3, #4]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff44 	bl	8000374 <Get_CRx_Position>
 80004ec:	4603      	mov	r3, r0
 80004ee:	461a      	mov	r2, r3
 80004f0:	230f      	movs	r3, #15
 80004f2:	4093      	lsls	r3, r2
 80004f4:	43da      	mvns	r2, r3
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	401a      	ands	r2, r3
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	601a      	str	r2, [r3, #0]

	//Check if pin is output
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_INPUT_PD && GPIO_PinConfigPtr->GPIO_Mode < GPIO_MODE_AF_INPUT)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	799b      	ldrb	r3, [r3, #6]
 8000504:	2b03      	cmp	r3, #3
 8000506:	d914      	bls.n	8000532 <MCAL_GPIO_Init+0xf6>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	799b      	ldrb	r3, [r3, #6]
 800050c:	2b07      	cmp	r3, #7
 800050e:	d810      	bhi.n	8000532 <MCAL_GPIO_Init+0xf6>
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]
		//Set MODE & CNF
		PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode-4)<<2) | (GPIO_PinConfigPtr->GPIO_Output_Speed)) & 0x0F;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	799b      	ldrb	r3, [r3, #6]
 8000518:	3b04      	subs	r3, #4
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	b25a      	sxtb	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	79db      	ldrb	r3, [r3, #7]
 8000522:	b25b      	sxtb	r3, r3
 8000524:	4313      	orrs	r3, r2
 8000526:	b25b      	sxtb	r3, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f003 030f 	and.w	r3, r3, #15
 800052e:	73fb      	strb	r3, [r7, #15]
 8000530:	e037      	b.n	80005a2 <MCAL_GPIO_Init+0x166>

	//Else pin is input
	else //MODE = 00: Input mode (reset state)
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	73fb      	strb	r3, [r7, #15]

		//Check if Input Analog mode or Input Floating
		if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_ANALOG || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_FLO)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	799b      	ldrb	r3, [r3, #6]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d003      	beq.n	8000546 <MCAL_GPIO_Init+0x10a>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	799b      	ldrb	r3, [r3, #6]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d107      	bne.n	8000556 <MCAL_GPIO_Init+0x11a>
		{	//Set MODE & CNF
			PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode)<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	799b      	ldrb	r3, [r3, #6]
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	b2db      	uxtb	r3, r3
 800054e:	f003 030f 	and.w	r3, r3, #15
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e025      	b.n	80005a2 <MCAL_GPIO_Init+0x166>
		}

		//Check if Input with pull-up or Input with pull-down
		else if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PD)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	799b      	ldrb	r3, [r3, #6]
 800055a:	2b02      	cmp	r3, #2
 800055c:	d003      	beq.n	8000566 <MCAL_GPIO_Init+0x12a>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	799b      	ldrb	r3, [r3, #6]
 8000562:	2b03      	cmp	r3, #3
 8000564:	d11b      	bne.n	800059e <MCAL_GPIO_Init+0x162>
		{
			//Set MODE & CNF
			PinConfig_Value = ((GPIO_MODE_INPUT_PU<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 8000566:	2308      	movs	r3, #8
 8000568:	73fb      	strb	r3, [r7, #15]

			//Check if Input with pull-up
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	799b      	ldrb	r3, [r3, #6]
 800056e:	2b02      	cmp	r3, #2
 8000570:	d10a      	bne.n	8000588 <MCAL_GPIO_Init+0x14c>
			{
				//Set output data register ODR because pull up specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	889b      	ldrh	r3, [r3, #4]
 800057c:	4619      	mov	r1, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	430a      	orrs	r2, r1
 8000584:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000586:	e00c      	b.n	80005a2 <MCAL_GPIO_Init+0x166>

			//Check if Input with pull-down
			else
			{
				//Clear output data register ODR because pull down specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	68da      	ldr	r2, [r3, #12]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	889b      	ldrh	r3, [r3, #4]
 8000592:	4619      	mov	r1, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	430a      	orrs	r2, r1
 800059a:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800059c:	e001      	b.n	80005a2 <MCAL_GPIO_Init+0x166>
		}

		//Else Alternate function input
		else
		{
			PinConfig_Value = ((GPIO_MODE_INPUT_FLO<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 800059e:	2304      	movs	r3, #4
 80005a0:	73fb      	strb	r3, [r7, #15]
		}

	}

	//Write on CRx register to configure pin -> x is (H or L)
	(*GPIO_CRx) &= ~(PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 80005a2:	7bfc      	ldrb	r4, [r7, #15]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	889b      	ldrh	r3, [r3, #4]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fee3 	bl	8000374 <Get_CRx_Position>
 80005ae:	4603      	mov	r3, r0
 80005b0:	fa04 f303 	lsl.w	r3, r4, r3
 80005b4:	43da      	mvns	r2, r3
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	401a      	ands	r2, r3
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	601a      	str	r2, [r3, #0]
	(*GPIO_CRx) |= (PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 80005c0:	7bfc      	ldrb	r4, [r7, #15]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	889b      	ldrh	r3, [r3, #4]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fed4 	bl	8000374 <Get_CRx_Position>
 80005cc:	4603      	mov	r3, r0
 80005ce:	fa04 f203 	lsl.w	r2, r4, r3
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	431a      	orrs	r2, r3
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	601a      	str	r2, [r3, #0]

	return;
 80005dc:	bf00      	nop

}
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	40010800 	.word	0x40010800
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010c00 	.word	0x40010c00
 80005f0:	40011000 	.word	0x40011000
 80005f4:	40011400 	.word	0x40011400

080005f8 <MCAL_RCC_SYSCLK>:
* @retval 			- SYSCLK Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_SYSCLK(void){
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	* 00: HSI oscillator used as system clock
	* 01: HSE oscillator used as system clock
	* 10: PLL used as system clock
	* 11: Not applicable.
	*/
	switch( ( (RCC->CFGR) >> 2 ) & 0x3)
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <MCAL_RCC_SYSCLK+0x3c>)
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	089b      	lsrs	r3, r3, #2
 8000602:	f003 0303 	and.w	r3, r3, #3
 8000606:	2b03      	cmp	r3, #3
 8000608:	d810      	bhi.n	800062c <MCAL_RCC_SYSCLK+0x34>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <MCAL_RCC_SYSCLK+0x18>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	08000621 	.word	0x08000621
 8000614:	08000625 	.word	0x08000625
 8000618:	08000629 	.word	0x08000629
 800061c:	0800062d 	.word	0x0800062d
	{
		case 0:
			return HSI_CLK;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <MCAL_RCC_SYSCLK+0x40>)
 8000622:	e003      	b.n	800062c <MCAL_RCC_SYSCLK+0x34>
		case 1:
			return HSE_CLK; //To be configured by the user @Config HSE_CLK_Define
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <MCAL_RCC_SYSCLK+0x44>)
 8000626:	e001      	b.n	800062c <MCAL_RCC_SYSCLK+0x34>
		case 2:
			return 16000000; //To do later
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <MCAL_RCC_SYSCLK+0x44>)
 800062a:	e7ff      	b.n	800062c <MCAL_RCC_SYSCLK+0x34>
		case 3:
			break;
	}

}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	40021000 	.word	0x40021000
 8000638:	007a1200 	.word	0x007a1200
 800063c:	00f42400 	.word	0x00f42400

08000640 <MCAL_RCC_HCLK>:
* @retval 			- HCLK Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_HCLK(void){
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

	/*
	* HPRE[3:0]: AHB prescaler
	*/
	return (MCAL_RCC_SYSCLK() >> (g_AHB_Prescaler_Table[ (RCC->CFGR >> 4) & 0b1111 ]));
 8000644:	f7ff ffd8 	bl	80005f8 <MCAL_RCC_SYSCLK>
 8000648:	4601      	mov	r1, r0
 800064a:	4b05      	ldr	r3, [pc, #20]	; (8000660 <MCAL_RCC_HCLK+0x20>)
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	091b      	lsrs	r3, r3, #4
 8000650:	f003 030f 	and.w	r3, r3, #15
 8000654:	4a03      	ldr	r2, [pc, #12]	; (8000664 <MCAL_RCC_HCLK+0x24>)
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	fa21 f303 	lsr.w	r3, r1, r3

}
 800065c:	4618      	mov	r0, r3
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	08000cfc 	.word	0x08000cfc

08000668 <MCAL_RCC_PCLK1>:
* @retval 			- PCLK1 Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_PCLK1(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

	/*
	* PPRE1[2:0]: APB Low-speed prescaler (APB1)
	*/

	return (MCAL_RCC_HCLK() >> (g_APB_Prescaler_Table[ (RCC->CFGR >> 8) & 0b111 ]));
 800066c:	f7ff ffe8 	bl	8000640 <MCAL_RCC_HCLK>
 8000670:	4601      	mov	r1, r0
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <MCAL_RCC_PCLK1+0x20>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	0a1b      	lsrs	r3, r3, #8
 8000678:	f003 0307 	and.w	r3, r3, #7
 800067c:	4a03      	ldr	r2, [pc, #12]	; (800068c <MCAL_RCC_PCLK1+0x24>)
 800067e:	5cd3      	ldrb	r3, [r2, r3]
 8000680:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000684:	4618      	mov	r0, r3
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	08000cf4 	.word	0x08000cf4

08000690 <MCAL_RCC_PCLK2>:
* @retval 			- PCLK2 Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_PCLK2(void){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

	/*
	* PPRE2[2:0]: APB high-speed prescaler (APB2)
	*/
	return (MCAL_RCC_HCLK() >> (g_APB_Prescaler_Table[ (RCC->CFGR >> 11) & 0b111 ]));
 8000694:	f7ff ffd4 	bl	8000640 <MCAL_RCC_HCLK>
 8000698:	4601      	mov	r1, r0
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <MCAL_RCC_PCLK2+0x20>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	0adb      	lsrs	r3, r3, #11
 80006a0:	f003 0307 	and.w	r3, r3, #7
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <MCAL_RCC_PCLK2+0x24>)
 80006a6:	5cd3      	ldrb	r3, [r2, r3]
 80006a8:	fa21 f303 	lsr.w	r3, r1, r3

}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	08000cf4 	.word	0x08000cf4

080006b8 <MCAL_UART_Init>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_UART_Init(UART_Config_t* UART_ConfigPtr){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

	/*
	* 1) Enable the USART Clock according to the Channel Selected & get Clock Frequencys.
	*/
	uint32_t PCLKx;
	if(UART_ConfigPtr->USARTx == USART1)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a67      	ldr	r2, [pc, #412]	; (8000864 <MCAL_UART_Init+0x1ac>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d109      	bne.n	80006de <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 80006ca:	4b67      	ldr	r3, [pc, #412]	; (8000868 <MCAL_UART_Init+0x1b0>)
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4a66      	ldr	r2, [pc, #408]	; (8000868 <MCAL_UART_Init+0x1b0>)
 80006d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d4:	6193      	str	r3, [r2, #24]
		PCLKx = MCAL_RCC_PCLK2();
 80006d6:	f7ff ffdb 	bl	8000690 <MCAL_RCC_PCLK2>
 80006da:	61f8      	str	r0, [r7, #28]
 80006dc:	e017      	b.n	800070e <MCAL_UART_Init+0x56>
	}
	else if (UART_ConfigPtr->USARTx == USART2)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a62      	ldr	r2, [pc, #392]	; (800086c <MCAL_UART_Init+0x1b4>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d109      	bne.n	80006fc <MCAL_UART_Init+0x44>
	{
		RCC_USART2_CLK_EN();
 80006e8:	4b5f      	ldr	r3, [pc, #380]	; (8000868 <MCAL_UART_Init+0x1b0>)
 80006ea:	69db      	ldr	r3, [r3, #28]
 80006ec:	4a5e      	ldr	r2, [pc, #376]	; (8000868 <MCAL_UART_Init+0x1b0>)
 80006ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f2:	61d3      	str	r3, [r2, #28]
		PCLKx = MCAL_RCC_PCLK1();
 80006f4:	f7ff ffb8 	bl	8000668 <MCAL_RCC_PCLK1>
 80006f8:	61f8      	str	r0, [r7, #28]
 80006fa:	e008      	b.n	800070e <MCAL_UART_Init+0x56>
	}
	else
	{
		RCC_USART3_CLK_EN();
 80006fc:	4b5a      	ldr	r3, [pc, #360]	; (8000868 <MCAL_UART_Init+0x1b0>)
 80006fe:	69db      	ldr	r3, [r3, #28]
 8000700:	4a59      	ldr	r2, [pc, #356]	; (8000868 <MCAL_UART_Init+0x1b0>)
 8000702:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000706:	61d3      	str	r3, [r2, #28]
		PCLKx = MCAL_RCC_PCLK1();
 8000708:	f7ff ffae 	bl	8000668 <MCAL_RCC_PCLK1>
 800070c:	61f8      	str	r0, [r7, #28]
	}

	/*
	* 2) Enable the USART by writing the UE bit in USART_CR1 register to 1.
	*/
	UART_ConfigPtr->USARTx->CR1 |= (1<<13);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	68da      	ldr	r2, [r3, #12]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800071c:	60da      	str	r2, [r3, #12]

	/*
	* 3) Program the M bit in USART_CR1 to define the word length.
	*/
	UART_ConfigPtr->USARTx->CR1 |= UART_ConfigPtr->USART_WordLength;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68da      	ldr	r2, [r3, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7b1b      	ldrb	r3, [r3, #12]
 8000728:	4619      	mov	r1, r3
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	430a      	orrs	r2, r1
 8000730:	60da      	str	r2, [r3, #12]

	/*
	* 4) Program the number of stop bits in USART_CR2.
	*/
	UART_ConfigPtr->USARTx->CR2 |= UART_ConfigPtr->USART_StopBits;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	691a      	ldr	r2, [r3, #16]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	7b9b      	ldrb	r3, [r3, #14]
 800073c:	4619      	mov	r1, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	430a      	orrs	r2, r1
 8000744:	611a      	str	r2, [r3, #16]

	/*
	* 5) Select the desired baud rate using the baud rate register USART_BRR.
	*/
	uint32_t DIV_Mantissa = (uint16_t)(PCLKx/(16*UART_ConfigPtr->USART_BaudRate));
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	689b      	ldr	r3, [r3, #8]
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	69fa      	ldr	r2, [r7, #28]
 800074e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000752:	b29b      	uxth	r3, r3
 8000754:	61bb      	str	r3, [r7, #24]
	uint32_t DIV_Mantissa_MUL100 = DIV_Mantissa*100;
 8000756:	69bb      	ldr	r3, [r7, #24]
 8000758:	2264      	movs	r2, #100	; 0x64
 800075a:	fb02 f303 	mul.w	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]

	uint32_t DIV_Fraction_MUL100 = ((PCLKx*25)/(4*UART_ConfigPtr->USART_BaudRate)) - DIV_Mantissa_MUL100;
 8000760:	69fa      	ldr	r2, [r7, #28]
 8000762:	4613      	mov	r3, r2
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	4413      	add	r3, r2
 8000768:	009a      	lsls	r2, r3, #2
 800076a:	441a      	add	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	689b      	ldr	r3, [r3, #8]
 8000770:	009b      	lsls	r3, r3, #2
 8000772:	fbb2 f2f3 	udiv	r2, r2, r3
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	613b      	str	r3, [r7, #16]
	uint32_t  DIV_Fraction = (DIV_Fraction_MUL100*16)/100;
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	4a3b      	ldr	r2, [pc, #236]	; (8000870 <MCAL_UART_Init+0x1b8>)
 8000782:	fba2 2303 	umull	r2, r3, r2, r3
 8000786:	095b      	lsrs	r3, r3, #5
 8000788:	60fb      	str	r3, [r7, #12]

	DIV_Mantissa = DIV_Mantissa & 0xFFF;
 800078a:	69bb      	ldr	r3, [r7, #24]
 800078c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000790:	61bb      	str	r3, [r7, #24]
	DIV_Fraction = DIV_Fraction & 0xF;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f003 030f 	and.w	r3, r3, #15
 8000798:	60fb      	str	r3, [r7, #12]

	UART_ConfigPtr->USARTx->BRR |= ( (DIV_Mantissa<<4) | (DIV_Fraction) );
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	6899      	ldr	r1, [r3, #8]
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	011a      	lsls	r2, r3, #4
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	431a      	orrs	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	430a      	orrs	r2, r1
 80007ae:	609a      	str	r2, [r3, #8]

	/*
	* 6) Select the parity enable or disable and even or odd USART_CR1 register.
	*/
	UART_ConfigPtr->USARTx->CR1 |= UART_ConfigPtr->USART_Parity;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	68da      	ldr	r2, [r3, #12]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	7b5b      	ldrb	r3, [r3, #13]
 80007ba:	4619      	mov	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	430a      	orrs	r2, r1
 80007c2:	60da      	str	r2, [r3, #12]

	/*
	* 7) Enable or Disable HwFlowCtrl parity in USART_CR3 register.
	*/
	UART_ConfigPtr->USARTx->CR3 |= UART_ConfigPtr->USART_FlowControl;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	695a      	ldr	r2, [r3, #20]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7bdb      	ldrb	r3, [r3, #15]
 80007ce:	4619      	mov	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	430a      	orrs	r2, r1
 80007d6:	615a      	str	r2, [r3, #20]

	/*
	* 8) Set the TE bit (if chosen) in USART_CR1 to send an idle frame as first transmission &
	*	 Set the RE bit (if chosen) in USART_CR1. This enables the receiver which begins searching for a start bit.
	*/
	UART_ConfigPtr->USARTx->CR1 |= UART_ConfigPtr->USART_Mode;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	4619      	mov	r1, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	430a      	orrs	r2, r1
 80007ea:	60da      	str	r2, [r3, #12]

	/*
	* 9) Enable or Disable Interrupt according to the configuration & Update Interrupt Handling CallBack.
	*/
	if(UART_ConfigPtr->USART_IRQ_EN != USART_IE_DISABLE){
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7c1b      	ldrb	r3, [r3, #16]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d033      	beq.n	800085c <MCAL_UART_Init+0x1a4>

		//Enable Interrupt mask in UART
		UART_ConfigPtr->USARTx->CR1 |= UART_ConfigPtr->USART_IRQ_EN;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	68da      	ldr	r2, [r3, #12]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7c1b      	ldrb	r3, [r3, #16]
 80007fe:	4619      	mov	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	430a      	orrs	r2, r1
 8000806:	60da      	str	r2, [r3, #12]

		//Enable Interrupt mask in NVIC
		if(UART_ConfigPtr->USARTx == USART1)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a15      	ldr	r2, [pc, #84]	; (8000864 <MCAL_UART_Init+0x1ac>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d10a      	bne.n	8000828 <MCAL_UART_Init+0x170>
		{
			g_IRQ_CallBackPtr[0] = UART_ConfigPtr->IRQ_CallBackPtr;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a17      	ldr	r2, [pc, #92]	; (8000874 <MCAL_UART_Init+0x1bc>)
 8000818:	6013      	str	r3, [r2, #0]
			NVIC_IRQ37_EN();
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MCAL_UART_Init+0x1c0>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a16      	ldr	r2, [pc, #88]	; (8000878 <MCAL_UART_Init+0x1c0>)
 8000820:	f043 0320 	orr.w	r3, r3, #32
 8000824:	6013      	str	r3, [r2, #0]
			g_IRQ_CallBackPtr[2] = UART_ConfigPtr->IRQ_CallBackPtr;
			NVIC_IRQ39_EN();
		}
	}

}
 8000826:	e019      	b.n	800085c <MCAL_UART_Init+0x1a4>
		else if (UART_ConfigPtr->USARTx == USART2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a0f      	ldr	r2, [pc, #60]	; (800086c <MCAL_UART_Init+0x1b4>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d10a      	bne.n	8000848 <MCAL_UART_Init+0x190>
			g_IRQ_CallBackPtr[1] = UART_ConfigPtr->IRQ_CallBackPtr;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a0f      	ldr	r2, [pc, #60]	; (8000874 <MCAL_UART_Init+0x1bc>)
 8000838:	6053      	str	r3, [r2, #4]
			NVIC_IRQ38_EN();
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MCAL_UART_Init+0x1c0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <MCAL_UART_Init+0x1c0>)
 8000840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000844:	6013      	str	r3, [r2, #0]
}
 8000846:	e009      	b.n	800085c <MCAL_UART_Init+0x1a4>
			g_IRQ_CallBackPtr[2] = UART_ConfigPtr->IRQ_CallBackPtr;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	695b      	ldr	r3, [r3, #20]
 800084c:	4a09      	ldr	r2, [pc, #36]	; (8000874 <MCAL_UART_Init+0x1bc>)
 800084e:	6093      	str	r3, [r2, #8]
			NVIC_IRQ39_EN();
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MCAL_UART_Init+0x1c0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a08      	ldr	r2, [pc, #32]	; (8000878 <MCAL_UART_Init+0x1c0>)
 8000856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085a:	6013      	str	r3, [r2, #0]
}
 800085c:	bf00      	nop
 800085e:	3720      	adds	r7, #32
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40013800 	.word	0x40013800
 8000868:	40021000 	.word	0x40021000
 800086c:	40004400 	.word	0x40004400
 8000870:	51eb851f 	.word	0x51eb851f
 8000874:	2000001c 	.word	0x2000001c
 8000878:	e000e104 	.word	0xe000e104

0800087c <MCAL_UART_GPIO_SetPins>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_UART_GPIO_SetPins(UART_Config_t* UART_ConfigPtr){
 800087c:	b580      	push	{r7, lr}
 800087e:	b09a      	sub	sp, #104	; 0x68
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

	//Check if USARTx is USART1
	if(UART_ConfigPtr->USARTx == USART1){
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a73      	ldr	r2, [pc, #460]	; (8000a58 <MCAL_UART_GPIO_SetPins+0x1dc>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d149      	bne.n	8000922 <MCAL_UART_GPIO_SetPins+0xa6>

		// PA9  --> TX
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_TX))
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	f003 0308 	and.w	r3, r3, #8
 8000896:	2b00      	cmp	r3, #0
 8000898:	d00b      	beq.n	80008b2 <MCAL_UART_GPIO_SetPins+0x36>
		{
			// GPIO Configuration: Alternate function push-pull
			GPIO_PinConfig_t Tx1 = {GPIOA, GPIO_PIN_9, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 800089a:	4a70      	ldr	r2, [pc, #448]	; (8000a5c <MCAL_UART_GPIO_SetPins+0x1e0>)
 800089c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008a4:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tx1);
 80008a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fdc5 	bl	800043c <MCAL_GPIO_Init>
		}

		// PA10 --> RX
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_RX)){
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	791b      	ldrb	r3, [r3, #4]
 80008b6:	f003 0304 	and.w	r3, r3, #4
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d00b      	beq.n	80008d6 <MCAL_UART_GPIO_SetPins+0x5a>
			// GPIO Configuration: Alternate function Input Floating
			GPIO_PinConfig_t Rx1 = {GPIOA, GPIO_PIN_10, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 80008be:	4a68      	ldr	r2, [pc, #416]	; (8000a60 <MCAL_UART_GPIO_SetPins+0x1e4>)
 80008c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008c8:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Rx1);
 80008cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008d0:	4618      	mov	r0, r3
 80008d2:	f7ff fdb3 	bl	800043c <MCAL_GPIO_Init>
		}

		// PA11 --> CTS
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_CTS)){
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	791b      	ldrb	r3, [r3, #4]
 80008da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d00b      	beq.n	80008fa <MCAL_UART_GPIO_SetPins+0x7e>
			// GPIO Configuration: Alternate function push-pull
			GPIO_PinConfig_t cts1 = {GPIOA, GPIO_PIN_11, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 80008e2:	4a60      	ldr	r2, [pc, #384]	; (8000a64 <MCAL_UART_GPIO_SetPins+0x1e8>)
 80008e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008ec:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&cts1);
 80008f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fda1 	bl	800043c <MCAL_GPIO_Init>
		}

		// PA12 --> RTS
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_RTS)){
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	791b      	ldrb	r3, [r3, #4]
 80008fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000902:	2b00      	cmp	r3, #0
 8000904:	f000 80a3 	beq.w	8000a4e <MCAL_UART_GPIO_SetPins+0x1d2>
			// GPIO Configuration: Alternate function Input Floating
			GPIO_PinConfig_t rts1 = {GPIOA, GPIO_PIN_12, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000908:	4a57      	ldr	r2, [pc, #348]	; (8000a68 <MCAL_UART_GPIO_SetPins+0x1ec>)
 800090a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800090e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000912:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&rts1);
 8000916:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fd8e 	bl	800043c <MCAL_GPIO_Init>
			MCAL_GPIO_Init(&rts3);
		}

	}

}
 8000920:	e095      	b.n	8000a4e <MCAL_UART_GPIO_SetPins+0x1d2>
	else if(UART_ConfigPtr->USARTx == USART2)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a51      	ldr	r2, [pc, #324]	; (8000a6c <MCAL_UART_GPIO_SetPins+0x1f0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d148      	bne.n	80009be <MCAL_UART_GPIO_SetPins+0x142>
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_TX))
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	791b      	ldrb	r3, [r3, #4]
 8000930:	f003 0308 	and.w	r3, r3, #8
 8000934:	2b00      	cmp	r3, #0
 8000936:	d00b      	beq.n	8000950 <MCAL_UART_GPIO_SetPins+0xd4>
			GPIO_PinConfig_t Tx2 = {GPIOA, GPIO_PIN_2, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000938:	4a4d      	ldr	r2, [pc, #308]	; (8000a70 <MCAL_UART_GPIO_SetPins+0x1f4>)
 800093a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800093e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000942:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tx2);
 8000946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fd76 	bl	800043c <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_RX)){
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	791b      	ldrb	r3, [r3, #4]
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	2b00      	cmp	r3, #0
 800095a:	d00b      	beq.n	8000974 <MCAL_UART_GPIO_SetPins+0xf8>
			GPIO_PinConfig_t Rx2 = {GPIOA, GPIO_PIN_3, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 800095c:	4a45      	ldr	r2, [pc, #276]	; (8000a74 <MCAL_UART_GPIO_SetPins+0x1f8>)
 800095e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000962:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000966:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Rx2);
 800096a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff fd64 	bl	800043c <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_CTS)){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800097c:	2b00      	cmp	r3, #0
 800097e:	d00b      	beq.n	8000998 <MCAL_UART_GPIO_SetPins+0x11c>
			GPIO_PinConfig_t cts2 = {GPIOA, GPIO_PIN_0, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000980:	4a3d      	ldr	r2, [pc, #244]	; (8000a78 <MCAL_UART_GPIO_SetPins+0x1fc>)
 8000982:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000986:	e892 0003 	ldmia.w	r2, {r0, r1}
 800098a:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&cts2);
 800098e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fd52 	bl	800043c <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_RTS)){
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	791b      	ldrb	r3, [r3, #4]
 800099c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d054      	beq.n	8000a4e <MCAL_UART_GPIO_SetPins+0x1d2>
			GPIO_PinConfig_t rts2 = {GPIOA, GPIO_PIN_1, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 80009a4:	4a35      	ldr	r2, [pc, #212]	; (8000a7c <MCAL_UART_GPIO_SetPins+0x200>)
 80009a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ae:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&rts2);
 80009b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff fd40 	bl	800043c <MCAL_GPIO_Init>
}
 80009bc:	e047      	b.n	8000a4e <MCAL_UART_GPIO_SetPins+0x1d2>
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_TX))
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	791b      	ldrb	r3, [r3, #4]
 80009c2:	f003 0308 	and.w	r3, r3, #8
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d00b      	beq.n	80009e2 <MCAL_UART_GPIO_SetPins+0x166>
			GPIO_PinConfig_t Tx3 = {GPIOB, GPIO_PIN_10, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 80009ca:	4a2d      	ldr	r2, [pc, #180]	; (8000a80 <MCAL_UART_GPIO_SetPins+0x204>)
 80009cc:	f107 0320 	add.w	r3, r7, #32
 80009d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d4:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tx3);
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4618      	mov	r0, r3
 80009de:	f7ff fd2d 	bl	800043c <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_RX)){
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	791b      	ldrb	r3, [r3, #4]
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d00b      	beq.n	8000a06 <MCAL_UART_GPIO_SetPins+0x18a>
			GPIO_PinConfig_t Rx3 = {GPIOB, GPIO_PIN_11, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 80009ee:	4a25      	ldr	r2, [pc, #148]	; (8000a84 <MCAL_UART_GPIO_SetPins+0x208>)
 80009f0:	f107 0318 	add.w	r3, r7, #24
 80009f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009f8:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Rx3);
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fd1b 	bl	800043c <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_CTS)){
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	791b      	ldrb	r3, [r3, #4]
 8000a0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00b      	beq.n	8000a2a <MCAL_UART_GPIO_SetPins+0x1ae>
			GPIO_PinConfig_t cts3 = {GPIOB, GPIO_PIN_13, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000a12:	4a1d      	ldr	r2, [pc, #116]	; (8000a88 <MCAL_UART_GPIO_SetPins+0x20c>)
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1c:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&cts3);
 8000a20:	f107 0310 	add.w	r3, r7, #16
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fd09 	bl	800043c <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_RTS)){
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	791b      	ldrb	r3, [r3, #4]
 8000a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d00b      	beq.n	8000a4e <MCAL_UART_GPIO_SetPins+0x1d2>
			GPIO_PinConfig_t rts3 = {GPIOB, GPIO_PIN_14, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000a36:	4a15      	ldr	r2, [pc, #84]	; (8000a8c <MCAL_UART_GPIO_SetPins+0x210>)
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a40:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&rts3);
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff fcf7 	bl	800043c <MCAL_GPIO_Init>
}
 8000a4e:	bf00      	nop
 8000a50:	3768      	adds	r7, #104	; 0x68
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40013800 	.word	0x40013800
 8000a5c:	08000c94 	.word	0x08000c94
 8000a60:	08000c9c 	.word	0x08000c9c
 8000a64:	08000ca4 	.word	0x08000ca4
 8000a68:	08000cac 	.word	0x08000cac
 8000a6c:	40004400 	.word	0x40004400
 8000a70:	08000cb4 	.word	0x08000cb4
 8000a74:	08000cbc 	.word	0x08000cbc
 8000a78:	08000cc4 	.word	0x08000cc4
 8000a7c:	08000ccc 	.word	0x08000ccc
 8000a80:	08000cd4 	.word	0x08000cd4
 8000a84:	08000cdc 	.word	0x08000cdc
 8000a88:	08000ce4 	.word	0x08000ce4
 8000a8c:	08000cec 	.word	0x08000cec

08000a90 <MCAL_UART_Transmit>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_UART_Transmit(UART_Config_t* UART_ConfigPtr, uint16_t* pTxBuffer, USART_Polling_Mechanism_t Polling_Status){
 8000a90:	b480      	push	{r7}
 8000a92:	b085      	sub	sp, #20
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	71fb      	strb	r3, [r7, #7]

	//Check for Polling_Status
	if(Polling_Status == UART_Polling_Enable)
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d107      	bne.n	8000ab4 <MCAL_UART_Transmit+0x24>
		//wait for transmit data register to be empty
		while( ! ( (UART_ConfigPtr->USARTx->SR) & (1<<7) ) );
 8000aa4:	bf00      	nop
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d0f8      	beq.n	8000aa6 <MCAL_UART_Transmit+0x16>
	{
		UART_ConfigPtr->USARTx->DR = ( (*pTxBuffer) & 0x1FF );
	}
	else
	{
		UART_ConfigPtr->USARTx->DR = ( (*pTxBuffer) & 0x0FF );
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	605a      	str	r2, [r3, #4]
	}

}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <MCAL_UART_Receive>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_UART_Receive (UART_Config_t* UART_ConfigPtr, uint16_t* pTxBuffer, USART_Polling_Mechanism_t Polling_Status){
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	4613      	mov	r3, r2
 8000ad8:	71fb      	strb	r3, [r7, #7]

	//Check for Polling_Status
	if(Polling_Status == UART_Polling_Enable)
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d107      	bne.n	8000af0 <MCAL_UART_Receive+0x24>
		//wait for receive data register to be empty
		while( ! ( (UART_ConfigPtr->USARTx->SR) & (1<<5) ) );
 8000ae0:	bf00      	nop
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f003 0320 	and.w	r3, r3, #32
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d0f8      	beq.n	8000ae2 <MCAL_UART_Receive+0x16>
		}

	}
	else
	{
		if(UART_ConfigPtr->USART_Parity == USART_PARITY_DISABLE)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	7b5b      	ldrb	r3, [r3, #13]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d108      	bne.n	8000b0a <MCAL_UART_Receive+0x3e>
		{
			*((uint16_t*)pTxBuffer) = (UART_ConfigPtr->USARTx->DR & (uint8_t)0xFF);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	b29b      	uxth	r3, r3
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	801a      	strh	r2, [r3, #0]
		{
			*((uint16_t*)pTxBuffer) = (UART_ConfigPtr->USARTx->DR & (uint8_t)0x7F);
		}
	}

}
 8000b08:	e008      	b.n	8000b1c <MCAL_UART_Receive+0x50>
			*((uint16_t*)pTxBuffer) = (UART_ConfigPtr->USARTx->DR & (uint8_t)0x7F);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000b16:	b29a      	uxth	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	801a      	strh	r2, [r3, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
	...

08000b28 <USART1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void USART1_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000b2c:	4b02      	ldr	r3, [pc, #8]	; (8000b38 <USART1_IRQHandler+0x10>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4798      	blx	r3
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	2000001c 	.word	0x2000001c

08000b3c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8000b40:	4b02      	ldr	r3, [pc, #8]	; (8000b4c <USART2_IRQHandler+0x10>)
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	4798      	blx	r3
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	2000001c 	.word	0x2000001c

08000b50 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 8000b54:	4b02      	ldr	r3, [pc, #8]	; (8000b60 <USART3_IRQHandler+0x10>)
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	4798      	blx	r3
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000001c 	.word	0x2000001c

08000b64 <UART1_IRQ_CallBack>:
	for(int i=0;i<x;i++)
		for(int j=0;j<255;j++);
}

void UART1_IRQ_CallBack(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0

	MCAL_UART_Receive(&uart1, &character, UART_Polling_Disable);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	4905      	ldr	r1, [pc, #20]	; (8000b80 <UART1_IRQ_CallBack+0x1c>)
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <UART1_IRQ_CallBack+0x20>)
 8000b6e:	f7ff ffad 	bl	8000acc <MCAL_UART_Receive>
	MCAL_UART_Transmit(&uart1, &character, UART_Polling_Enable);
 8000b72:	2201      	movs	r2, #1
 8000b74:	4902      	ldr	r1, [pc, #8]	; (8000b80 <UART1_IRQ_CallBack+0x1c>)
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <UART1_IRQ_CallBack+0x20>)
 8000b78:	f7ff ff8a 	bl	8000a90 <MCAL_UART_Transmit>

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000058 	.word	0x20000058
 8000b84:	2000005c 	.word	0x2000005c

08000b88 <main>:

int main(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

	uart1.USARTx = USART1;
 8000b8c:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <main+0x4c>)
 8000b8e:	4a12      	ldr	r2, [pc, #72]	; (8000bd8 <main+0x50>)
 8000b90:	601a      	str	r2, [r3, #0]
	uart1.USART_Mode = USART_MODE_TX_RX;
 8000b92:	4b10      	ldr	r3, [pc, #64]	; (8000bd4 <main+0x4c>)
 8000b94:	220c      	movs	r2, #12
 8000b96:	711a      	strb	r2, [r3, #4]
	uart1.USART_BaudRate = USART_BAUDRATE_115200;
 8000b98:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <main+0x4c>)
 8000b9a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9e:	609a      	str	r2, [r3, #8]
	uart1.USART_WordLength = USART_WORD_LENGTH_8;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <main+0x4c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	731a      	strb	r2, [r3, #12]
	uart1.USART_Parity = USART_PARITY_DISABLE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <main+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	735a      	strb	r2, [r3, #13]
	uart1.USART_StopBits = USART_STOP_BIT_1;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <main+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	739a      	strb	r2, [r3, #14]
	uart1.USART_FlowControl = USART_FLOW_CONTROL_DISABLE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <main+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	73da      	strb	r2, [r3, #15]
	uart1.USART_IRQ_EN = (USART_IE_RXNE);
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <main+0x4c>)
 8000bba:	2220      	movs	r2, #32
 8000bbc:	741a      	strb	r2, [r3, #16]
	uart1.IRQ_CallBackPtr =UART1_IRQ_CallBack;
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <main+0x4c>)
 8000bc0:	4a06      	ldr	r2, [pc, #24]	; (8000bdc <main+0x54>)
 8000bc2:	615a      	str	r2, [r3, #20]

	MCAL_UART_Init(&uart1);
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <main+0x4c>)
 8000bc6:	f7ff fd77 	bl	80006b8 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(&uart1);
 8000bca:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <main+0x4c>)
 8000bcc:	f7ff fe56 	bl	800087c <MCAL_UART_GPIO_SetPins>

    while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <main+0x48>
 8000bd2:	bf00      	nop
 8000bd4:	2000005c 	.word	0x2000005c
 8000bd8:	40013800 	.word	0x40013800
 8000bdc:	08000b65 	.word	0x08000b65

08000be0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000be0:	480d      	ldr	r0, [pc, #52]	; (8000c18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000be2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000be4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be8:	480c      	ldr	r0, [pc, #48]	; (8000c1c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bea:	490d      	ldr	r1, [pc, #52]	; (8000c20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bec:	4a0d      	ldr	r2, [pc, #52]	; (8000c24 <LoopForever+0xe>)
  movs r3, #0
 8000bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf0:	e002      	b.n	8000bf8 <LoopCopyDataInit>

08000bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf6:	3304      	adds	r3, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bfc:	d3f9      	bcc.n	8000bf2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c00:	4c0a      	ldr	r4, [pc, #40]	; (8000c2c <LoopForever+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c04:	e001      	b.n	8000c0a <LoopFillZerobss>

08000c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c08:	3204      	adds	r2, #4

08000c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c0c:	d3fb      	bcc.n	8000c06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c0e:	f000 f811 	bl	8000c34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c12:	f7ff ffb9 	bl	8000b88 <main>

08000c16 <LoopForever>:

LoopForever:
    b LoopForever
 8000c16:	e7fe      	b.n	8000c16 <LoopForever>
  ldr   r0, =_estack
 8000c18:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c20:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c24:	08000d14 	.word	0x08000d14
  ldr r2, =_sbss
 8000c28:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c2c:	20000074 	.word	0x20000074

08000c30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c30:	e7fe      	b.n	8000c30 <ADC1_2_IRQHandler>
	...

08000c34 <__libc_init_array>:
 8000c34:	b570      	push	{r4, r5, r6, lr}
 8000c36:	2500      	movs	r5, #0
 8000c38:	4e0c      	ldr	r6, [pc, #48]	; (8000c6c <__libc_init_array+0x38>)
 8000c3a:	4c0d      	ldr	r4, [pc, #52]	; (8000c70 <__libc_init_array+0x3c>)
 8000c3c:	1ba4      	subs	r4, r4, r6
 8000c3e:	10a4      	asrs	r4, r4, #2
 8000c40:	42a5      	cmp	r5, r4
 8000c42:	d109      	bne.n	8000c58 <__libc_init_array+0x24>
 8000c44:	f000 f81a 	bl	8000c7c <_init>
 8000c48:	2500      	movs	r5, #0
 8000c4a:	4e0a      	ldr	r6, [pc, #40]	; (8000c74 <__libc_init_array+0x40>)
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	; (8000c78 <__libc_init_array+0x44>)
 8000c4e:	1ba4      	subs	r4, r4, r6
 8000c50:	10a4      	asrs	r4, r4, #2
 8000c52:	42a5      	cmp	r5, r4
 8000c54:	d105      	bne.n	8000c62 <__libc_init_array+0x2e>
 8000c56:	bd70      	pop	{r4, r5, r6, pc}
 8000c58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c5c:	4798      	blx	r3
 8000c5e:	3501      	adds	r5, #1
 8000c60:	e7ee      	b.n	8000c40 <__libc_init_array+0xc>
 8000c62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c66:	4798      	blx	r3
 8000c68:	3501      	adds	r5, #1
 8000c6a:	e7f2      	b.n	8000c52 <__libc_init_array+0x1e>
 8000c6c:	08000d0c 	.word	0x08000d0c
 8000c70:	08000d0c 	.word	0x08000d0c
 8000c74:	08000d0c 	.word	0x08000d0c
 8000c78:	08000d10 	.word	0x08000d10

08000c7c <_init>:
 8000c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7e:	bf00      	nop
 8000c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c82:	bc08      	pop	{r3}
 8000c84:	469e      	mov	lr, r3
 8000c86:	4770      	bx	lr

08000c88 <_fini>:
 8000c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8a:	bf00      	nop
 8000c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c8e:	bc08      	pop	{r3}
 8000c90:	469e      	mov	lr, r3
 8000c92:	4770      	bx	lr
