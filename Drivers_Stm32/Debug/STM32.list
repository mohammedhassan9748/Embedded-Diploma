
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e34  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f64  08000f64  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f64  08000f64  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08000f64  08000f64  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f64  08000f64  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f64  08000f64  00010f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f68  08000f68  00010f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08000f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  20000034  08000fa0  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08000fa0  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b54  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000008a9  00000000  00000000  00021bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000eac  00000000  00000000  0002245a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000258  00000000  00000000  00023308  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001f0  00000000  00000000  00023560  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000017cc  00000000  00000000  00023750  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000cb5  00000000  00000000  00024f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007eb1  00000000  00000000  00025bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002da82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000007a0  00000000  00000000  0002db00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000034 	.word	0x20000034
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f4c 	.word	0x08000f4c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000038 	.word	0x20000038
 800016c:	08000f4c 	.word	0x08000f4c

08000170 <LCD_wait>:

/*================================================================
 * Description :
 * Private Delay Function to wait for LCD.
 */
static void LCD_wait(void){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
	unsigned char i,j;
	for(i=0;i<50;i++)        //A simple for loop for delay
 8000176:	2300      	movs	r3, #0
 8000178:	71fb      	strb	r3, [r7, #7]
 800017a:	e00b      	b.n	8000194 <LCD_wait+0x24>
		for(j=0;j<255;j++);
 800017c:	2300      	movs	r3, #0
 800017e:	71bb      	strb	r3, [r7, #6]
 8000180:	e002      	b.n	8000188 <LCD_wait+0x18>
 8000182:	79bb      	ldrb	r3, [r7, #6]
 8000184:	3301      	adds	r3, #1
 8000186:	71bb      	strb	r3, [r7, #6]
 8000188:	79bb      	ldrb	r3, [r7, #6]
 800018a:	2bff      	cmp	r3, #255	; 0xff
 800018c:	d1f9      	bne.n	8000182 <LCD_wait+0x12>
	for(i=0;i<50;i++)        //A simple for loop for delay
 800018e:	79fb      	ldrb	r3, [r7, #7]
 8000190:	3301      	adds	r3, #1
 8000192:	71fb      	strb	r3, [r7, #7]
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	2b31      	cmp	r3, #49	; 0x31
 8000198:	d9f0      	bls.n	800017c <LCD_wait+0xc>
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr

080001a4 <LCD_Config>:

/*================================================================
 * Description :
 * Initializes the pins chosen according to all @config
 */
static void LCD_Config(void){
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0

	//Configure RS Pin
	MCAL_GPIO_Init(&g_LCD_RS);
 80001a8:	480a      	ldr	r0, [pc, #40]	; (80001d4 <LCD_Config+0x30>)
 80001aa:	f000 faf7 	bl	800079c <MCAL_GPIO_Init>

	//Configure EN Pin
	MCAL_GPIO_Init(&g_LCD_EN);
 80001ae:	480a      	ldr	r0, [pc, #40]	; (80001d8 <LCD_Config+0x34>)
 80001b0:	f000 faf4 	bl	800079c <MCAL_GPIO_Init>

	LCD_wait();
 80001b4:	f7ff ffdc 	bl	8000170 <LCD_wait>

	//Configure Data Bit 4 Pin
	MCAL_GPIO_Init(&g_LCD_D4);
 80001b8:	4808      	ldr	r0, [pc, #32]	; (80001dc <LCD_Config+0x38>)
 80001ba:	f000 faef 	bl	800079c <MCAL_GPIO_Init>
	//Configure Data Bit 5 Pin
	MCAL_GPIO_Init(&g_LCD_D5);
 80001be:	4808      	ldr	r0, [pc, #32]	; (80001e0 <LCD_Config+0x3c>)
 80001c0:	f000 faec 	bl	800079c <MCAL_GPIO_Init>
	//Configure Data Bit 6 Pin
	MCAL_GPIO_Init(&g_LCD_D6);
 80001c4:	4807      	ldr	r0, [pc, #28]	; (80001e4 <LCD_Config+0x40>)
 80001c6:	f000 fae9 	bl	800079c <MCAL_GPIO_Init>
	//Configure Data Bit 7 Pin
	MCAL_GPIO_Init(&g_LCD_D7);
 80001ca:	4807      	ldr	r0, [pc, #28]	; (80001e8 <LCD_Config+0x44>)
 80001cc:	f000 fae6 	bl	800079c <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&g_LCD_D2); //Configure Data Bit 2 Pin
	MCAL_GPIO_Init(&g_LCD_D3); //Configure Data Bit 3 Pin

	#endif

}
 80001d0:	bf00      	nop
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	20000000 	.word	0x20000000
 80001d8:	20000008 	.word	0x20000008
 80001dc:	20000010 	.word	0x20000010
 80001e0:	20000018 	.word	0x20000018
 80001e4:	20000020 	.word	0x20000020
 80001e8:	20000028 	.word	0x20000028

080001ec <LCD_Kick>:

/*================================================================
 * Description :
 * Disable EN and wait to Enable EN again to send(Kick) data correctly
 */
static void LCD_Kick(void){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

	//Set EN pin
	MCAL_GPIO_WritePin(&g_LCD_EN,GPIO_PIN_SET);
 80001f0:	2101      	movs	r1, #1
 80001f2:	4805      	ldr	r0, [pc, #20]	; (8000208 <LCD_Kick+0x1c>)
 80001f4:	f000 fbdc 	bl	80009b0 <MCAL_GPIO_WritePin>

	// Delay
	LCD_wait();
 80001f8:	f7ff ffba 	bl	8000170 <LCD_wait>

	//Clear EN pin
	MCAL_GPIO_WritePin(&g_LCD_EN,GPIO_PIN_CLEAR);
 80001fc:	2100      	movs	r1, #0
 80001fe:	4802      	ldr	r0, [pc, #8]	; (8000208 <LCD_Kick+0x1c>)
 8000200:	f000 fbd6 	bl	80009b0 <MCAL_GPIO_WritePin>

}
 8000204:	bf00      	nop
 8000206:	bd80      	pop	{r7, pc}
 8000208:	20000008 	.word	0x20000008

0800020c <LCD_WriteChar>:

/*================================================================
 * Description :
 * Send data required on the data pins chosen according to @config
 */
static void LCD_WriteChar(const uint8_t c){
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]

	// Data Mode : RS = 1
	MCAL_GPIO_WritePin(&g_LCD_RS,GPIO_PIN_SET);
 8000216:	2101      	movs	r1, #1
 8000218:	482b      	ldr	r0, [pc, #172]	; (80002c8 <LCD_WriteChar+0xbc>)
 800021a:	f000 fbc9 	bl	80009b0 <MCAL_GPIO_WritePin>
	//Delay
	LCD_wait();
 800021e:	f7ff ffa7 	bl	8000170 <LCD_wait>

	//Check if DATA_BITS_NO configured as FOUR_BIT_MODE
	#ifdef FOUR_BIT_MODE

	//Send Last four bits
	MCAL_GPIO_WritePin(&g_LCD_D4,(c&(1<<4))>>4);
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	111b      	asrs	r3, r3, #4
 8000226:	b2db      	uxtb	r3, r3
 8000228:	f003 0301 	and.w	r3, r3, #1
 800022c:	b2db      	uxtb	r3, r3
 800022e:	4619      	mov	r1, r3
 8000230:	4826      	ldr	r0, [pc, #152]	; (80002cc <LCD_WriteChar+0xc0>)
 8000232:	f000 fbbd 	bl	80009b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&g_LCD_D5,(c&(1<<5))>>5);
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	115b      	asrs	r3, r3, #5
 800023a:	b2db      	uxtb	r3, r3
 800023c:	f003 0301 	and.w	r3, r3, #1
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4619      	mov	r1, r3
 8000244:	4822      	ldr	r0, [pc, #136]	; (80002d0 <LCD_WriteChar+0xc4>)
 8000246:	f000 fbb3 	bl	80009b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&g_LCD_D6,(c&(1<<6))>>6);
 800024a:	79fb      	ldrb	r3, [r7, #7]
 800024c:	119b      	asrs	r3, r3, #6
 800024e:	b2db      	uxtb	r3, r3
 8000250:	f003 0301 	and.w	r3, r3, #1
 8000254:	b2db      	uxtb	r3, r3
 8000256:	4619      	mov	r1, r3
 8000258:	481e      	ldr	r0, [pc, #120]	; (80002d4 <LCD_WriteChar+0xc8>)
 800025a:	f000 fba9 	bl	80009b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&g_LCD_D7,(c&(1<<7))>>7);
 800025e:	79fb      	ldrb	r3, [r7, #7]
 8000260:	09db      	lsrs	r3, r3, #7
 8000262:	b2db      	uxtb	r3, r3
 8000264:	4619      	mov	r1, r3
 8000266:	481c      	ldr	r0, [pc, #112]	; (80002d8 <LCD_WriteChar+0xcc>)
 8000268:	f000 fba2 	bl	80009b0 <MCAL_GPIO_WritePin>
	LCD_Kick();
 800026c:	f7ff ffbe 	bl	80001ec <LCD_Kick>

	//Send First four bits
	MCAL_GPIO_WritePin(&g_LCD_D4,(c&(1<<0))>>0);
 8000270:	79fb      	ldrb	r3, [r7, #7]
 8000272:	f003 0301 	and.w	r3, r3, #1
 8000276:	b2db      	uxtb	r3, r3
 8000278:	4619      	mov	r1, r3
 800027a:	4814      	ldr	r0, [pc, #80]	; (80002cc <LCD_WriteChar+0xc0>)
 800027c:	f000 fb98 	bl	80009b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&g_LCD_D5,(c&(1<<1))>>1);
 8000280:	79fb      	ldrb	r3, [r7, #7]
 8000282:	105b      	asrs	r3, r3, #1
 8000284:	b2db      	uxtb	r3, r3
 8000286:	f003 0301 	and.w	r3, r3, #1
 800028a:	b2db      	uxtb	r3, r3
 800028c:	4619      	mov	r1, r3
 800028e:	4810      	ldr	r0, [pc, #64]	; (80002d0 <LCD_WriteChar+0xc4>)
 8000290:	f000 fb8e 	bl	80009b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&g_LCD_D6,(c&(1<<2))>>2);
 8000294:	79fb      	ldrb	r3, [r7, #7]
 8000296:	109b      	asrs	r3, r3, #2
 8000298:	b2db      	uxtb	r3, r3
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	4619      	mov	r1, r3
 80002a2:	480c      	ldr	r0, [pc, #48]	; (80002d4 <LCD_WriteChar+0xc8>)
 80002a4:	f000 fb84 	bl	80009b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&g_LCD_D7,(c&(1<<3))>>3);
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	10db      	asrs	r3, r3, #3
 80002ac:	b2db      	uxtb	r3, r3
 80002ae:	f003 0301 	and.w	r3, r3, #1
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	4619      	mov	r1, r3
 80002b6:	4808      	ldr	r0, [pc, #32]	; (80002d8 <LCD_WriteChar+0xcc>)
 80002b8:	f000 fb7a 	bl	80009b0 <MCAL_GPIO_WritePin>
	LCD_Kick();
 80002bc:	f7ff ff96 	bl	80001ec <LCD_Kick>
	MCAL_GPIO_WritePin(&g_LCD_D7,(c&(1<<7))>>7);
	LCD_Kick();

	#endif

}
 80002c0:	bf00      	nop
 80002c2:	3708      	adds	r7, #8
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	20000000 	.word	0x20000000
 80002cc:	20000010 	.word	0x20000010
 80002d0:	20000018 	.word	0x20000018
 80002d4:	20000020 	.word	0x20000020
 80002d8:	20000028 	.word	0x20000028

080002dc <HAL_LCD_Init>:
* @retval 			- None.
*
* Note				- This initializes only one LCD per MCU.
*
*/
void HAL_LCD_Init(void){
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0

	//Initialize LCD GPIO Connection
	LCD_Config();
 80002e0:	f7ff ff60 	bl	80001a4 <LCD_Config>

	//Check if DATA_BITS_NO configured as FOUR_BIT_MODE
	#ifdef	FOUR_BIT_MODE

	HAL_LCD_WriteCommand(LCD_CMD_GO_TO_HOME);
 80002e4:	2002      	movs	r0, #2
 80002e6:	f000 f809 	bl	80002fc <HAL_LCD_WriteCommand>
	HAL_LCD_WriteCommand(LCD_CMD_FUNCTION_4BIT_2LINES);
 80002ea:	2028      	movs	r0, #40	; 0x28
 80002ec:	f000 f806 	bl	80002fc <HAL_LCD_WriteCommand>

	HAL_LCD_WriteCommand(LCD_CMD_FUNCTION_8BIT_2LINES);

	#endif

	HAL_LCD_WriteCommand(LCD_CMD_DISP_ON);
 80002f0:	200c      	movs	r0, #12
 80002f2:	f000 f803 	bl	80002fc <HAL_LCD_WriteCommand>

}
 80002f6:	bf00      	nop
 80002f8:	bd80      	pop	{r7, pc}
	...

080002fc <HAL_LCD_WriteCommand>:
* @retval 			- None.
*
* Note				-
*
*/
void HAL_LCD_WriteCommand(uint8_t command){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	71fb      	strb	r3, [r7, #7]

	// Command Mode : RS = 0
	MCAL_GPIO_WritePin(&g_LCD_RS,GPIO_PIN_CLEAR);
 8000306:	2100      	movs	r1, #0
 8000308:	482b      	ldr	r0, [pc, #172]	; (80003b8 <HAL_LCD_WriteCommand+0xbc>)
 800030a:	f000 fb51 	bl	80009b0 <MCAL_GPIO_WritePin>
	//Delay
	LCD_wait();
 800030e:	f7ff ff2f 	bl	8000170 <LCD_wait>

	//Check if DATA_BITS_NO configured as FOUR_BIT_MODE
	#ifdef FOUR_BIT_MODE

	//Send Last four bits
	MCAL_GPIO_WritePin(&g_LCD_D4,(command&(1<<4))>>4);
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	111b      	asrs	r3, r3, #4
 8000316:	b2db      	uxtb	r3, r3
 8000318:	f003 0301 	and.w	r3, r3, #1
 800031c:	b2db      	uxtb	r3, r3
 800031e:	4619      	mov	r1, r3
 8000320:	4826      	ldr	r0, [pc, #152]	; (80003bc <HAL_LCD_WriteCommand+0xc0>)
 8000322:	f000 fb45 	bl	80009b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&g_LCD_D5,(command&(1<<5))>>5);
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	115b      	asrs	r3, r3, #5
 800032a:	b2db      	uxtb	r3, r3
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	b2db      	uxtb	r3, r3
 8000332:	4619      	mov	r1, r3
 8000334:	4822      	ldr	r0, [pc, #136]	; (80003c0 <HAL_LCD_WriteCommand+0xc4>)
 8000336:	f000 fb3b 	bl	80009b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&g_LCD_D6,(command&(1<<6))>>6);
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	119b      	asrs	r3, r3, #6
 800033e:	b2db      	uxtb	r3, r3
 8000340:	f003 0301 	and.w	r3, r3, #1
 8000344:	b2db      	uxtb	r3, r3
 8000346:	4619      	mov	r1, r3
 8000348:	481e      	ldr	r0, [pc, #120]	; (80003c4 <HAL_LCD_WriteCommand+0xc8>)
 800034a:	f000 fb31 	bl	80009b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&g_LCD_D7,(command&(1<<7))>>7);
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	09db      	lsrs	r3, r3, #7
 8000352:	b2db      	uxtb	r3, r3
 8000354:	4619      	mov	r1, r3
 8000356:	481c      	ldr	r0, [pc, #112]	; (80003c8 <HAL_LCD_WriteCommand+0xcc>)
 8000358:	f000 fb2a 	bl	80009b0 <MCAL_GPIO_WritePin>
	LCD_Kick();
 800035c:	f7ff ff46 	bl	80001ec <LCD_Kick>

	//Send First four bits
	MCAL_GPIO_WritePin(&g_LCD_D4,(command&(1<<0))>>0);
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	f003 0301 	and.w	r3, r3, #1
 8000366:	b2db      	uxtb	r3, r3
 8000368:	4619      	mov	r1, r3
 800036a:	4814      	ldr	r0, [pc, #80]	; (80003bc <HAL_LCD_WriteCommand+0xc0>)
 800036c:	f000 fb20 	bl	80009b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&g_LCD_D5,(command&(1<<1))>>1);
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	105b      	asrs	r3, r3, #1
 8000374:	b2db      	uxtb	r3, r3
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	b2db      	uxtb	r3, r3
 800037c:	4619      	mov	r1, r3
 800037e:	4810      	ldr	r0, [pc, #64]	; (80003c0 <HAL_LCD_WriteCommand+0xc4>)
 8000380:	f000 fb16 	bl	80009b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&g_LCD_D6,(command&(1<<2))>>2);
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	109b      	asrs	r3, r3, #2
 8000388:	b2db      	uxtb	r3, r3
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	b2db      	uxtb	r3, r3
 8000390:	4619      	mov	r1, r3
 8000392:	480c      	ldr	r0, [pc, #48]	; (80003c4 <HAL_LCD_WriteCommand+0xc8>)
 8000394:	f000 fb0c 	bl	80009b0 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&g_LCD_D7,(command&(1<<3))>>3);
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	10db      	asrs	r3, r3, #3
 800039c:	b2db      	uxtb	r3, r3
 800039e:	f003 0301 	and.w	r3, r3, #1
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4619      	mov	r1, r3
 80003a6:	4808      	ldr	r0, [pc, #32]	; (80003c8 <HAL_LCD_WriteCommand+0xcc>)
 80003a8:	f000 fb02 	bl	80009b0 <MCAL_GPIO_WritePin>
	LCD_Kick();
 80003ac:	f7ff ff1e 	bl	80001ec <LCD_Kick>
	MCAL_GPIO_WritePin(&g_LCD_D7,(command&(1<<7))>>7);
	LCD_Kick();

	#endif

}
 80003b0:	bf00      	nop
 80003b2:	3708      	adds	r7, #8
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000000 	.word	0x20000000
 80003bc:	20000010 	.word	0x20000010
 80003c0:	20000018 	.word	0x20000018
 80003c4:	20000020 	.word	0x20000020
 80003c8:	20000028 	.word	0x20000028

080003cc <HAL_LCD_ClearScreen>:
* @retval 			- None.
*
* Note				-
*
*/
void HAL_LCD_ClearScreen(void){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0

	//LCD Clear Screen Command
	HAL_LCD_WriteCommand(LCD_CMD_CLEAR_SCREEN);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f7ff ff93 	bl	80002fc <HAL_LCD_WriteCommand>

	//Reset LCD_AXIS
	g_LCD_X = LCD_X_RESET_VALUE;
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <HAL_LCD_ClearScreen+0x1c>)
 80003d8:	2200      	movs	r2, #0
 80003da:	701a      	strb	r2, [r3, #0]
	g_LCD_Y = LCD_Y_RESET_VALUE;
 80003dc:	4b03      	ldr	r3, [pc, #12]	; (80003ec <HAL_LCD_ClearScreen+0x20>)
 80003de:	2201      	movs	r2, #1
 80003e0:	701a      	strb	r2, [r3, #0]

}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	20000050 	.word	0x20000050
 80003ec:	20000030 	.word	0x20000030

080003f0 <HAL_LCD_WriteChar>:
* @retval 			- None.
*
* Note				-
*
*/
void HAL_LCD_WriteChar(const uint8_t c){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	71fb      	strb	r3, [r7, #7]

	if(g_LCD_X > LCD_X_MAX){
 80003fa:	4b16      	ldr	r3, [pc, #88]	; (8000454 <HAL_LCD_WriteChar+0x64>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b0f      	cmp	r3, #15
 8000400:	d91a      	bls.n	8000438 <HAL_LCD_WriteChar+0x48>
		g_LCD_X = LCD_X_RESET_VALUE;
 8000402:	4b14      	ldr	r3, [pc, #80]	; (8000454 <HAL_LCD_WriteChar+0x64>)
 8000404:	2200      	movs	r2, #0
 8000406:	701a      	strb	r2, [r3, #0]
		if(g_LCD_Y == LCD_Y_MAX){
 8000408:	4b13      	ldr	r3, [pc, #76]	; (8000458 <HAL_LCD_WriteChar+0x68>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b02      	cmp	r3, #2
 800040e:	d105      	bne.n	800041c <HAL_LCD_WriteChar+0x2c>
			g_LCD_Y = LCD_Y_RESET_VALUE;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <HAL_LCD_WriteChar+0x68>)
 8000412:	2201      	movs	r2, #1
 8000414:	701a      	strb	r2, [r3, #0]
			HAL_LCD_ClearScreen();
 8000416:	f7ff ffd9 	bl	80003cc <HAL_LCD_ClearScreen>
			return;
 800041a:	e017      	b.n	800044c <HAL_LCD_WriteChar+0x5c>
		}
		else{
			g_LCD_Y++;
 800041c:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <HAL_LCD_WriteChar+0x68>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	3301      	adds	r3, #1
 8000422:	b2da      	uxtb	r2, r3
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <HAL_LCD_WriteChar+0x68>)
 8000426:	701a      	strb	r2, [r3, #0]
			HAL_LCD_GoToXY(g_LCD_Y,g_LCD_X);
 8000428:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <HAL_LCD_WriteChar+0x68>)
 800042a:	781a      	ldrb	r2, [r3, #0]
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <HAL_LCD_WriteChar+0x64>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4619      	mov	r1, r3
 8000432:	4610      	mov	r0, r2
 8000434:	f000 f827 	bl	8000486 <HAL_LCD_GoToXY>
		}
	}

	LCD_WriteChar(c);
 8000438:	79fb      	ldrb	r3, [r7, #7]
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fee6 	bl	800020c <LCD_WriteChar>
	g_LCD_X++;
 8000440:	4b04      	ldr	r3, [pc, #16]	; (8000454 <HAL_LCD_WriteChar+0x64>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	3301      	adds	r3, #1
 8000446:	b2da      	uxtb	r2, r3
 8000448:	4b02      	ldr	r3, [pc, #8]	; (8000454 <HAL_LCD_WriteChar+0x64>)
 800044a:	701a      	strb	r2, [r3, #0]

}
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	20000050 	.word	0x20000050
 8000458:	20000030 	.word	0x20000030

0800045c <HAL_LCD_WriteString>:
* @retval 			- None.
*
* Note				-
*
*/
void HAL_LCD_WriteString(const uint8_t *Str){
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]

	//Write string by using HAL_LCD_WriteChar in loop
	while((*Str) != '\0')
 8000464:	e007      	b.n	8000476 <HAL_LCD_WriteString+0x1a>
	{
		HAL_LCD_WriteChar(*Str);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	4618      	mov	r0, r3
 800046c:	f7ff ffc0 	bl	80003f0 <HAL_LCD_WriteChar>
		Str++;
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3301      	adds	r3, #1
 8000474:	607b      	str	r3, [r7, #4]
	while((*Str) != '\0')
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d1f3      	bne.n	8000466 <HAL_LCD_WriteString+0xa>
	}

}
 800047e:	bf00      	nop
 8000480:	3708      	adds	r7, #8
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}

08000486 <HAL_LCD_GoToXY>:
*
* Note				- This API would work only for 16x2 LCD only.
*
*/
void HAL_LCD_GoToXY(uint8_t line, uint8_t position)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b082      	sub	sp, #8
 800048a:	af00      	add	r7, sp, #0
 800048c:	4603      	mov	r3, r0
 800048e:	460a      	mov	r2, r1
 8000490:	71fb      	strb	r3, [r7, #7]
 8000492:	4613      	mov	r3, r2
 8000494:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000496:	79fb      	ldrb	r3, [r7, #7]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d108      	bne.n	80004ae <HAL_LCD_GoToXY+0x28>
	{
		if (position < 16 && position >= 0)
 800049c:	79bb      	ldrb	r3, [r7, #6]
 800049e:	2b0f      	cmp	r3, #15
 80004a0:	d805      	bhi.n	80004ae <HAL_LCD_GoToXY+0x28>
		{
			HAL_LCD_WriteCommand(LCD_CMD_BEGIN_AT_FIRST_ROW + position);
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	3b80      	subs	r3, #128	; 0x80
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff ff27 	bl	80002fc <HAL_LCD_WriteCommand>
		}
	}
	if (line == 2)
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	2b02      	cmp	r3, #2
 80004b2:	d108      	bne.n	80004c6 <HAL_LCD_GoToXY+0x40>
	{
		if (position < 16 && position >= 0)
 80004b4:	79bb      	ldrb	r3, [r7, #6]
 80004b6:	2b0f      	cmp	r3, #15
 80004b8:	d805      	bhi.n	80004c6 <HAL_LCD_GoToXY+0x40>
		{
			HAL_LCD_WriteCommand(LCD_CMD_BEGIN_AT_SECOND_ROW + position);
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	3b40      	subs	r3, #64	; 0x40
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff ff1b 	bl	80002fc <HAL_LCD_WriteCommand>
		}
	}
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <EXTI0_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void EXTI0_IRQHandler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<0);
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <EXTI0_IRQHandler+0x1c>)
 80004d6:	695b      	ldr	r3, [r3, #20]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <EXTI0_IRQHandler+0x1c>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <EXTI0_IRQHandler+0x20>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4798      	blx	r3

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	40010400 	.word	0x40010400
 80004f0:	20000054 	.word	0x20000054

080004f4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<1);
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <EXTI1_IRQHandler+0x1c>)
 80004fa:	695b      	ldr	r3, [r3, #20]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <EXTI1_IRQHandler+0x1c>)
 80004fe:	f043 0302 	orr.w	r3, r3, #2
 8000502:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8000504:	4b03      	ldr	r3, [pc, #12]	; (8000514 <EXTI1_IRQHandler+0x20>)
 8000506:	685b      	ldr	r3, [r3, #4]
 8000508:	4798      	blx	r3

}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40010400 	.word	0x40010400
 8000514:	20000054 	.word	0x20000054

08000518 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<2);
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <EXTI2_IRQHandler+0x1c>)
 800051e:	695b      	ldr	r3, [r3, #20]
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <EXTI2_IRQHandler+0x1c>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <EXTI2_IRQHandler+0x20>)
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	4798      	blx	r3

}
 800052e:	bf00      	nop
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	40010400 	.word	0x40010400
 8000538:	20000054 	.word	0x20000054

0800053c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<3);
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <EXTI3_IRQHandler+0x1c>)
 8000542:	695b      	ldr	r3, [r3, #20]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <EXTI3_IRQHandler+0x1c>)
 8000546:	f043 0308 	orr.w	r3, r3, #8
 800054a:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[3]();
 800054c:	4b03      	ldr	r3, [pc, #12]	; (800055c <EXTI3_IRQHandler+0x20>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	4798      	blx	r3

}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40010400 	.word	0x40010400
 800055c:	20000054 	.word	0x20000054

08000560 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<4);
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <EXTI4_IRQHandler+0x1c>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <EXTI4_IRQHandler+0x1c>)
 800056a:	f043 0310 	orr.w	r3, r3, #16
 800056e:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[4]();
 8000570:	4b03      	ldr	r3, [pc, #12]	; (8000580 <EXTI4_IRQHandler+0x20>)
 8000572:	691b      	ldr	r3, [r3, #16]
 8000574:	4798      	blx	r3

}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40010400 	.word	0x40010400
 8000580:	20000054 	.word	0x20000054

08000584 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); g_IRQ_CallBackPtr[5]();}
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	f003 0320 	and.w	r3, r3, #32
 8000590:	2b00      	cmp	r3, #0
 8000592:	d008      	beq.n	80005a6 <EXTI9_5_IRQHandler+0x22>
 8000594:	4b23      	ldr	r3, [pc, #140]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 8000596:	695b      	ldr	r3, [r3, #20]
 8000598:	4a22      	ldr	r2, [pc, #136]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 800059a:	f043 0320 	orr.w	r3, r3, #32
 800059e:	6153      	str	r3, [r2, #20]
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <EXTI9_5_IRQHandler+0xa4>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); g_IRQ_CallBackPtr[6]();}
 80005a6:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005a8:	695b      	ldr	r3, [r3, #20]
 80005aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d008      	beq.n	80005c4 <EXTI9_5_IRQHandler+0x40>
 80005b2:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005bc:	6153      	str	r3, [r2, #20]
 80005be:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <EXTI9_5_IRQHandler+0xa4>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); g_IRQ_CallBackPtr[7]();}
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d008      	beq.n	80005e2 <EXTI9_5_IRQHandler+0x5e>
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4a13      	ldr	r2, [pc, #76]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005da:	6153      	str	r3, [r2, #20]
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <EXTI9_5_IRQHandler+0xa4>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); g_IRQ_CallBackPtr[8]();}
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d008      	beq.n	8000600 <EXTI9_5_IRQHandler+0x7c>
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a0c      	ldr	r2, [pc, #48]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 80005f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <EXTI9_5_IRQHandler+0xa4>)
 80005fc:	6a1b      	ldr	r3, [r3, #32]
 80005fe:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); g_IRQ_CallBackPtr[9]();}
 8000600:	4b08      	ldr	r3, [pc, #32]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000608:	2b00      	cmp	r3, #0
 800060a:	d008      	beq.n	800061e <EXTI9_5_IRQHandler+0x9a>
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 800060e:	695b      	ldr	r3, [r3, #20]
 8000610:	4a04      	ldr	r2, [pc, #16]	; (8000624 <EXTI9_5_IRQHandler+0xa0>)
 8000612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000616:	6153      	str	r3, [r2, #20]
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <EXTI9_5_IRQHandler+0xa4>)
 800061a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061c:	4798      	blx	r3
}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40010400 	.word	0x40010400
 8000628:	20000054 	.word	0x20000054

0800062c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); g_IRQ_CallBackPtr[10]();}
 8000630:	4b26      	ldr	r3, [pc, #152]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000638:	2b00      	cmp	r3, #0
 800063a:	d008      	beq.n	800064e <EXTI15_10_IRQHandler+0x22>
 800063c:	4b23      	ldr	r3, [pc, #140]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800063e:	695b      	ldr	r3, [r3, #20]
 8000640:	4a22      	ldr	r2, [pc, #136]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 8000642:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000646:	6153      	str	r3, [r2, #20]
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <EXTI15_10_IRQHandler+0xa4>)
 800064a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064c:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); g_IRQ_CallBackPtr[11]();}
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000656:	2b00      	cmp	r3, #0
 8000658:	d008      	beq.n	800066c <EXTI15_10_IRQHandler+0x40>
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a1b      	ldr	r2, [pc, #108]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 8000660:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b1a      	ldr	r3, [pc, #104]	; (80006d0 <EXTI15_10_IRQHandler+0xa4>)
 8000668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066a:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); g_IRQ_CallBackPtr[12]();}
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000674:	2b00      	cmp	r3, #0
 8000676:	d008      	beq.n	800068a <EXTI15_10_IRQHandler+0x5e>
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	4a13      	ldr	r2, [pc, #76]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800067e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000682:	6153      	str	r3, [r2, #20]
 8000684:	4b12      	ldr	r3, [pc, #72]	; (80006d0 <EXTI15_10_IRQHandler+0xa4>)
 8000686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000688:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); g_IRQ_CallBackPtr[13]();}
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800068c:	695b      	ldr	r3, [r3, #20]
 800068e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000692:	2b00      	cmp	r3, #0
 8000694:	d008      	beq.n	80006a8 <EXTI15_10_IRQHandler+0x7c>
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 8000698:	695b      	ldr	r3, [r3, #20]
 800069a:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 800069c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006a0:	6153      	str	r3, [r2, #20]
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <EXTI15_10_IRQHandler+0xa4>)
 80006a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006a6:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); g_IRQ_CallBackPtr[14]();}
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 80006aa:	695b      	ldr	r3, [r3, #20]
 80006ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d008      	beq.n	80006c6 <EXTI15_10_IRQHandler+0x9a>
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 80006b6:	695b      	ldr	r3, [r3, #20]
 80006b8:	4a04      	ldr	r2, [pc, #16]	; (80006cc <EXTI15_10_IRQHandler+0xa0>)
 80006ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006be:	6153      	str	r3, [r2, #20]
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <EXTI15_10_IRQHandler+0xa4>)
 80006c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006c4:	4798      	blx	r3
}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40010400 	.word	0x40010400
 80006d0:	20000054 	.word	0x20000054

080006d4 <Get_CRx_Position>:
/*================================================================
 * Description :
 * Private Function to get the 4 bits position required to configure of the CRx register according to the  pin number
 * of the specified GPIO_PinConfigPtr
 */
static uint8_t Get_CRx_Position(uint16_t PinNumber){
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	80fb      	strh	r3, [r7, #6]
	//Case PinNumber < GPIO_PIN_8
	switch(PinNumber){
 80006de:	88fb      	ldrh	r3, [r7, #6]
 80006e0:	2b80      	cmp	r3, #128	; 0x80
 80006e2:	d042      	beq.n	800076a <Get_CRx_Position+0x96>
 80006e4:	2b80      	cmp	r3, #128	; 0x80
 80006e6:	dc11      	bgt.n	800070c <Get_CRx_Position+0x38>
 80006e8:	2b08      	cmp	r3, #8
 80006ea:	d036      	beq.n	800075a <Get_CRx_Position+0x86>
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	dc06      	bgt.n	80006fe <Get_CRx_Position+0x2a>
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d02e      	beq.n	8000752 <Get_CRx_Position+0x7e>
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d02e      	beq.n	8000756 <Get_CRx_Position+0x82>
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d028      	beq.n	800074e <Get_CRx_Position+0x7a>
 80006fc:	e047      	b.n	800078e <Get_CRx_Position+0xba>
 80006fe:	2b20      	cmp	r3, #32
 8000700:	d02f      	beq.n	8000762 <Get_CRx_Position+0x8e>
 8000702:	2b40      	cmp	r3, #64	; 0x40
 8000704:	d02f      	beq.n	8000766 <Get_CRx_Position+0x92>
 8000706:	2b10      	cmp	r3, #16
 8000708:	d029      	beq.n	800075e <Get_CRx_Position+0x8a>
 800070a:	e040      	b.n	800078e <Get_CRx_Position+0xba>
 800070c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000710:	d033      	beq.n	800077a <Get_CRx_Position+0xa6>
 8000712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000716:	dc09      	bgt.n	800072c <Get_CRx_Position+0x58>
 8000718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800071c:	d029      	beq.n	8000772 <Get_CRx_Position+0x9e>
 800071e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000722:	d028      	beq.n	8000776 <Get_CRx_Position+0xa2>
 8000724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000728:	d021      	beq.n	800076e <Get_CRx_Position+0x9a>
 800072a:	e030      	b.n	800078e <Get_CRx_Position+0xba>
 800072c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000730:	d027      	beq.n	8000782 <Get_CRx_Position+0xae>
 8000732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000736:	dc03      	bgt.n	8000740 <Get_CRx_Position+0x6c>
 8000738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800073c:	d01f      	beq.n	800077e <Get_CRx_Position+0xaa>
 800073e:	e026      	b.n	800078e <Get_CRx_Position+0xba>
 8000740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000744:	d01f      	beq.n	8000786 <Get_CRx_Position+0xb2>
 8000746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800074a:	d01e      	beq.n	800078a <Get_CRx_Position+0xb6>
 800074c:	e01f      	b.n	800078e <Get_CRx_Position+0xba>
		case GPIO_PIN_0:
			return 0;
 800074e:	2300      	movs	r3, #0
 8000750:	e01e      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_1:
			return 4;
 8000752:	2304      	movs	r3, #4
 8000754:	e01c      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_2:
			return 8;
 8000756:	2308      	movs	r3, #8
 8000758:	e01a      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_3:
			return 12;
 800075a:	230c      	movs	r3, #12
 800075c:	e018      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_4:
			return 16;
 800075e:	2310      	movs	r3, #16
 8000760:	e016      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_5:
			return 20;
 8000762:	2314      	movs	r3, #20
 8000764:	e014      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_6:
			return 24;
 8000766:	2318      	movs	r3, #24
 8000768:	e012      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_7:
			return 28;
 800076a:	231c      	movs	r3, #28
 800076c:	e010      	b.n	8000790 <Get_CRx_Position+0xbc>

	//Case PinNumber > GPIO_PIN_7
		case GPIO_PIN_8:
			return 0;
 800076e:	2300      	movs	r3, #0
 8000770:	e00e      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_9:
			return 4;
 8000772:	2304      	movs	r3, #4
 8000774:	e00c      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_10:
			return 8;
 8000776:	2308      	movs	r3, #8
 8000778:	e00a      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_11:
			return 12;
 800077a:	230c      	movs	r3, #12
 800077c:	e008      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_12:
			return 16;
 800077e:	2310      	movs	r3, #16
 8000780:	e006      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_13:
			return 20;
 8000782:	2314      	movs	r3, #20
 8000784:	e004      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_14:
			return 24;
 8000786:	2318      	movs	r3, #24
 8000788:	e002      	b.n	8000790 <Get_CRx_Position+0xbc>
		case GPIO_PIN_15:
			return 28;
 800078a:	231c      	movs	r3, #28
 800078c:	e000      	b.n	8000790 <Get_CRx_Position+0xbc>
	}
	return 0;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
	...

0800079c <MCAL_GPIO_Init>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_Init(GPIO_PinConfig_t* GPIO_PinConfigPtr){
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	static uint8_t GPIO_CLK_InitFlag[5] = {0,0,0,0,0};
	//Check port selected to enable it's clock
	if((GPIO_PinConfigPtr->GPIO_Port == GPIOA) && (GPIO_CLK_InitFlag[0] != 1))
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a7a      	ldr	r2, [pc, #488]	; (8000994 <MCAL_GPIO_Init+0x1f8>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d10d      	bne.n	80007ca <MCAL_GPIO_Init+0x2e>
 80007ae:	4b7a      	ldr	r3, [pc, #488]	; (8000998 <MCAL_GPIO_Init+0x1fc>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d009      	beq.n	80007ca <MCAL_GPIO_Init+0x2e>
	{
		RCC_GPIOA_CLK_EN();
 80007b6:	4b79      	ldr	r3, [pc, #484]	; (800099c <MCAL_GPIO_Init+0x200>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a78      	ldr	r2, [pc, #480]	; (800099c <MCAL_GPIO_Init+0x200>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[0] = 1;
 80007c2:	4b75      	ldr	r3, [pc, #468]	; (8000998 <MCAL_GPIO_Init+0x1fc>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	e04a      	b.n	8000860 <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOB) && (GPIO_CLK_InitFlag[1] != 1))
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a74      	ldr	r2, [pc, #464]	; (80009a0 <MCAL_GPIO_Init+0x204>)
 80007d0:	4293      	cmp	r3, r2
 80007d2:	d10d      	bne.n	80007f0 <MCAL_GPIO_Init+0x54>
 80007d4:	4b70      	ldr	r3, [pc, #448]	; (8000998 <MCAL_GPIO_Init+0x1fc>)
 80007d6:	785b      	ldrb	r3, [r3, #1]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d009      	beq.n	80007f0 <MCAL_GPIO_Init+0x54>
	{
		RCC_GPIOB_CLK_EN();
 80007dc:	4b6f      	ldr	r3, [pc, #444]	; (800099c <MCAL_GPIO_Init+0x200>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a6e      	ldr	r2, [pc, #440]	; (800099c <MCAL_GPIO_Init+0x200>)
 80007e2:	f043 0308 	orr.w	r3, r3, #8
 80007e6:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[1] = 1;
 80007e8:	4b6b      	ldr	r3, [pc, #428]	; (8000998 <MCAL_GPIO_Init+0x1fc>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	705a      	strb	r2, [r3, #1]
 80007ee:	e037      	b.n	8000860 <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOC) && (GPIO_CLK_InitFlag[2] != 1))
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a6b      	ldr	r2, [pc, #428]	; (80009a4 <MCAL_GPIO_Init+0x208>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d10d      	bne.n	8000816 <MCAL_GPIO_Init+0x7a>
 80007fa:	4b67      	ldr	r3, [pc, #412]	; (8000998 <MCAL_GPIO_Init+0x1fc>)
 80007fc:	789b      	ldrb	r3, [r3, #2]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d009      	beq.n	8000816 <MCAL_GPIO_Init+0x7a>
	{
		RCC_GPIOC_CLK_EN();
 8000802:	4b66      	ldr	r3, [pc, #408]	; (800099c <MCAL_GPIO_Init+0x200>)
 8000804:	699b      	ldr	r3, [r3, #24]
 8000806:	4a65      	ldr	r2, [pc, #404]	; (800099c <MCAL_GPIO_Init+0x200>)
 8000808:	f043 0310 	orr.w	r3, r3, #16
 800080c:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[2] = 1;
 800080e:	4b62      	ldr	r3, [pc, #392]	; (8000998 <MCAL_GPIO_Init+0x1fc>)
 8000810:	2201      	movs	r2, #1
 8000812:	709a      	strb	r2, [r3, #2]
 8000814:	e024      	b.n	8000860 <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOD) && (GPIO_CLK_InitFlag[3] != 1))
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a63      	ldr	r2, [pc, #396]	; (80009a8 <MCAL_GPIO_Init+0x20c>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d10d      	bne.n	800083c <MCAL_GPIO_Init+0xa0>
 8000820:	4b5d      	ldr	r3, [pc, #372]	; (8000998 <MCAL_GPIO_Init+0x1fc>)
 8000822:	78db      	ldrb	r3, [r3, #3]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d009      	beq.n	800083c <MCAL_GPIO_Init+0xa0>
	{
		RCC_GPIOD_CLK_EN();
 8000828:	4b5c      	ldr	r3, [pc, #368]	; (800099c <MCAL_GPIO_Init+0x200>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a5b      	ldr	r2, [pc, #364]	; (800099c <MCAL_GPIO_Init+0x200>)
 800082e:	f043 0320 	orr.w	r3, r3, #32
 8000832:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[3] = 1;
 8000834:	4b58      	ldr	r3, [pc, #352]	; (8000998 <MCAL_GPIO_Init+0x1fc>)
 8000836:	2201      	movs	r2, #1
 8000838:	70da      	strb	r2, [r3, #3]
 800083a:	e011      	b.n	8000860 <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOE) && (GPIO_CLK_InitFlag[4] != 1))
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a5a      	ldr	r2, [pc, #360]	; (80009ac <MCAL_GPIO_Init+0x210>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d10c      	bne.n	8000860 <MCAL_GPIO_Init+0xc4>
 8000846:	4b54      	ldr	r3, [pc, #336]	; (8000998 <MCAL_GPIO_Init+0x1fc>)
 8000848:	791b      	ldrb	r3, [r3, #4]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d008      	beq.n	8000860 <MCAL_GPIO_Init+0xc4>
	{
		RCC_GPIOE_CLK_EN();
 800084e:	4b53      	ldr	r3, [pc, #332]	; (800099c <MCAL_GPIO_Init+0x200>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a52      	ldr	r2, [pc, #328]	; (800099c <MCAL_GPIO_Init+0x200>)
 8000854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000858:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[4] = 1;
 800085a:	4b4f      	ldr	r3, [pc, #316]	; (8000998 <MCAL_GPIO_Init+0x1fc>)
 800085c:	2201      	movs	r2, #1
 800085e:	711a      	strb	r2, [r3, #4]
	}

	//Check for alternate function mode (Input or Output) to enable it's clock
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_OUTPUT_OD)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	799b      	ldrb	r3, [r3, #6]
 8000864:	2b05      	cmp	r3, #5
 8000866:	d905      	bls.n	8000874 <MCAL_GPIO_Init+0xd8>
	{
		RCC_AFIO_CLK_EN();
 8000868:	4b4c      	ldr	r3, [pc, #304]	; (800099c <MCAL_GPIO_Init+0x200>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a4b      	ldr	r2, [pc, #300]	; (800099c <MCAL_GPIO_Init+0x200>)
 800086e:	f043 0301 	orr.w	r3, r3, #1
 8000872:	6193      	str	r3, [r2, #24]
	}

	//Pointer holds the configuration register address either High or Low depends on PinNo
	vuint32_t* GPIO_CRx = NULL_PTR;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
	GPIO_CRx = ((GPIO_PinConfigPtr->GPIO_PinNo < GPIO_PIN_8)?&(GPIO_PinConfigPtr->GPIO_Port->CRL):&(GPIO_PinConfigPtr->GPIO_Port->CRH));
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	889b      	ldrh	r3, [r3, #4]
 800087c:	2bff      	cmp	r3, #255	; 0xff
 800087e:	d802      	bhi.n	8000886 <MCAL_GPIO_Init+0xea>
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	e002      	b.n	800088c <MCAL_GPIO_Init+0xf0>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	3304      	adds	r3, #4
 800088c:	60bb      	str	r3, [r7, #8]

	//MODE & CNF Variable (Initialized by it's default reset value)
	uint8_t PinConfig_Value = 0x4;
 800088e:	2304      	movs	r3, #4
 8000890:	73fb      	strb	r3, [r7, #15]

	//Clear MODE & CNF
	(*GPIO_CRx) &= ~(0xF<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	889b      	ldrh	r3, [r3, #4]
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff ff1c 	bl	80006d4 <Get_CRx_Position>
 800089c:	4603      	mov	r3, r0
 800089e:	461a      	mov	r2, r3
 80008a0:	230f      	movs	r3, #15
 80008a2:	4093      	lsls	r3, r2
 80008a4:	43da      	mvns	r2, r3
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	401a      	ands	r2, r3
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	601a      	str	r2, [r3, #0]

	//Check if pin is output
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_INPUT_PD && GPIO_PinConfigPtr->GPIO_Mode < GPIO_MODE_AF_INPUT)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	799b      	ldrb	r3, [r3, #6]
 80008b4:	2b03      	cmp	r3, #3
 80008b6:	d914      	bls.n	80008e2 <MCAL_GPIO_Init+0x146>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	799b      	ldrb	r3, [r3, #6]
 80008bc:	2b07      	cmp	r3, #7
 80008be:	d810      	bhi.n	80008e2 <MCAL_GPIO_Init+0x146>
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	73fb      	strb	r3, [r7, #15]
		//Set MODE & CNF
		PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode-4)<<2) | (GPIO_PinConfigPtr->GPIO_Output_Speed)) & 0x0F;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	799b      	ldrb	r3, [r3, #6]
 80008c8:	3b04      	subs	r3, #4
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	b25a      	sxtb	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	79db      	ldrb	r3, [r3, #7]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b25b      	sxtb	r3, r3
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	73fb      	strb	r3, [r7, #15]
 80008e0:	e037      	b.n	8000952 <MCAL_GPIO_Init+0x1b6>

	//Else pin is input
	else //MODE = 00: Input mode (reset state)
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	73fb      	strb	r3, [r7, #15]

		//Check if Input Analog mode or Input Floating
		if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_ANALOG || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_FLO)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	799b      	ldrb	r3, [r3, #6]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <MCAL_GPIO_Init+0x15a>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	799b      	ldrb	r3, [r3, #6]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d107      	bne.n	8000906 <MCAL_GPIO_Init+0x16a>
		{	//Set MODE & CNF
			PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode)<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	799b      	ldrb	r3, [r3, #6]
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f003 030f 	and.w	r3, r3, #15
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e025      	b.n	8000952 <MCAL_GPIO_Init+0x1b6>
		}

		//Check if Input with pull-up or Input with pull-down
		else if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PD)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	799b      	ldrb	r3, [r3, #6]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d003      	beq.n	8000916 <MCAL_GPIO_Init+0x17a>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	799b      	ldrb	r3, [r3, #6]
 8000912:	2b03      	cmp	r3, #3
 8000914:	d11b      	bne.n	800094e <MCAL_GPIO_Init+0x1b2>
		{
			//Set MODE & CNF
			PinConfig_Value = ((GPIO_MODE_INPUT_PU<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 8000916:	2308      	movs	r3, #8
 8000918:	73fb      	strb	r3, [r7, #15]

			//Check if Input with pull-up
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	799b      	ldrb	r3, [r3, #6]
 800091e:	2b02      	cmp	r3, #2
 8000920:	d10a      	bne.n	8000938 <MCAL_GPIO_Init+0x19c>
			{
				//Set output data register ODR because pull up specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	68da      	ldr	r2, [r3, #12]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	889b      	ldrh	r3, [r3, #4]
 800092c:	4619      	mov	r1, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	430a      	orrs	r2, r1
 8000934:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000936:	e00c      	b.n	8000952 <MCAL_GPIO_Init+0x1b6>

			//Check if Input with pull-down
			else
			{
				//Clear output data register ODR because pull down specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	68da      	ldr	r2, [r3, #12]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	889b      	ldrh	r3, [r3, #4]
 8000942:	4619      	mov	r1, r3
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	430a      	orrs	r2, r1
 800094a:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800094c:	e001      	b.n	8000952 <MCAL_GPIO_Init+0x1b6>
		}

		//Else Alternate function input
		else
		{
			PinConfig_Value = ((GPIO_MODE_INPUT_FLO<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 800094e:	2304      	movs	r3, #4
 8000950:	73fb      	strb	r3, [r7, #15]
		}

	}

	//Write on CRx register to configure pin -> x is (H or L)
	(*GPIO_CRx) &= ~(PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 8000952:	7bfc      	ldrb	r4, [r7, #15]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	889b      	ldrh	r3, [r3, #4]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff febb 	bl	80006d4 <Get_CRx_Position>
 800095e:	4603      	mov	r3, r0
 8000960:	fa04 f303 	lsl.w	r3, r4, r3
 8000964:	43da      	mvns	r2, r3
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	401a      	ands	r2, r3
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	601a      	str	r2, [r3, #0]
	(*GPIO_CRx) |= (PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 8000970:	7bfc      	ldrb	r4, [r7, #15]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	889b      	ldrh	r3, [r3, #4]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff feac 	bl	80006d4 <Get_CRx_Position>
 800097c:	4603      	mov	r3, r0
 800097e:	fa04 f203 	lsl.w	r2, r4, r3
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	431a      	orrs	r2, r3
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	601a      	str	r2, [r3, #0]

	return;
 800098c:	bf00      	nop

}
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	40010800 	.word	0x40010800
 8000998:	20000090 	.word	0x20000090
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010c00 	.word	0x40010c00
 80009a4:	40011000 	.word	0x40011000
 80009a8:	40011400 	.word	0x40011400
 80009ac:	40011800 	.word	0x40011800

080009b0 <MCAL_GPIO_WritePin>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_WritePin(GPIO_PinConfig_t* GPIO_PinConfigPtr, uint8_t PinValue){
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]

	//Check if sent pin state is one.
	if(PinValue == GPIO_PIN_SET)
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d105      	bne.n	80009ce <MCAL_GPIO_WritePin+0x1e>
	{

		GPIO_PinConfigPtr->GPIO_Port->BSRR = GPIO_PinConfigPtr->GPIO_PinNo;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	889a      	ldrh	r2, [r3, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	611a      	str	r2, [r3, #16]
	else
	{
		GPIO_PinConfigPtr->GPIO_Port->BRR = GPIO_PinConfigPtr->GPIO_PinNo;
	}

}
 80009cc:	e004      	b.n	80009d8 <MCAL_GPIO_WritePin+0x28>
		GPIO_PinConfigPtr->GPIO_Port->BRR = GPIO_PinConfigPtr->GPIO_PinNo;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	889a      	ldrh	r2, [r3, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	615a      	str	r2, [r3, #20]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
	...

080009e4 <MCAL_SPI_Init>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_SPI_Init(SPI_Config_t* SPI_ConfigPtr){
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]

	// Safety for registers
	uint16_t SPIx_CR1_temp = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	81fb      	strh	r3, [r7, #14]
	uint16_t SPIx_CR2_temp = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	81bb      	strh	r3, [r7, #12]

	/*
	* 1) Enable the SPI Clock according to the Channel Selected.
	*/
	if(SPI_ConfigPtr->SPIx == SPI1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a42      	ldr	r2, [pc, #264]	; (8000b04 <MCAL_SPI_Init+0x120>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d106      	bne.n	8000a0c <MCAL_SPI_Init+0x28>
		RCC_SPI1_CLK_EN();
 80009fe:	4b42      	ldr	r3, [pc, #264]	; (8000b08 <MCAL_SPI_Init+0x124>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	4a41      	ldr	r2, [pc, #260]	; (8000b08 <MCAL_SPI_Init+0x124>)
 8000a04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a08:	6193      	str	r3, [r2, #24]
 8000a0a:	e005      	b.n	8000a18 <MCAL_SPI_Init+0x34>
	else
		RCC_SPI2_CLK_EN();
 8000a0c:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <MCAL_SPI_Init+0x124>)
 8000a0e:	69db      	ldr	r3, [r3, #28]
 8000a10:	4a3d      	ldr	r2, [pc, #244]	; (8000b08 <MCAL_SPI_Init+0x124>)
 8000a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a16:	61d3      	str	r3, [r2, #28]

	/*
	* 2) Set the device Mode (Master or Slave) & Enable the SPI Peripheral.
	*/
	SPIx_CR1_temp |= SPI_ConfigPtr->SPI_Mode;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	889a      	ldrh	r2, [r3, #4]
 8000a1c:	89fb      	ldrh	r3, [r7, #14]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	81fb      	strh	r3, [r7, #14]
	/*
	* 3) Set the device communication node (FullDuplex - HafDuplex - Simplex).
	* NOTE: We aim only for bits 15 and 10 (BIDIMODE & RXONLY), therefore we masked them since they contain another bits
	* in the definition for discrimination.
	*/
	SPIx_CR1_temp |= (SPI_ConfigPtr->SPI_CommMode & 0xC400);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	88db      	ldrh	r3, [r3, #6]
 8000a26:	b21b      	sxth	r3, r3
 8000a28:	f423 536f 	bic.w	r3, r3, #15296	; 0x3bc0
 8000a2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000a30:	b21a      	sxth	r2, r3
 8000a32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	b21b      	sxth	r3, r3
 8000a3a:	81fb      	strh	r3, [r7, #14]

	/*
	* 4) Check if Master Mode is Selected to define the serial clock baud rate.
	*/
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	889b      	ldrh	r3, [r3, #4]
 8000a40:	2b04      	cmp	r3, #4
 8000a42:	d104      	bne.n	8000a4e <MCAL_SPI_Init+0x6a>
		SPIx_CR1_temp |= SPI_ConfigPtr->SPI_PreScaler;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	8a5a      	ldrh	r2, [r3, #18]
 8000a48:	89fb      	ldrh	r3, [r7, #14]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	81fb      	strh	r3, [r7, #14]

	/*
	* 5) Set the DFF bit to define 8- or 16-bit data frame format.
	*/
	SPIx_CR1_temp |= SPI_ConfigPtr->SPI_DataSize;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	895a      	ldrh	r2, [r3, #10]
 8000a52:	89fb      	ldrh	r3, [r7, #14]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	81fb      	strh	r3, [r7, #14]

	/*
	* 6) Select the CPOL and CPHA bits to define one of the four relationships between the data transfer and the serial clock.
	*/
	SPIx_CR1_temp |= (SPI_ConfigPtr->SPI_ClkPhase) | (SPI_ConfigPtr->SPI_ClkPolarity);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	89da      	ldrh	r2, [r3, #14]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	899b      	ldrh	r3, [r3, #12]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	89fb      	ldrh	r3, [r7, #14]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	81fb      	strh	r3, [r7, #14]

	/*
	* 7) Configure the LSBFIRST bit in the SPI_CR1 register to define the frame format.
	*/
	SPIx_CR1_temp |= SPI_ConfigPtr->SPI_FrameFormat;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	891a      	ldrh	r2, [r3, #8]
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	81fb      	strh	r3, [r7, #14]

	if(SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_MASTER_OD || SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_MASTER_OE)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	8a1b      	ldrh	r3, [r3, #16]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d003      	beq.n	8000a84 <MCAL_SPI_Init+0xa0>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	8a1b      	ldrh	r3, [r3, #16]
 8000a80:	2b04      	cmp	r3, #4
 8000a82:	d105      	bne.n	8000a90 <MCAL_SPI_Init+0xac>
		SPIx_CR2_temp |= SPI_ConfigPtr->SPI_SlaveSelect;
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	8a1a      	ldrh	r2, [r3, #16]
 8000a88:	89bb      	ldrh	r3, [r7, #12]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	81bb      	strh	r3, [r7, #12]
 8000a8e:	e004      	b.n	8000a9a <MCAL_SPI_Init+0xb6>
	else
		SPIx_CR1_temp |= SPI_ConfigPtr->SPI_SlaveSelect;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	8a1a      	ldrh	r2, [r3, #16]
 8000a94:	89fb      	ldrh	r3, [r7, #14]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	81fb      	strh	r3, [r7, #14]

	/*
	* 8) Enable or Disable Interrupt according to the configuration & Update Interrupt Handling CallBack.
	*/
	if(SPI_ConfigPtr->SPI_IRQ_EN != SPI_IE_DISABLE){
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	8a9b      	ldrh	r3, [r3, #20]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01e      	beq.n	8000ae0 <MCAL_SPI_Init+0xfc>

		//Enable Interrupt mask in SPI
		SPIx_CR2_temp |= SPI_ConfigPtr->SPI_IRQ_EN;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	8a9a      	ldrh	r2, [r3, #20]
 8000aa6:	89bb      	ldrh	r3, [r7, #12]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	81bb      	strh	r3, [r7, #12]

		//Enable Interrupt mask in NVIC
		if(SPI_ConfigPtr->SPIx == SPI1)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <MCAL_SPI_Init+0x120>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d10a      	bne.n	8000acc <MCAL_SPI_Init+0xe8>
		{
			g_IRQ_CallBackPtr[0] = SPI_ConfigPtr->IRQ_CallBackPtr;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	699b      	ldr	r3, [r3, #24]
 8000aba:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <MCAL_SPI_Init+0x128>)
 8000abc:	6013      	str	r3, [r2, #0]
			NVIC_IRQ35_EN();
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MCAL_SPI_Init+0x12c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <MCAL_SPI_Init+0x12c>)
 8000ac4:	f043 0308 	orr.w	r3, r3, #8
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	e009      	b.n	8000ae0 <MCAL_SPI_Init+0xfc>
		}
		else
		{
			g_IRQ_CallBackPtr[1] = SPI_ConfigPtr->IRQ_CallBackPtr;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <MCAL_SPI_Init+0x128>)
 8000ad2:	6053      	str	r3, [r2, #4]
			NVIC_IRQ36_EN();
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <MCAL_SPI_Init+0x12c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a0d      	ldr	r2, [pc, #52]	; (8000b10 <MCAL_SPI_Init+0x12c>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6013      	str	r3, [r2, #0]
	}

	/*
	* 9) Enable the SPI peripheral by setting the SPE bit to 1.
	*/
	SPIx_CR1_temp |= SPI_ENABLE;
 8000ae0:	89fb      	ldrh	r3, [r7, #14]
 8000ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae6:	81fb      	strh	r3, [r7, #14]

	/*
	* 10) Set the real registers values with the safety templates.
	*/
	SPI_ConfigPtr->SPIx->CR1 = SPIx_CR1_temp;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	89fa      	ldrh	r2, [r7, #14]
 8000aee:	601a      	str	r2, [r3, #0]
	SPI_ConfigPtr->SPIx->CR2 = SPIx_CR2_temp;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	89ba      	ldrh	r2, [r7, #12]
 8000af6:	605a      	str	r2, [r3, #4]

}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40013000 	.word	0x40013000
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	20000098 	.word	0x20000098
 8000b10:	e000e104 	.word	0xe000e104

08000b14 <MCAL_SPI_GPIO_SetPins>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_SPI_GPIO_SetPins(SPI_Config_t* SPI_ConfigPtr){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08a      	sub	sp, #40	; 0x28
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t MOSI,MISO,SCK,NSS;
	/*
	* 1) Check if SPIx is SPI1 or SPI2.
	*/
	if(SPI_ConfigPtr->SPIx == SPI1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a63      	ldr	r2, [pc, #396]	; (8000cb0 <MCAL_SPI_GPIO_SetPins+0x19c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d110      	bne.n	8000b48 <MCAL_SPI_GPIO_SetPins+0x34>
	{
		//Configure NSS Pin Data
		NSS.GPIO_Port = GPIOA;
 8000b26:	4b63      	ldr	r3, [pc, #396]	; (8000cb4 <MCAL_SPI_GPIO_SetPins+0x1a0>)
 8000b28:	60bb      	str	r3, [r7, #8]
		NSS.GPIO_PinNo = GPIO_PIN_4;
 8000b2a:	2310      	movs	r3, #16
 8000b2c:	81bb      	strh	r3, [r7, #12]

		//Configure SCK Pin Data
		SCK.GPIO_Port = GPIOA;
 8000b2e:	4b61      	ldr	r3, [pc, #388]	; (8000cb4 <MCAL_SPI_GPIO_SetPins+0x1a0>)
 8000b30:	613b      	str	r3, [r7, #16]
		SCK.GPIO_PinNo = GPIO_PIN_5;
 8000b32:	2320      	movs	r3, #32
 8000b34:	82bb      	strh	r3, [r7, #20]

		//Configure MISO Pin Data
		MISO.GPIO_Port = GPIOA;
 8000b36:	4b5f      	ldr	r3, [pc, #380]	; (8000cb4 <MCAL_SPI_GPIO_SetPins+0x1a0>)
 8000b38:	61bb      	str	r3, [r7, #24]
		MISO.GPIO_PinNo = GPIO_PIN_6;
 8000b3a:	2340      	movs	r3, #64	; 0x40
 8000b3c:	83bb      	strh	r3, [r7, #28]

		//Configure MOSI Pin Data
		MOSI.GPIO_Port = GPIOA;
 8000b3e:	4b5d      	ldr	r3, [pc, #372]	; (8000cb4 <MCAL_SPI_GPIO_SetPins+0x1a0>)
 8000b40:	623b      	str	r3, [r7, #32]
		MOSI.GPIO_PinNo = GPIO_PIN_7;
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000b46:	e013      	b.n	8000b70 <MCAL_SPI_GPIO_SetPins+0x5c>
	}
	else
	{
		//Configure NSS Pin Data
		NSS.GPIO_Port = GPIOB;
 8000b48:	4b5b      	ldr	r3, [pc, #364]	; (8000cb8 <MCAL_SPI_GPIO_SetPins+0x1a4>)
 8000b4a:	60bb      	str	r3, [r7, #8]
		NSS.GPIO_PinNo = GPIO_PIN_12;
 8000b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b50:	81bb      	strh	r3, [r7, #12]

		//Configure SCK Pin Data
		SCK.GPIO_Port = GPIOB;
 8000b52:	4b59      	ldr	r3, [pc, #356]	; (8000cb8 <MCAL_SPI_GPIO_SetPins+0x1a4>)
 8000b54:	613b      	str	r3, [r7, #16]
		SCK.GPIO_PinNo = GPIO_PIN_13;
 8000b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5a:	82bb      	strh	r3, [r7, #20]

		//Configure MISO Pin Data
		MISO.GPIO_Port = GPIOB;
 8000b5c:	4b56      	ldr	r3, [pc, #344]	; (8000cb8 <MCAL_SPI_GPIO_SetPins+0x1a4>)
 8000b5e:	61bb      	str	r3, [r7, #24]
		MISO.GPIO_PinNo = GPIO_PIN_14;
 8000b60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b64:	83bb      	strh	r3, [r7, #28]

		//Configure MOSI Pin Data
		MOSI.GPIO_Port = GPIOB;
 8000b66:	4b54      	ldr	r3, [pc, #336]	; (8000cb8 <MCAL_SPI_GPIO_SetPins+0x1a4>)
 8000b68:	623b      	str	r3, [r7, #32]
		MOSI.GPIO_PinNo = GPIO_PIN_15;
 8000b6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b6e:	84bb      	strh	r3, [r7, #36]	; 0x24


	/*
	* 2) Configure SCK Pin.
	*/
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	889b      	ldrh	r3, [r3, #4]
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d104      	bne.n	8000b82 <MCAL_SPI_GPIO_SetPins+0x6e>
	{
		SCK.GPIO_Mode = GPIO_MODE_AF_OUTPUT_PP;
 8000b78:	2306      	movs	r3, #6
 8000b7a:	75bb      	strb	r3, [r7, #22]
		SCK.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	75fb      	strb	r3, [r7, #23]
 8000b80:	e007      	b.n	8000b92 <MCAL_SPI_GPIO_SetPins+0x7e>
	}
	else if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_SLAVE)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	889b      	ldrh	r3, [r3, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d103      	bne.n	8000b92 <MCAL_SPI_GPIO_SetPins+0x7e>
	{
		SCK.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	75bb      	strb	r3, [r7, #22]
		SCK.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	75fb      	strb	r3, [r7, #23]
	}
	MCAL_GPIO_Init(&SCK);
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fe00 	bl	800079c <MCAL_GPIO_Init>

	/*
	* 2) Configure MOSI Pin.
	*/
	//Check if the MOSI on the Master or Slave Device won't be configured at all first and if not, configure it as it should be.
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	889b      	ldrh	r3, [r3, #4]
 8000ba0:	2b04      	cmp	r3, #4
 8000ba2:	d110      	bne.n	8000bc6 <MCAL_SPI_GPIO_SetPins+0xb2>
	{
		if(SPI_ConfigPtr->SPI_CommMode == SPI_SIMPLEX_RX_ONLY)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	88db      	ldrh	r3, [r3, #6]
 8000ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bac:	d024      	beq.n	8000bf8 <MCAL_SPI_GPIO_SetPins+0xe4>
			//Do Nothing
			//MOSI on the Master Device won't be configured at all.
		}
		else
		{
			MOSI.GPIO_Mode = GPIO_MODE_AF_OUTPUT_PP;
 8000bae:	2306      	movs	r3, #6
 8000bb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			MOSI.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			MCAL_GPIO_Init(&MOSI);
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff fdec 	bl	800079c <MCAL_GPIO_Init>
 8000bc4:	e018      	b.n	8000bf8 <MCAL_SPI_GPIO_SetPins+0xe4>
		}
	}
	else
	{
		if(SPI_ConfigPtr->SPI_CommMode == SPI_HALF_DUPLEX_TX || SPI_ConfigPtr->SPI_CommMode == SPI_HALF_DUPLEX_RX
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	88db      	ldrh	r3, [r3, #6]
 8000bca:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000bce:	d013      	beq.n	8000bf8 <MCAL_SPI_GPIO_SetPins+0xe4>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	88db      	ldrh	r3, [r3, #6]
 8000bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bd8:	d00e      	beq.n	8000bf8 <MCAL_SPI_GPIO_SetPins+0xe4>
				|| SPI_ConfigPtr->SPI_CommMode == SPI_SIMPLEX_TX_ONLY)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	88db      	ldrh	r3, [r3, #6]
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	d00a      	beq.n	8000bf8 <MCAL_SPI_GPIO_SetPins+0xe4>
			//Do Nothing
			//MOSI on the Slave Device won't be configured at all.
		}
		else
		{
			MOSI.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000be2:	2301      	movs	r3, #1
 8000be4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			MOSI.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			MCAL_GPIO_Init(&MOSI);
 8000bee:	f107 0320 	add.w	r3, r7, #32
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff fdd2 	bl	800079c <MCAL_GPIO_Init>

	/*
	* 3) Configure MISO Pin.
	*/
	//Check if the MISO on the Master or Slave Device won't be configured at all first and if not, configure it as it should be.
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	889b      	ldrh	r3, [r3, #4]
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	d117      	bne.n	8000c30 <MCAL_SPI_GPIO_SetPins+0x11c>
	{
		if(SPI_ConfigPtr->SPI_CommMode == SPI_HALF_DUPLEX_TX || SPI_ConfigPtr->SPI_CommMode == SPI_HALF_DUPLEX_RX
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	88db      	ldrh	r3, [r3, #6]
 8000c04:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8000c08:	d020      	beq.n	8000c4c <MCAL_SPI_GPIO_SetPins+0x138>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	88db      	ldrh	r3, [r3, #6]
 8000c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000c12:	d01b      	beq.n	8000c4c <MCAL_SPI_GPIO_SetPins+0x138>
				|| SPI_ConfigPtr->SPI_CommMode == SPI_SIMPLEX_TX_ONLY)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	88db      	ldrh	r3, [r3, #6]
 8000c18:	2b04      	cmp	r3, #4
 8000c1a:	d017      	beq.n	8000c4c <MCAL_SPI_GPIO_SetPins+0x138>
			//Do Nothing
			//MISO on the Master Device won't be configured at all.
		}
		else
		{
			MISO.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	77bb      	strb	r3, [r7, #30]
			MISO.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	77fb      	strb	r3, [r7, #31]
			MCAL_GPIO_Init(&MISO);
 8000c24:	f107 0318 	add.w	r3, r7, #24
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fdb7 	bl	800079c <MCAL_GPIO_Init>
 8000c2e:	e00d      	b.n	8000c4c <MCAL_SPI_GPIO_SetPins+0x138>
		}
	}
	else
	{
		if(SPI_ConfigPtr->SPI_CommMode == SPI_SIMPLEX_RX_ONLY)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	88db      	ldrh	r3, [r3, #6]
 8000c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c38:	d008      	beq.n	8000c4c <MCAL_SPI_GPIO_SetPins+0x138>
			//Do Nothing
			//MISO on the Slave Device won't be configured at all.
		}
		else
		{
			MISO.GPIO_Mode = GPIO_MODE_AF_OUTPUT_PP;
 8000c3a:	2306      	movs	r3, #6
 8000c3c:	77bb      	strb	r3, [r7, #30]
			MISO.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	77fb      	strb	r3, [r7, #31]
			MCAL_GPIO_Init(&MISO);
 8000c42:	f107 0318 	add.w	r3, r7, #24
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff fda8 	bl	800079c <MCAL_GPIO_Init>
	}

	/*
	* 4) Configure NSS Pin.
	*/
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	889b      	ldrh	r3, [r3, #4]
 8000c50:	2b04      	cmp	r3, #4
 8000c52:	d11b      	bne.n	8000c8c <MCAL_SPI_GPIO_SetPins+0x178>
	{
		if(SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_MASTER_OE)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	8a1b      	ldrh	r3, [r3, #16]
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d109      	bne.n	8000c70 <MCAL_SPI_GPIO_SetPins+0x15c>
		{
			NSS.GPIO_Mode = GPIO_MODE_AF_OUTPUT_PP;
 8000c5c:	2306      	movs	r3, #6
 8000c5e:	73bb      	strb	r3, [r7, #14]
			NSS.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(&NSS);
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fd97 	bl	800079c <MCAL_GPIO_Init>
			NSS.GPIO_Mode = GPIO_MODE_INPUT_FLO;
			NSS.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
			MCAL_GPIO_Init(&NSS);
		}
	}
}
 8000c6e:	e01a      	b.n	8000ca6 <MCAL_SPI_GPIO_SetPins+0x192>
		else if(SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_MASTER_OD)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	8a1b      	ldrh	r3, [r3, #16]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d116      	bne.n	8000ca6 <MCAL_SPI_GPIO_SetPins+0x192>
			NSS.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	73bb      	strb	r3, [r7, #14]
			NSS.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(&NSS);
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fd89 	bl	800079c <MCAL_GPIO_Init>
}
 8000c8a:	e00c      	b.n	8000ca6 <MCAL_SPI_GPIO_SetPins+0x192>
		if(SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_SLAVE)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	8a1b      	ldrh	r3, [r3, #16]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d108      	bne.n	8000ca6 <MCAL_SPI_GPIO_SetPins+0x192>
			NSS.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73bb      	strb	r3, [r7, #14]
			NSS.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73fb      	strb	r3, [r7, #15]
			MCAL_GPIO_Init(&NSS);
 8000c9c:	f107 0308 	add.w	r3, r7, #8
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fd7b 	bl	800079c <MCAL_GPIO_Init>
}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40013000 	.word	0x40013000
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	40010c00 	.word	0x40010c00

08000cbc <MCAL_SPI_Transmit>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_SPI_Transmit(SPI_Config_t* SPI_ConfigPtr, uint16_t* pTxBuffer, SPI_Polling_Mechanism_t Polling_Status){
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	71fb      	strb	r3, [r7, #7]

	//Check for Polling_Status
	if(Polling_Status == SPI_Polling_Enable)
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d107      	bne.n	8000ce0 <MCAL_SPI_Transmit+0x24>
		//wait for transmit data register to be empty
		while( ! ( (SPI_ConfigPtr->SPIx->SR) & (1<<1) ) );
 8000cd0:	bf00      	nop
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0f8      	beq.n	8000cd2 <MCAL_SPI_Transmit+0x16>

	//Send the data to the Tx Buffer
	SPI_ConfigPtr->SPIx->DR = (*pTxBuffer);
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	881a      	ldrh	r2, [r3, #0]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	60da      	str	r2, [r3, #12]

}
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr

08000cf4 <MCAL_SPI_Receive>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_SPI_Receive(SPI_Config_t* SPI_ConfigPtr, uint16_t* pTxBuffer, SPI_Polling_Mechanism_t Polling_Status){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	71fb      	strb	r3, [r7, #7]

	//Check for Polling_Status
	if(Polling_Status == SPI_Polling_Enable)
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d107      	bne.n	8000d18 <MCAL_SPI_Receive+0x24>
		//wait for receive data register to be empty
		while( ! ( (SPI_ConfigPtr->SPIx->SR) & (1<<0) ) );
 8000d08:	bf00      	nop
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0f8      	beq.n	8000d0a <MCAL_SPI_Receive+0x16>

	//Send the data to the Tx Buffer
	(*pTxBuffer) = (uint16_t)SPI_ConfigPtr->SPIx->DR;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	801a      	strh	r2, [r3, #0]

}
 8000d24:	bf00      	nop
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <MCAL_SPI_TX_RX>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock.
*
*/
void MCAL_SPI_TX_RX(SPI_Config_t* SPI_ConfigPtr, uint16_t* pTxBuffer, SPI_Polling_Mechanism_t Polling_Status){
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	4613      	mov	r3, r2
 8000d3a:	71fb      	strb	r3, [r7, #7]

	//Transmit Data
	MCAL_SPI_Transmit(SPI_ConfigPtr,pTxBuffer,Polling_Status);
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68b9      	ldr	r1, [r7, #8]
 8000d42:	68f8      	ldr	r0, [r7, #12]
 8000d44:	f7ff ffba 	bl	8000cbc <MCAL_SPI_Transmit>
	//Then Receive Data
	MCAL_SPI_Receive(SPI_ConfigPtr,pTxBuffer,Polling_Status);
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	461a      	mov	r2, r3
 8000d4c:	68b9      	ldr	r1, [r7, #8]
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f7ff ffd0 	bl	8000cf4 <MCAL_SPI_Receive>

}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <MCAL_SPI_receiveString>:
*
* Note				- Supports polling technique only - cannot be used with interrupts.
*
*/
void MCAL_SPI_receiveString(SPI_Config_t* SPI_ConfigPtr, uint8_t* Str)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]

	uint8_t i = 0;
 8000d66:	2300      	movs	r3, #0
 8000d68:	73fb      	strb	r3, [r7, #15]
	uint16_t DataTemp;
	MCAL_SPI_TX_RX(SPI_ConfigPtr,&DataTemp,SPI_Polling_Enable);
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	2201      	movs	r2, #1
 8000d70:	4619      	mov	r1, r3
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff ffdb 	bl	8000d2e <MCAL_SPI_TX_RX>
	while(DataTemp != '#')
 8000d78:	e00f      	b.n	8000d9a <MCAL_SPI_receiveString+0x3e>
	{
		Str[i] = DataTemp;
 8000d7a:	89b9      	ldrh	r1, [r7, #12]
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	683a      	ldr	r2, [r7, #0]
 8000d80:	4413      	add	r3, r2
 8000d82:	b2ca      	uxtb	r2, r1
 8000d84:	701a      	strb	r2, [r3, #0]
		MCAL_SPI_TX_RX(SPI_ConfigPtr,&DataTemp,SPI_Polling_Enable);
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f7ff ffcd 	bl	8000d2e <MCAL_SPI_TX_RX>
		i++;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
 8000d96:	3301      	adds	r3, #1
 8000d98:	73fb      	strb	r3, [r7, #15]
	while(DataTemp != '#')
 8000d9a:	89bb      	ldrh	r3, [r7, #12]
 8000d9c:	2b23      	cmp	r3, #35	; 0x23
 8000d9e:	d1ec      	bne.n	8000d7a <MCAL_SPI_receiveString+0x1e>
	}
	Str[i] = '\0';
 8000da0:	7bfb      	ldrb	r3, [r7, #15]
 8000da2:	683a      	ldr	r2, [r7, #0]
 8000da4:	4413      	add	r3, r2
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]

}
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <SPI1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void SPI1_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000db8:	4b02      	ldr	r3, [pc, #8]	; (8000dc4 <SPI1_IRQHandler+0x10>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4798      	blx	r3
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000098 	.word	0x20000098

08000dc8 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8000dcc:	4b02      	ldr	r3, [pc, #8]	; (8000dd8 <SPI2_IRQHandler+0x10>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	4798      	blx	r3
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000098 	.word	0x20000098

08000ddc <USART1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void USART1_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <USART1_IRQHandler+0x10>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4798      	blx	r3
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000a0 	.word	0x200000a0

08000df0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <USART2_IRQHandler+0x10>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	4798      	blx	r3
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000a0 	.word	0x200000a0

08000e04 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 8000e08:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <USART3_IRQHandler+0x10>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	4798      	blx	r3
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200000a0 	.word	0x200000a0

08000e18 <main>:

void setup(void);
void WaitForSlaveSetup(void);

int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b09a      	sub	sp, #104	; 0x68
 8000e1c:	af00      	add	r7, sp, #0
	setup();
 8000e1e:	f000 f815 	bl	8000e4c <setup>
		MCAL_GPIO_WritePin(&nss1, GPIO_PIN_SET);
	#endif

	#ifdef MCU_Act_As_Slave
		uint8_t Buffer[100];
		MCAL_SPI_receiveString(&spi1,Buffer);
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4807      	ldr	r0, [pc, #28]	; (8000e44 <main+0x2c>)
 8000e28:	f7ff ff98 	bl	8000d5c <MCAL_SPI_receiveString>
		if(PrintFlag == 1)
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <main+0x30>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d106      	bne.n	8000e42 <main+0x2a>
		{
			HAL_LCD_WriteString(Buffer);
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fb10 	bl	800045c <HAL_LCD_WriteString>
			PrintFlag = 0;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <main+0x30>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	701a      	strb	r2, [r3, #0]
		}
	#endif

    while(1)
 8000e42:	e7fe      	b.n	8000e42 <main+0x2a>
 8000e44:	200000ac 	.word	0x200000ac
 8000e48:	20000031 	.word	0x20000031

08000e4c <setup>:
//==================================================================================================================================//
//==================================================================================================================================//
//==================================================================================================================================//

void setup(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
	//Common Configuration for master & slave
	spi1.SPIx = SPI1;
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <setup+0x5c>)
 8000e52:	4a16      	ldr	r2, [pc, #88]	; (8000eac <setup+0x60>)
 8000e54:	601a      	str	r2, [r3, #0]
	spi1.SPI_ClkPhase = SPI_2ND_EDGE_CAPTURE_STROBE;
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <setup+0x5c>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	81da      	strh	r2, [r3, #14]
	spi1.SPI_ClkPolarity = SPI_CLOCK_IDLE_HIGH;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <setup+0x5c>)
 8000e5e:	2202      	movs	r2, #2
 8000e60:	819a      	strh	r2, [r3, #12]
	spi1.SPI_DataSize = SPI_DATA_SIZE_8;
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <setup+0x5c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	815a      	strh	r2, [r3, #10]
	spi1.SPI_FrameFormat = SPI_FRAME_FORMAT_MSB;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <setup+0x5c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	811a      	strh	r2, [r3, #8]
	spi1.SPI_PreScaler = SPI_PRESCALER_DIVISOR_8;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <setup+0x5c>)
 8000e70:	2210      	movs	r2, #16
 8000e72:	825a      	strh	r2, [r3, #18]
	MCAL_GPIO_Init(&nss1);
	MCAL_GPIO_WritePin(&nss1, GPIO_PIN_SET);
#endif

#ifdef MCU_Act_As_Slave
	spi1.SPI_CommMode = SPI_HALF_DUPLEX_RX;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <setup+0x5c>)
 8000e76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e7a:	80da      	strh	r2, [r3, #6]
	spi1.SPI_Mode = SPI_MODE_SLAVE;
 8000e7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ea8 <setup+0x5c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	809a      	strh	r2, [r3, #4]
	spi1.SPI_SlaveSelect = SPI_SS_HARDWARE_SLAVE;
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <setup+0x5c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	821a      	strh	r2, [r3, #16]
	spi1.SPI_IRQ_EN = SPI_IE_DISABLE;
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <setup+0x5c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	829a      	strh	r2, [r3, #20]
	spi1.IRQ_CallBackPtr = NULL_PTR;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <setup+0x5c>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
	//MCAL_GPIO_Init(&led);
	HAL_LCD_Init();
 8000e94:	f7ff fa22 	bl	80002dc <HAL_LCD_Init>
#endif

	MCAL_SPI_Init(&spi1);
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <setup+0x5c>)
 8000e9a:	f7ff fda3 	bl	80009e4 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_SetPins(&spi1);
 8000e9e:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <setup+0x5c>)
 8000ea0:	f7ff fe38 	bl	8000b14 <MCAL_SPI_GPIO_SetPins>
}
 8000ea4:	bf00      	nop
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200000ac 	.word	0x200000ac
 8000eac:	40013000 	.word	0x40013000

08000eb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb0:	480d      	ldr	r0, [pc, #52]	; (8000ee8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eb2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000eb4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <LoopForever+0x6>)
  ldr r1, =_edata
 8000eba:	490d      	ldr	r1, [pc, #52]	; (8000ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ebc:	4a0d      	ldr	r2, [pc, #52]	; (8000ef4 <LoopForever+0xe>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec0:	e002      	b.n	8000ec8 <LoopCopyDataInit>

08000ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec6:	3304      	adds	r3, #4

08000ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ecc:	d3f9      	bcc.n	8000ec2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ece:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed0:	4c0a      	ldr	r4, [pc, #40]	; (8000efc <LoopForever+0x16>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed4:	e001      	b.n	8000eda <LoopFillZerobss>

08000ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed8:	3204      	adds	r2, #4

08000eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000edc:	d3fb      	bcc.n	8000ed6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ede:	f000 f811 	bl	8000f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ee2:	f7ff ff99 	bl	8000e18 <main>

08000ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee6:	e7fe      	b.n	8000ee6 <LoopForever>
  ldr   r0, =_estack
 8000ee8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef0:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000ef4:	08000f6c 	.word	0x08000f6c
  ldr r2, =_sbss
 8000ef8:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000efc:	200000c8 	.word	0x200000c8

08000f00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f00:	e7fe      	b.n	8000f00 <ADC1_2_IRQHandler>
	...

08000f04 <__libc_init_array>:
 8000f04:	b570      	push	{r4, r5, r6, lr}
 8000f06:	2500      	movs	r5, #0
 8000f08:	4e0c      	ldr	r6, [pc, #48]	; (8000f3c <__libc_init_array+0x38>)
 8000f0a:	4c0d      	ldr	r4, [pc, #52]	; (8000f40 <__libc_init_array+0x3c>)
 8000f0c:	1ba4      	subs	r4, r4, r6
 8000f0e:	10a4      	asrs	r4, r4, #2
 8000f10:	42a5      	cmp	r5, r4
 8000f12:	d109      	bne.n	8000f28 <__libc_init_array+0x24>
 8000f14:	f000 f81a 	bl	8000f4c <_init>
 8000f18:	2500      	movs	r5, #0
 8000f1a:	4e0a      	ldr	r6, [pc, #40]	; (8000f44 <__libc_init_array+0x40>)
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <__libc_init_array+0x44>)
 8000f1e:	1ba4      	subs	r4, r4, r6
 8000f20:	10a4      	asrs	r4, r4, #2
 8000f22:	42a5      	cmp	r5, r4
 8000f24:	d105      	bne.n	8000f32 <__libc_init_array+0x2e>
 8000f26:	bd70      	pop	{r4, r5, r6, pc}
 8000f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f2c:	4798      	blx	r3
 8000f2e:	3501      	adds	r5, #1
 8000f30:	e7ee      	b.n	8000f10 <__libc_init_array+0xc>
 8000f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f36:	4798      	blx	r3
 8000f38:	3501      	adds	r5, #1
 8000f3a:	e7f2      	b.n	8000f22 <__libc_init_array+0x1e>
 8000f3c:	08000f64 	.word	0x08000f64
 8000f40:	08000f64 	.word	0x08000f64
 8000f44:	08000f64 	.word	0x08000f64
 8000f48:	08000f68 	.word	0x08000f68

08000f4c <_init>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr

08000f58 <_fini>:
 8000f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5a:	bf00      	nop
 8000f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5e:	bc08      	pop	{r3}
 8000f60:	469e      	mov	lr, r3
 8000f62:	4770      	bx	lr
