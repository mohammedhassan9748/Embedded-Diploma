
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001350  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001480  08001480  00011480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014a0  080014a0  000114a8  2**0
                  CONTENTS
  4 .ARM          00000000  080014a0  080014a0  000114a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080014a0  080014a8  000114a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014a0  080014a0  000114a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080014a4  080014a4  000114a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000114a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000000  080014a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080014a8  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000114a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000034a0  00000000  00000000  000114d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bfc  00000000  00000000  00014971  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000182e  00000000  00000000  0001556d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000380  00000000  00000000  00016da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002e8  00000000  00000000  00017120  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000168f  00000000  00000000  00017408  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000145e  00000000  00000000  00018a97  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008479  00000000  00000000  00019ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002236e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c0c  00000000  00000000  000223ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001468 	.word	0x08001468

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001468 	.word	0x08001468

08000170 <HAL_EEPROM_Init>:
* @retval 			- None.
*
* Note				- This initializes only one I2C1 only and cannot be used on another I2C peripheral "Channel".
*
*/
void HAL_EEPROM_Init(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	I2C1_Config.I2Cx = I2C1;
 8000174:	4b0c      	ldr	r3, [pc, #48]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000176:	4a0d      	ldr	r2, [pc, #52]	; (80001ac <HAL_EEPROM_Init+0x3c>)
 8000178:	601a      	str	r2, [r3, #0]
	I2C1_Config.I2C_PeripheralMode = I2C_MODE_I2C;
 800017a:	4b0b      	ldr	r3, [pc, #44]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 800017c:	2200      	movs	r2, #0
 800017e:	809a      	strh	r2, [r3, #4]
	I2C1_Config.I2C_MasterSpeedMode = I2C_MASTER_SPEED_MODE_SM;
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000182:	2200      	movs	r2, #0
 8000184:	80da      	strh	r2, [r3, #6]
	I2C1_Config.I2C_SCLK = I2C_SCLK_100KHZ;
 8000186:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000188:	4a09      	ldr	r2, [pc, #36]	; (80001b0 <HAL_EEPROM_Init+0x40>)
 800018a:	609a      	str	r2, [r3, #8]
	I2C1_Config.I2C_AddressMode = I2C_ADDRESS_MODE_7_BIT;
 800018c:	4b06      	ldr	r3, [pc, #24]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 800018e:	2200      	movs	r2, #0
 8000190:	819a      	strh	r2, [r3, #12]
	I2C1_Config.I2C_SlaveDeviceDuality = I2C_SLAVE_DUALITY_DISABLE;
 8000192:	4b05      	ldr	r3, [pc, #20]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 8000194:	2200      	movs	r2, #0
 8000196:	81da      	strh	r2, [r3, #14]
	I2C1_Config.I2C_StretchMode = I2C_STRETCH_MODE_ENABLE;
 8000198:	4b03      	ldr	r3, [pc, #12]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 800019a:	2200      	movs	r2, #0
 800019c:	825a      	strh	r2, [r3, #18]

	MCAL_I2C_Init(&I2C1_Config);
 800019e:	4802      	ldr	r0, [pc, #8]	; (80001a8 <HAL_EEPROM_Init+0x38>)
 80001a0:	f000 fbb4 	bl	800090c <MCAL_I2C_Init>
}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	40005400 	.word	0x40005400
 80001b0:	000186a0 	.word	0x000186a0

080001b4 <HAL_EEPROM_WriteNbytes>:
* @retval 			- None.
*
* Note				-
*
*/
uint8_t HAL_EEPROM_WriteNbytes(uint16_t MemoryAddress, uint8_t* dataBuffer, uint32_t dataLength){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 80001ba:	af02      	add	r7, sp, #8
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	6019      	str	r1, [r3, #0]
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	f107 030e 	add.w	r3, r7, #14
 80001ca:	4602      	mov	r2, r0
 80001cc:	801a      	strh	r2, [r3, #0]

	uint8_t newBuffer[1026];
	newBuffer[0] = (uint8_t)(MemoryAddress>>8);
 80001ce:	f107 030e 	add.w	r3, r7, #14
 80001d2:	881b      	ldrh	r3, [r3, #0]
 80001d4:	0a1b      	lsrs	r3, r3, #8
 80001d6:	b29b      	uxth	r3, r3
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	f107 0310 	add.w	r3, r7, #16
 80001de:	701a      	strb	r2, [r3, #0]
	newBuffer[1] = (uint8_t) MemoryAddress;
 80001e0:	f107 030e 	add.w	r3, r7, #14
 80001e4:	881b      	ldrh	r3, [r3, #0]
 80001e6:	b2da      	uxtb	r2, r3
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	705a      	strb	r2, [r3, #1]

	for(int i=0;i<dataLength;i++){
 80001ee:	2300      	movs	r3, #0
 80001f0:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 80001f4:	e011      	b.n	800021a <HAL_EEPROM_WriteNbytes+0x66>
		newBuffer[i+2] = dataBuffer[i];
 80001f6:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 80001fa:	f107 0208 	add.w	r2, r7, #8
 80001fe:	6812      	ldr	r2, [r2, #0]
 8000200:	441a      	add	r2, r3
 8000202:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000206:	3302      	adds	r3, #2
 8000208:	7811      	ldrb	r1, [r2, #0]
 800020a:	f107 0210 	add.w	r2, r7, #16
 800020e:	54d1      	strb	r1, [r2, r3]
	for(int i=0;i<dataLength;i++){
 8000210:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 8000214:	3301      	adds	r3, #1
 8000216:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800021a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800021e:	1d3a      	adds	r2, r7, #4
 8000220:	6812      	ldr	r2, [r2, #0]
 8000222:	429a      	cmp	r2, r3
 8000224:	d8e7      	bhi.n	80001f6 <HAL_EEPROM_WriteNbytes+0x42>
	}

	MCAL_I2C_MasterTxPolling(&I2C1_Config, EEPROM_SLAVE_ADDRESS, newBuffer, dataLength+2, I2C_Start, I2C_Stop);
 8000226:	1d3b      	adds	r3, r7, #4
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	1c99      	adds	r1, r3, #2
 800022c:	f107 0210 	add.w	r2, r7, #16
 8000230:	2301      	movs	r3, #1
 8000232:	9301      	str	r3, [sp, #4]
 8000234:	2300      	movs	r3, #0
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	460b      	mov	r3, r1
 800023a:	212a      	movs	r1, #42	; 0x2a
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <HAL_EEPROM_WriteNbytes+0x9c>)
 800023e:	f000 fd49 	bl	8000cd4 <MCAL_I2C_MasterTxPolling>

	return 0;
 8000242:	2300      	movs	r3, #0
}
 8000244:	4618      	mov	r0, r3
 8000246:	f507 6783 	add.w	r7, r7, #1048	; 0x418
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	2000001c 	.word	0x2000001c

08000254 <HAL_EEPROM_ReadNbytes>:
* @retval 			- None.
*
* Note				-
*
*/
uint8_t HAL_EEPROM_ReadNbytes(uint16_t MemoryAddress, uint8_t* dataBuffer, uint32_t dataLength){
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af02      	add	r7, sp, #8
 800025a:	4603      	mov	r3, r0
 800025c:	60b9      	str	r1, [r7, #8]
 800025e:	607a      	str	r2, [r7, #4]
 8000260:	81fb      	strh	r3, [r7, #14]
	uint8_t MemoryAddressBuffer[2];
	MemoryAddressBuffer[0] = (uint8_t)(MemoryAddress>>8);
 8000262:	89fb      	ldrh	r3, [r7, #14]
 8000264:	0a1b      	lsrs	r3, r3, #8
 8000266:	b29b      	uxth	r3, r3
 8000268:	b2db      	uxtb	r3, r3
 800026a:	753b      	strb	r3, [r7, #20]
	MemoryAddressBuffer[1] = (uint8_t) MemoryAddress;
 800026c:	89fb      	ldrh	r3, [r7, #14]
 800026e:	b2db      	uxtb	r3, r3
 8000270:	757b      	strb	r3, [r7, #21]

	MCAL_I2C_MasterTxPolling(&I2C1_Config, EEPROM_SLAVE_ADDRESS, MemoryAddressBuffer, 2, I2C_Start, I2C_No_Stop);
 8000272:	f107 0214 	add.w	r2, r7, #20
 8000276:	2300      	movs	r3, #0
 8000278:	9301      	str	r3, [sp, #4]
 800027a:	2300      	movs	r3, #0
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2302      	movs	r3, #2
 8000280:	212a      	movs	r1, #42	; 0x2a
 8000282:	4809      	ldr	r0, [pc, #36]	; (80002a8 <HAL_EEPROM_ReadNbytes+0x54>)
 8000284:	f000 fd26 	bl	8000cd4 <MCAL_I2C_MasterTxPolling>

	MCAL_I2C_MasterRxPolling(&I2C1_Config, EEPROM_SLAVE_ADDRESS, dataBuffer, dataLength, I2C_Repeated_Start, I2C_Stop);
 8000288:	2301      	movs	r3, #1
 800028a:	9301      	str	r3, [sp, #4]
 800028c:	2301      	movs	r3, #1
 800028e:	9300      	str	r3, [sp, #0]
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	68ba      	ldr	r2, [r7, #8]
 8000294:	212a      	movs	r1, #42	; 0x2a
 8000296:	4804      	ldr	r0, [pc, #16]	; (80002a8 <HAL_EEPROM_ReadNbytes+0x54>)
 8000298:	f000 fd91 	bl	8000dbe <MCAL_I2C_MasterRxPolling>

	return 0;
 800029c:	2300      	movs	r3, #0
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3718      	adds	r7, #24
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	2000001c 	.word	0x2000001c

080002ac <EXTI0_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void EXTI0_IRQHandler(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<0);
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <EXTI0_IRQHandler+0x1c>)
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <EXTI0_IRQHandler+0x20>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4798      	blx	r3

}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40010400 	.word	0x40010400
 80002cc:	20000040 	.word	0x20000040

080002d0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<1);
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002d6:	695b      	ldr	r3, [r3, #20]
 80002d8:	4a04      	ldr	r2, [pc, #16]	; (80002ec <EXTI1_IRQHandler+0x1c>)
 80002da:	f043 0302 	orr.w	r3, r3, #2
 80002de:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 80002e0:	4b03      	ldr	r3, [pc, #12]	; (80002f0 <EXTI1_IRQHandler+0x20>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	4798      	blx	r3

}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	40010400 	.word	0x40010400
 80002f0:	20000040 	.word	0x20000040

080002f4 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<2);
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <EXTI2_IRQHandler+0x1c>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <EXTI2_IRQHandler+0x20>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4798      	blx	r3

}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	40010400 	.word	0x40010400
 8000314:	20000040 	.word	0x20000040

08000318 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<3);
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <EXTI3_IRQHandler+0x1c>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[3]();
 8000328:	4b03      	ldr	r3, [pc, #12]	; (8000338 <EXTI3_IRQHandler+0x20>)
 800032a:	68db      	ldr	r3, [r3, #12]
 800032c:	4798      	blx	r3

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40010400 	.word	0x40010400
 8000338:	20000040 	.word	0x20000040

0800033c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<4);
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000342:	695b      	ldr	r3, [r3, #20]
 8000344:	4a04      	ldr	r2, [pc, #16]	; (8000358 <EXTI4_IRQHandler+0x1c>)
 8000346:	f043 0310 	orr.w	r3, r3, #16
 800034a:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[4]();
 800034c:	4b03      	ldr	r3, [pc, #12]	; (800035c <EXTI4_IRQHandler+0x20>)
 800034e:	691b      	ldr	r3, [r3, #16]
 8000350:	4798      	blx	r3

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40010400 	.word	0x40010400
 800035c:	20000040 	.word	0x20000040

08000360 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); g_IRQ_CallBackPtr[5]();}
 8000364:	4b26      	ldr	r3, [pc, #152]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	f003 0320 	and.w	r3, r3, #32
 800036c:	2b00      	cmp	r3, #0
 800036e:	d008      	beq.n	8000382 <EXTI9_5_IRQHandler+0x22>
 8000370:	4b23      	ldr	r3, [pc, #140]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a22      	ldr	r2, [pc, #136]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000376:	f043 0320 	orr.w	r3, r3, #32
 800037a:	6153      	str	r3, [r2, #20]
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 800037e:	695b      	ldr	r3, [r3, #20]
 8000380:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); g_IRQ_CallBackPtr[6]();}
 8000382:	4b1f      	ldr	r3, [pc, #124]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800038a:	2b00      	cmp	r3, #0
 800038c:	d008      	beq.n	80003a0 <EXTI9_5_IRQHandler+0x40>
 800038e:	4b1c      	ldr	r3, [pc, #112]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	4a1b      	ldr	r2, [pc, #108]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 8000394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000398:	6153      	str	r3, [r2, #20]
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 800039c:	699b      	ldr	r3, [r3, #24]
 800039e:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); g_IRQ_CallBackPtr[7]();}
 80003a0:	4b17      	ldr	r3, [pc, #92]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d008      	beq.n	80003be <EXTI9_5_IRQHandler+0x5e>
 80003ac:	4b14      	ldr	r3, [pc, #80]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a13      	ldr	r2, [pc, #76]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b6:	6153      	str	r3, [r2, #20]
 80003b8:	4b12      	ldr	r3, [pc, #72]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003ba:	69db      	ldr	r3, [r3, #28]
 80003bc:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); g_IRQ_CallBackPtr[8]();}
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <EXTI9_5_IRQHandler+0x7c>
 80003ca:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4a0c      	ldr	r2, [pc, #48]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d4:	6153      	str	r3, [r2, #20]
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003d8:	6a1b      	ldr	r3, [r3, #32]
 80003da:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); g_IRQ_CallBackPtr[9]();}
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d008      	beq.n	80003fa <EXTI9_5_IRQHandler+0x9a>
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <EXTI9_5_IRQHandler+0xa0>)
 80003ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003f2:	6153      	str	r3, [r2, #20]
 80003f4:	4b03      	ldr	r3, [pc, #12]	; (8000404 <EXTI9_5_IRQHandler+0xa4>)
 80003f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f8:	4798      	blx	r3
}
 80003fa:	bf00      	nop
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	bf00      	nop
 8000400:	40010400 	.word	0x40010400
 8000404:	20000040 	.word	0x20000040

08000408 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); g_IRQ_CallBackPtr[10]();}
 800040c:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000414:	2b00      	cmp	r3, #0
 8000416:	d008      	beq.n	800042a <EXTI15_10_IRQHandler+0x22>
 8000418:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 800041a:	695b      	ldr	r3, [r3, #20]
 800041c:	4a22      	ldr	r2, [pc, #136]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 800041e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000422:	6153      	str	r3, [r2, #20]
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <EXTI15_10_IRQHandler+0xa4>)
 8000426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000428:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); g_IRQ_CallBackPtr[11]();}
 800042a:	4b1f      	ldr	r3, [pc, #124]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 800042c:	695b      	ldr	r3, [r3, #20]
 800042e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000432:	2b00      	cmp	r3, #0
 8000434:	d008      	beq.n	8000448 <EXTI15_10_IRQHandler+0x40>
 8000436:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a1b      	ldr	r2, [pc, #108]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 800043c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000440:	6153      	str	r3, [r2, #20]
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <EXTI15_10_IRQHandler+0xa4>)
 8000444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000446:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); g_IRQ_CallBackPtr[12]();}
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 800044a:	695b      	ldr	r3, [r3, #20]
 800044c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000450:	2b00      	cmp	r3, #0
 8000452:	d008      	beq.n	8000466 <EXTI15_10_IRQHandler+0x5e>
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 8000456:	695b      	ldr	r3, [r3, #20]
 8000458:	4a13      	ldr	r2, [pc, #76]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 800045a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800045e:	6153      	str	r3, [r2, #20]
 8000460:	4b12      	ldr	r3, [pc, #72]	; (80004ac <EXTI15_10_IRQHandler+0xa4>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); g_IRQ_CallBackPtr[13]();}
 8000466:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800046e:	2b00      	cmp	r3, #0
 8000470:	d008      	beq.n	8000484 <EXTI15_10_IRQHandler+0x7c>
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	4a0c      	ldr	r2, [pc, #48]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 8000478:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800047c:	6153      	str	r3, [r2, #20]
 800047e:	4b0b      	ldr	r3, [pc, #44]	; (80004ac <EXTI15_10_IRQHandler+0xa4>)
 8000480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000482:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); g_IRQ_CallBackPtr[14]();}
 8000484:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 8000486:	695b      	ldr	r3, [r3, #20]
 8000488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d008      	beq.n	80004a2 <EXTI15_10_IRQHandler+0x9a>
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <EXTI15_10_IRQHandler+0xa0>)
 8000496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800049a:	6153      	str	r3, [r2, #20]
 800049c:	4b03      	ldr	r3, [pc, #12]	; (80004ac <EXTI15_10_IRQHandler+0xa4>)
 800049e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004a0:	4798      	blx	r3
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	40010400 	.word	0x40010400
 80004ac:	20000040 	.word	0x20000040

080004b0 <Get_CRx_Position>:
/*================================================================
 * Description :
 * Private Function to get the 4 bits position required to configure of the CRx register according to the  pin number
 * of the specified GPIO_PinConfigPtr
 */
static uint8_t Get_CRx_Position(uint16_t PinNumber){
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	80fb      	strh	r3, [r7, #6]
	//Case PinNumber <= GPIO_PIN_7
	switch(PinNumber){
 80004ba:	88fb      	ldrh	r3, [r7, #6]
 80004bc:	2b80      	cmp	r3, #128	; 0x80
 80004be:	d042      	beq.n	8000546 <Get_CRx_Position+0x96>
 80004c0:	2b80      	cmp	r3, #128	; 0x80
 80004c2:	dc11      	bgt.n	80004e8 <Get_CRx_Position+0x38>
 80004c4:	2b08      	cmp	r3, #8
 80004c6:	d036      	beq.n	8000536 <Get_CRx_Position+0x86>
 80004c8:	2b08      	cmp	r3, #8
 80004ca:	dc06      	bgt.n	80004da <Get_CRx_Position+0x2a>
 80004cc:	2b02      	cmp	r3, #2
 80004ce:	d02e      	beq.n	800052e <Get_CRx_Position+0x7e>
 80004d0:	2b04      	cmp	r3, #4
 80004d2:	d02e      	beq.n	8000532 <Get_CRx_Position+0x82>
 80004d4:	2b01      	cmp	r3, #1
 80004d6:	d028      	beq.n	800052a <Get_CRx_Position+0x7a>
 80004d8:	e047      	b.n	800056a <Get_CRx_Position+0xba>
 80004da:	2b20      	cmp	r3, #32
 80004dc:	d02f      	beq.n	800053e <Get_CRx_Position+0x8e>
 80004de:	2b40      	cmp	r3, #64	; 0x40
 80004e0:	d02f      	beq.n	8000542 <Get_CRx_Position+0x92>
 80004e2:	2b10      	cmp	r3, #16
 80004e4:	d029      	beq.n	800053a <Get_CRx_Position+0x8a>
 80004e6:	e040      	b.n	800056a <Get_CRx_Position+0xba>
 80004e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004ec:	d033      	beq.n	8000556 <Get_CRx_Position+0xa6>
 80004ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80004f2:	dc09      	bgt.n	8000508 <Get_CRx_Position+0x58>
 80004f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80004f8:	d029      	beq.n	800054e <Get_CRx_Position+0x9e>
 80004fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004fe:	d028      	beq.n	8000552 <Get_CRx_Position+0xa2>
 8000500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000504:	d021      	beq.n	800054a <Get_CRx_Position+0x9a>
 8000506:	e030      	b.n	800056a <Get_CRx_Position+0xba>
 8000508:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800050c:	d027      	beq.n	800055e <Get_CRx_Position+0xae>
 800050e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000512:	dc03      	bgt.n	800051c <Get_CRx_Position+0x6c>
 8000514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000518:	d01f      	beq.n	800055a <Get_CRx_Position+0xaa>
 800051a:	e026      	b.n	800056a <Get_CRx_Position+0xba>
 800051c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000520:	d01f      	beq.n	8000562 <Get_CRx_Position+0xb2>
 8000522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000526:	d01e      	beq.n	8000566 <Get_CRx_Position+0xb6>
 8000528:	e01f      	b.n	800056a <Get_CRx_Position+0xba>
		case GPIO_PIN_0:
			return 0;
 800052a:	2300      	movs	r3, #0
 800052c:	e01e      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_1:
			return 4;
 800052e:	2304      	movs	r3, #4
 8000530:	e01c      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_2:
			return 8;
 8000532:	2308      	movs	r3, #8
 8000534:	e01a      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_3:
			return 12;
 8000536:	230c      	movs	r3, #12
 8000538:	e018      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_4:
			return 16;
 800053a:	2310      	movs	r3, #16
 800053c:	e016      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_5:
			return 20;
 800053e:	2314      	movs	r3, #20
 8000540:	e014      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_6:
			return 24;
 8000542:	2318      	movs	r3, #24
 8000544:	e012      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_7:
			return 28;
 8000546:	231c      	movs	r3, #28
 8000548:	e010      	b.n	800056c <Get_CRx_Position+0xbc>

	//Case PinNumber > GPIO_PIN_7
		case GPIO_PIN_8:
			return 0;
 800054a:	2300      	movs	r3, #0
 800054c:	e00e      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_9:
			return 4;
 800054e:	2304      	movs	r3, #4
 8000550:	e00c      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_10:
			return 8;
 8000552:	2308      	movs	r3, #8
 8000554:	e00a      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_11:
			return 12;
 8000556:	230c      	movs	r3, #12
 8000558:	e008      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_12:
			return 16;
 800055a:	2310      	movs	r3, #16
 800055c:	e006      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_13:
			return 20;
 800055e:	2314      	movs	r3, #20
 8000560:	e004      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_14:
			return 24;
 8000562:	2318      	movs	r3, #24
 8000564:	e002      	b.n	800056c <Get_CRx_Position+0xbc>
		case GPIO_PIN_15:
			return 28;
 8000566:	231c      	movs	r3, #28
 8000568:	e000      	b.n	800056c <Get_CRx_Position+0xbc>
	}
	return 0;
 800056a:	2300      	movs	r3, #0
}
 800056c:	4618      	mov	r0, r3
 800056e:	370c      	adds	r7, #12
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
	...

08000578 <MCAL_GPIO_Init>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_Init(GPIO_PinConfig_t* GPIO_PinConfigPtr){
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]

	static uint8_t GPIO_CLK_InitFlag[6] = {0,0,0,0,0,0};

	//Check port selected to enable it's clock
	if((GPIO_PinConfigPtr->GPIO_Port == GPIOA) && (GPIO_CLK_InitFlag[0] != 1)){
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a7a      	ldr	r2, [pc, #488]	; (8000770 <MCAL_GPIO_Init+0x1f8>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d10d      	bne.n	80005a6 <MCAL_GPIO_Init+0x2e>
 800058a:	4b7a      	ldr	r3, [pc, #488]	; (8000774 <MCAL_GPIO_Init+0x1fc>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b01      	cmp	r3, #1
 8000590:	d009      	beq.n	80005a6 <MCAL_GPIO_Init+0x2e>
		RCC_GPIOA_CLK_EN();
 8000592:	4b79      	ldr	r3, [pc, #484]	; (8000778 <MCAL_GPIO_Init+0x200>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	4a78      	ldr	r2, [pc, #480]	; (8000778 <MCAL_GPIO_Init+0x200>)
 8000598:	f043 0304 	orr.w	r3, r3, #4
 800059c:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[0] = 1; //Clock for this port is enabled
 800059e:	4b75      	ldr	r3, [pc, #468]	; (8000774 <MCAL_GPIO_Init+0x1fc>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
 80005a4:	e04a      	b.n	800063c <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOB) && (GPIO_CLK_InitFlag[1] != 1)){
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a74      	ldr	r2, [pc, #464]	; (800077c <MCAL_GPIO_Init+0x204>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d10d      	bne.n	80005cc <MCAL_GPIO_Init+0x54>
 80005b0:	4b70      	ldr	r3, [pc, #448]	; (8000774 <MCAL_GPIO_Init+0x1fc>)
 80005b2:	785b      	ldrb	r3, [r3, #1]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d009      	beq.n	80005cc <MCAL_GPIO_Init+0x54>
		RCC_GPIOB_CLK_EN();
 80005b8:	4b6f      	ldr	r3, [pc, #444]	; (8000778 <MCAL_GPIO_Init+0x200>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a6e      	ldr	r2, [pc, #440]	; (8000778 <MCAL_GPIO_Init+0x200>)
 80005be:	f043 0308 	orr.w	r3, r3, #8
 80005c2:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[1] = 1; //Clock for this port is enabled
 80005c4:	4b6b      	ldr	r3, [pc, #428]	; (8000774 <MCAL_GPIO_Init+0x1fc>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	705a      	strb	r2, [r3, #1]
 80005ca:	e037      	b.n	800063c <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOC) && (GPIO_CLK_InitFlag[2] != 1)){
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a6b      	ldr	r2, [pc, #428]	; (8000780 <MCAL_GPIO_Init+0x208>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d10d      	bne.n	80005f2 <MCAL_GPIO_Init+0x7a>
 80005d6:	4b67      	ldr	r3, [pc, #412]	; (8000774 <MCAL_GPIO_Init+0x1fc>)
 80005d8:	789b      	ldrb	r3, [r3, #2]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d009      	beq.n	80005f2 <MCAL_GPIO_Init+0x7a>
		RCC_GPIOC_CLK_EN();
 80005de:	4b66      	ldr	r3, [pc, #408]	; (8000778 <MCAL_GPIO_Init+0x200>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a65      	ldr	r2, [pc, #404]	; (8000778 <MCAL_GPIO_Init+0x200>)
 80005e4:	f043 0310 	orr.w	r3, r3, #16
 80005e8:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[2] = 1; //Clock for this port is enabled
 80005ea:	4b62      	ldr	r3, [pc, #392]	; (8000774 <MCAL_GPIO_Init+0x1fc>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	709a      	strb	r2, [r3, #2]
 80005f0:	e024      	b.n	800063c <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOD) && (GPIO_CLK_InitFlag[3] != 1)){
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a63      	ldr	r2, [pc, #396]	; (8000784 <MCAL_GPIO_Init+0x20c>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d10d      	bne.n	8000618 <MCAL_GPIO_Init+0xa0>
 80005fc:	4b5d      	ldr	r3, [pc, #372]	; (8000774 <MCAL_GPIO_Init+0x1fc>)
 80005fe:	78db      	ldrb	r3, [r3, #3]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d009      	beq.n	8000618 <MCAL_GPIO_Init+0xa0>
		RCC_GPIOD_CLK_EN();
 8000604:	4b5c      	ldr	r3, [pc, #368]	; (8000778 <MCAL_GPIO_Init+0x200>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a5b      	ldr	r2, [pc, #364]	; (8000778 <MCAL_GPIO_Init+0x200>)
 800060a:	f043 0320 	orr.w	r3, r3, #32
 800060e:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[3] = 1; //Clock for this port is enabled
 8000610:	4b58      	ldr	r3, [pc, #352]	; (8000774 <MCAL_GPIO_Init+0x1fc>)
 8000612:	2201      	movs	r2, #1
 8000614:	70da      	strb	r2, [r3, #3]
 8000616:	e011      	b.n	800063c <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOE) && (GPIO_CLK_InitFlag[4] != 1)){
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a5a      	ldr	r2, [pc, #360]	; (8000788 <MCAL_GPIO_Init+0x210>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d10c      	bne.n	800063c <MCAL_GPIO_Init+0xc4>
 8000622:	4b54      	ldr	r3, [pc, #336]	; (8000774 <MCAL_GPIO_Init+0x1fc>)
 8000624:	791b      	ldrb	r3, [r3, #4]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d008      	beq.n	800063c <MCAL_GPIO_Init+0xc4>
		RCC_GPIOE_CLK_EN();
 800062a:	4b53      	ldr	r3, [pc, #332]	; (8000778 <MCAL_GPIO_Init+0x200>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a52      	ldr	r2, [pc, #328]	; (8000778 <MCAL_GPIO_Init+0x200>)
 8000630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000634:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[4] = 1; //Clock for this port is enabled
 8000636:	4b4f      	ldr	r3, [pc, #316]	; (8000774 <MCAL_GPIO_Init+0x1fc>)
 8000638:	2201      	movs	r2, #1
 800063a:	711a      	strb	r2, [r3, #4]
	}

	//Check for alternate function mode (Input or Output) to enable it's clock
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_OUTPUT_OD)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	799b      	ldrb	r3, [r3, #6]
 8000640:	2b05      	cmp	r3, #5
 8000642:	d908      	bls.n	8000656 <MCAL_GPIO_Init+0xde>
	{
		RCC_AFIO_CLK_EN();
 8000644:	4b4c      	ldr	r3, [pc, #304]	; (8000778 <MCAL_GPIO_Init+0x200>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a4b      	ldr	r2, [pc, #300]	; (8000778 <MCAL_GPIO_Init+0x200>)
 800064a:	f043 0301 	orr.w	r3, r3, #1
 800064e:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[5] = 1;
 8000650:	4b48      	ldr	r3, [pc, #288]	; (8000774 <MCAL_GPIO_Init+0x1fc>)
 8000652:	2201      	movs	r2, #1
 8000654:	715a      	strb	r2, [r3, #5]
	}

	//Pointer holds the configuration register address either High or Low depends on PinNo
	vuint32_t* GPIO_CRx = NULL_PTR;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
	GPIO_CRx = ((GPIO_PinConfigPtr->GPIO_PinNo < GPIO_PIN_8)?&(GPIO_PinConfigPtr->GPIO_Port->CRL):&(GPIO_PinConfigPtr->GPIO_Port->CRH));
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	889b      	ldrh	r3, [r3, #4]
 800065e:	2bff      	cmp	r3, #255	; 0xff
 8000660:	d802      	bhi.n	8000668 <MCAL_GPIO_Init+0xf0>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	e002      	b.n	800066e <MCAL_GPIO_Init+0xf6>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3304      	adds	r3, #4
 800066e:	60bb      	str	r3, [r7, #8]

	//MODE & CNF Variable (Initialized by it's default reset value)
	uint8_t PinConfig_Value = 0;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]

	//Check if pin is output
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_INPUT_PD && GPIO_PinConfigPtr->GPIO_Mode < GPIO_MODE_AF_INPUT){
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	799b      	ldrb	r3, [r3, #6]
 8000678:	2b03      	cmp	r3, #3
 800067a:	d912      	bls.n	80006a2 <MCAL_GPIO_Init+0x12a>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	799b      	ldrb	r3, [r3, #6]
 8000680:	2b07      	cmp	r3, #7
 8000682:	d80e      	bhi.n	80006a2 <MCAL_GPIO_Init+0x12a>
		//Set MODE & CNF
		PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode-4)<<2) | (GPIO_PinConfigPtr->GPIO_Output_Speed)) & 0x0F;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	799b      	ldrb	r3, [r3, #6]
 8000688:	3b04      	subs	r3, #4
 800068a:	009b      	lsls	r3, r3, #2
 800068c:	b25a      	sxtb	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	79db      	ldrb	r3, [r3, #7]
 8000692:	b25b      	sxtb	r3, r3
 8000694:	4313      	orrs	r3, r2
 8000696:	b25b      	sxtb	r3, r3
 8000698:	b2db      	uxtb	r3, r3
 800069a:	f003 030f 	and.w	r3, r3, #15
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e036      	b.n	8000710 <MCAL_GPIO_Init+0x198>
	}

	//Else pin is input
	else{
		//Check if Input Analog mode or Input Floating
		if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_ANALOG || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_FLO)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	799b      	ldrb	r3, [r3, #6]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d003      	beq.n	80006b2 <MCAL_GPIO_Init+0x13a>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	799b      	ldrb	r3, [r3, #6]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d107      	bne.n	80006c2 <MCAL_GPIO_Init+0x14a>
		{	//Set MODE & CNF
			PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode)<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	799b      	ldrb	r3, [r3, #6]
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	f003 030f 	and.w	r3, r3, #15
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e026      	b.n	8000710 <MCAL_GPIO_Init+0x198>
		}

		//Check if Input with pull-up or Input with pull-down
		else if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PD){
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	799b      	ldrb	r3, [r3, #6]
 80006c6:	2b02      	cmp	r3, #2
 80006c8:	d003      	beq.n	80006d2 <MCAL_GPIO_Init+0x15a>
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	799b      	ldrb	r3, [r3, #6]
 80006ce:	2b03      	cmp	r3, #3
 80006d0:	d11c      	bne.n	800070c <MCAL_GPIO_Init+0x194>
			//Set MODE & CNF
			PinConfig_Value = ((GPIO_MODE_INPUT_PU<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 80006d2:	2308      	movs	r3, #8
 80006d4:	73fb      	strb	r3, [r7, #15]

			//Check if Input with pull-up
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU){
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	799b      	ldrb	r3, [r3, #6]
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d10a      	bne.n	80006f4 <MCAL_GPIO_Init+0x17c>
				//Set output data register ODR because pull up specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	68da      	ldr	r2, [r3, #12]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	889b      	ldrh	r3, [r3, #4]
 80006e8:	4619      	mov	r1, r3
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	430a      	orrs	r2, r1
 80006f0:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU){
 80006f2:	e00d      	b.n	8000710 <MCAL_GPIO_Init+0x198>
			}

			//Check if Input with pull-down
			else{
				//Clear output data register ODR because pull down specified
				GPIO_PinConfigPtr->GPIO_Port->ODR &= ~(GPIO_PinConfigPtr->GPIO_PinNo);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	68da      	ldr	r2, [r3, #12]
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	889b      	ldrh	r3, [r3, #4]
 80006fe:	43db      	mvns	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	400a      	ands	r2, r1
 8000708:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU){
 800070a:	e001      	b.n	8000710 <MCAL_GPIO_Init+0x198>
			}
		}
		//Else Alternate function input
		else{
			PinConfig_Value = ((GPIO_MODE_INPUT_FLO<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 800070c:	2304      	movs	r3, #4
 800070e:	73fb      	strb	r3, [r7, #15]
		}
	}

	//Clear MODE & CNF
	(*GPIO_CRx) &= ~(0xF<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	889b      	ldrh	r3, [r3, #4]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff fecb 	bl	80004b0 <Get_CRx_Position>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	230f      	movs	r3, #15
 8000720:	4093      	lsls	r3, r2
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	401a      	ands	r2, r3
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	601a      	str	r2, [r3, #0]
	//Write on CRx register to configure pin -> x is (H or L)
	(*GPIO_CRx) &= ~(PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 800072e:	7bfc      	ldrb	r4, [r7, #15]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	889b      	ldrh	r3, [r3, #4]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff febb 	bl	80004b0 <Get_CRx_Position>
 800073a:	4603      	mov	r3, r0
 800073c:	fa04 f303 	lsl.w	r3, r4, r3
 8000740:	43da      	mvns	r2, r3
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	401a      	ands	r2, r3
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	601a      	str	r2, [r3, #0]
	(*GPIO_CRx) |= (PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 800074c:	7bfc      	ldrb	r4, [r7, #15]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	889b      	ldrh	r3, [r3, #4]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff feac 	bl	80004b0 <Get_CRx_Position>
 8000758:	4603      	mov	r3, r0
 800075a:	fa04 f203 	lsl.w	r2, r4, r3
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	431a      	orrs	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	601a      	str	r2, [r3, #0]

	return;
 8000768:	bf00      	nop

}
 800076a:	3714      	adds	r7, #20
 800076c:	46bd      	mov	sp, r7
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	40010800 	.word	0x40010800
 8000774:	2000007c 	.word	0x2000007c
 8000778:	40021000 	.word	0x40021000
 800077c:	40010c00 	.word	0x40010c00
 8000780:	40011000 	.word	0x40011000
 8000784:	40011400 	.word	0x40011400
 8000788:	40011800 	.word	0x40011800

0800078c <TIM2_IRQHandler>:
	if(CCRxIndex >= 0 || CCRxIndex < 4)
		return (TimX->CCR[CCRxIndex]);
}

void TIM2_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	if(TIM2->SR & (1<<0))
 8000790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000794:	691b      	ldr	r3, [r3, #16]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	2b00      	cmp	r3, #0
 800079c:	d012      	beq.n	80007c4 <TIM2_IRQHandler+0x38>
	{
		/*
		 * Stop Counting while handling ISR.
		 */
		CLEAR_BIT(TIM2->CR1,0);
 800079e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a8:	f023 0301 	bic.w	r3, r3, #1
 80007ac:	6013      	str	r3, [r2, #0]
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM2->SR,0);
 80007ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007b2:	691b      	ldr	r3, [r3, #16]
 80007b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b8:	f023 0301 	bic.w	r3, r3, #1
 80007bc:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[0]();
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <TIM2_IRQHandler+0x60>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4798      	blx	r3
	}

	if(TIM2->SR & GPTM_IRQ_EN_TIE)
 80007c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c8:	691b      	ldr	r3, [r3, #16]
 80007ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d00a      	beq.n	80007e8 <TIM2_IRQHandler+0x5c>
	{
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM2->SR,6);
 80007d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d6:	691b      	ldr	r3, [r3, #16]
 80007d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80007e0:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[0]();
 80007e2:	4b02      	ldr	r3, [pc, #8]	; (80007ec <TIM2_IRQHandler+0x60>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4798      	blx	r3
	}
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000084 	.word	0x20000084

080007f0 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	if(TIM3->SR & (1<<0))
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <TIM3_IRQHandler+0x50>)
 80007f6:	691b      	ldr	r3, [r3, #16]
 80007f8:	f003 0301 	and.w	r3, r3, #1
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d00e      	beq.n	800081e <TIM3_IRQHandler+0x2e>
	{
		/*
		 * Stop Counting while handling ISR.
		 */
		CLEAR_BIT(TIM3->CR1,0);
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <TIM3_IRQHandler+0x50>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <TIM3_IRQHandler+0x50>)
 8000806:	f023 0301 	bic.w	r3, r3, #1
 800080a:	6013      	str	r3, [r2, #0]
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM3->SR,0);
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <TIM3_IRQHandler+0x50>)
 800080e:	691b      	ldr	r3, [r3, #16]
 8000810:	4a0b      	ldr	r2, [pc, #44]	; (8000840 <TIM3_IRQHandler+0x50>)
 8000812:	f023 0301 	bic.w	r3, r3, #1
 8000816:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[1]();
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <TIM3_IRQHandler+0x54>)
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	4798      	blx	r3
	}

	if(TIM3->SR & GPTM_IRQ_EN_TIE)
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <TIM3_IRQHandler+0x50>)
 8000820:	691b      	ldr	r3, [r3, #16]
 8000822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000826:	2b00      	cmp	r3, #0
 8000828:	d008      	beq.n	800083c <TIM3_IRQHandler+0x4c>
	{
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM3->SR,6);
 800082a:	4b05      	ldr	r3, [pc, #20]	; (8000840 <TIM3_IRQHandler+0x50>)
 800082c:	691b      	ldr	r3, [r3, #16]
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <TIM3_IRQHandler+0x50>)
 8000830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000834:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[1]();
 8000836:	4b03      	ldr	r3, [pc, #12]	; (8000844 <TIM3_IRQHandler+0x54>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	4798      	blx	r3
	}
}
 800083c:	bf00      	nop
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40000400 	.word	0x40000400
 8000844:	20000084 	.word	0x20000084

08000848 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	if(TIM4->SR & (1<<0))
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <TIM4_IRQHandler+0x50>)
 800084e:	691b      	ldr	r3, [r3, #16]
 8000850:	f003 0301 	and.w	r3, r3, #1
 8000854:	2b00      	cmp	r3, #0
 8000856:	d00e      	beq.n	8000876 <TIM4_IRQHandler+0x2e>
	{
		/*
		 * Stop Counting while handling ISR.
		 */
		CLEAR_BIT(TIM4->CR1,0);
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <TIM4_IRQHandler+0x50>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <TIM4_IRQHandler+0x50>)
 800085e:	f023 0301 	bic.w	r3, r3, #1
 8000862:	6013      	str	r3, [r2, #0]
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM4->SR,0);
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <TIM4_IRQHandler+0x50>)
 8000866:	691b      	ldr	r3, [r3, #16]
 8000868:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <TIM4_IRQHandler+0x50>)
 800086a:	f023 0301 	bic.w	r3, r3, #1
 800086e:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[2]();
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <TIM4_IRQHandler+0x54>)
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	4798      	blx	r3
	}

	if(TIM4->SR & GPTM_IRQ_EN_TIE)
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <TIM4_IRQHandler+0x50>)
 8000878:	691b      	ldr	r3, [r3, #16]
 800087a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087e:	2b00      	cmp	r3, #0
 8000880:	d008      	beq.n	8000894 <TIM4_IRQHandler+0x4c>
	{
		/*
		 * Clear the TIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM4->SR,6);
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <TIM4_IRQHandler+0x50>)
 8000884:	691b      	ldr	r3, [r3, #16]
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <TIM4_IRQHandler+0x50>)
 8000888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800088c:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[2]();
 800088e:	4b03      	ldr	r3, [pc, #12]	; (800089c <TIM4_IRQHandler+0x54>)
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	4798      	blx	r3
	}
}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40000800 	.word	0x40000800
 800089c:	20000084 	.word	0x20000084

080008a0 <I2C_GPIO_SetPins>:

/*================================================================
 * Description :
 * Private Function used to set the SDA & SCL pins of the required peripheral in GPIO.
 */
static void I2C_GPIO_SetPins(I2C_Config_t* I2C_ConfigPtr){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t SDA,SCL;
	/*
	 * 1) Check if I2Cx is I2C1 or I2C2 to configure ports and pin numbers.
	 */
	if(I2C_ConfigPtr->I2Cx == I2C1)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a15      	ldr	r2, [pc, #84]	; (8000904 <I2C_GPIO_SetPins+0x64>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d108      	bne.n	80008c4 <I2C_GPIO_SetPins+0x24>
	{
		//Configure SDA Pin Data
		SDA.GPIO_Port = GPIOB;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <I2C_GPIO_SetPins+0x68>)
 80008b4:	613b      	str	r3, [r7, #16]
		SDA.GPIO_PinNo = GPIO_PIN_7;
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	82bb      	strh	r3, [r7, #20]
		//Configure SCL Pin Data
		SCL.GPIO_Port = GPIOB;
 80008ba:	4b13      	ldr	r3, [pc, #76]	; (8000908 <I2C_GPIO_SetPins+0x68>)
 80008bc:	60bb      	str	r3, [r7, #8]
		SCL.GPIO_PinNo = GPIO_PIN_6;
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	81bb      	strh	r3, [r7, #12]
 80008c2:	e009      	b.n	80008d8 <I2C_GPIO_SetPins+0x38>
	}
	else
	{
		//Configure SDA Pin Data
		SDA.GPIO_Port = GPIOB;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <I2C_GPIO_SetPins+0x68>)
 80008c6:	613b      	str	r3, [r7, #16]
		SDA.GPIO_PinNo = GPIO_PIN_11;
 80008c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008cc:	82bb      	strh	r3, [r7, #20]
		//Configure SCL Pin Data
		SCL.GPIO_Port = GPIOB;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <I2C_GPIO_SetPins+0x68>)
 80008d0:	60bb      	str	r3, [r7, #8]
		SCL.GPIO_PinNo = GPIO_PIN_10;
 80008d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008d6:	81bb      	strh	r3, [r7, #12]
	}

	/*
	 * 2) Compelete configuration and Initialize the SDA and SCL Pins.
	 */
	SDA.GPIO_Mode = GPIO_MODE_AF_OUTPUT_OD;
 80008d8:	2307      	movs	r3, #7
 80008da:	75bb      	strb	r3, [r7, #22]
	SDA.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 80008dc:	2301      	movs	r3, #1
 80008de:	75fb      	strb	r3, [r7, #23]

	SCL.GPIO_Mode = GPIO_MODE_AF_OUTPUT_OD;
 80008e0:	2307      	movs	r3, #7
 80008e2:	73bb      	strb	r3, [r7, #14]
	SCL.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 80008e4:	2301      	movs	r3, #1
 80008e6:	73fb      	strb	r3, [r7, #15]

	MCAL_GPIO_Init(&SCL);
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe43 	bl	8000578 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&SDA);
 80008f2:	f107 0310 	add.w	r3, r7, #16
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fe3e 	bl	8000578 <MCAL_GPIO_Init>
}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	40005400 	.word	0x40005400
 8000908:	40010c00 	.word	0x40010c00

0800090c <MCAL_I2C_Init>:
 * @retval 			- None.
 *
 * Note				-
 *
 */
void MCAL_I2C_Init(I2C_Config_t* I2C_ConfigPtr){
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

	// Safety for registers
	uint16_t I2Cx_temp[6] = {0,0,0,0,0,0};
 8000914:	f107 030c 	add.w	r3, r7, #12
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]

	uint32_t I2Cx_PCLK1_temp__MHZ = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
	I2Cx_PCLK1_temp__MHZ = MCAL_RCC_PCLK1();
 8000924:	f000 fcb8 	bl	8001298 <MCAL_RCC_PCLK1>
 8000928:	61f8      	str	r0, [r7, #28]
	I2Cx_PCLK1_temp__MHZ /= 1000000;
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	4a50      	ldr	r2, [pc, #320]	; (8000a70 <MCAL_I2C_Init+0x164>)
 800092e:	fba2 2303 	umull	r2, r3, r2, r3
 8000932:	0c9b      	lsrs	r3, r3, #18
 8000934:	61fb      	str	r3, [r7, #28]
	I2Cx_PCLK1_temp__MHZ = (uint16_t)I2Cx_PCLK1_temp__MHZ;
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	b29b      	uxth	r3, r3
 800093a:	61fb      	str	r3, [r7, #28]

	/*
	 * 1) Enable the I2C Clock according to the Channel Selected.
	 */
	if(I2C_ConfigPtr->I2Cx == I2C1)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a4c      	ldr	r2, [pc, #304]	; (8000a74 <MCAL_I2C_Init+0x168>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d106      	bne.n	8000954 <MCAL_I2C_Init+0x48>
		RCC_I2C1_CLK_EN();
 8000946:	4b4c      	ldr	r3, [pc, #304]	; (8000a78 <MCAL_I2C_Init+0x16c>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a4b      	ldr	r2, [pc, #300]	; (8000a78 <MCAL_I2C_Init+0x16c>)
 800094c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	e00a      	b.n	800096a <MCAL_I2C_Init+0x5e>
	else if(I2C_ConfigPtr->I2Cx == I2C2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a48      	ldr	r2, [pc, #288]	; (8000a7c <MCAL_I2C_Init+0x170>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d105      	bne.n	800096a <MCAL_I2C_Init+0x5e>
		RCC_I2C2_CLK_EN();
 800095e:	4b46      	ldr	r3, [pc, #280]	; (8000a78 <MCAL_I2C_Init+0x16c>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a45      	ldr	r2, [pc, #276]	; (8000a78 <MCAL_I2C_Init+0x16c>)
 8000964:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000968:	61d3      	str	r3, [r2, #28]

	/*
	 * 2) Configure the I2C Mode wether I2C or SMBUS.
	 * 	 Note: I2C Mode is the only mode supported for this current version of the driver.
	 */
	if(I2C_ConfigPtr->I2C_PeripheralMode == I2C_MODE_I2C)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	889b      	ldrh	r3, [r3, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d179      	bne.n	8000a66 <MCAL_I2C_Init+0x15a>
		//-----------------------------------

		/*
		 * 3) Program the peripheral input clock in I2C_CR2 Register in order to generate correct timings.
		 */
		I2Cx_temp[1] |= I2Cx_PCLK1_temp__MHZ;
 8000972:	89fa      	ldrh	r2, [r7, #14]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	b29b      	uxth	r3, r3
 8000978:	4313      	orrs	r3, r2
 800097a:	b29b      	uxth	r3, r3
 800097c:	81fb      	strh	r3, [r7, #14]

		/*
		 * 4) Set I2C master mode selection.
		 */
		I2Cx_temp[4] |= I2C_ConfigPtr->I2C_MasterSpeedMode;
 800097e:	8aba      	ldrh	r2, [r7, #20]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	88db      	ldrh	r3, [r3, #6]
 8000984:	4313      	orrs	r3, r2
 8000986:	b29b      	uxth	r3, r3
 8000988:	82bb      	strh	r3, [r7, #20]

		/*
		 * 5) Set the frequency of the SCL Pin.
		 */
		uint32_t CCR_Value = ((I2Cx_PCLK1_temp__MHZ*1000000) / (I2C_ConfigPtr->I2C_SCLK<<1)) ;
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	4a3c      	ldr	r2, [pc, #240]	; (8000a80 <MCAL_I2C_Init+0x174>)
 800098e:	fb02 f203 	mul.w	r2, r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	fbb2 f3f3 	udiv	r3, r2, r3
 800099c:	61bb      	str	r3, [r7, #24]
		I2Cx_temp[4] |= (uint16_t)CCR_Value;
 800099e:	8aba      	ldrh	r2, [r7, #20]
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	82bb      	strh	r3, [r7, #20]

		/*
		 * 6) Set the maximum rise time in Sm mode (Master mode)
		 * 	 Note: SM Mode is the only supported mode. FM is not supported for this current version of the driver.
		 */
		I2Cx_temp[5] |= (I2Cx_PCLK1_temp__MHZ + 1) ;
 80009aa:	8afa      	ldrh	r2, [r7, #22]
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	3301      	adds	r3, #1
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	4313      	orrs	r3, r2
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	82fb      	strh	r3, [r7, #22]

		/*
		 * 7) Set the General call / Acknowledge / Clock stretching (Slave mode).
		 */
		I2Cx_temp[0] |= (I2C_ConfigPtr->I2C_StretchMode |I2C_ConfigPtr->I2C_GeneralCallAddress
 80009ba:	89ba      	ldrh	r2, [r7, #12]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	8a59      	ldrh	r1, [r3, #18]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	8a9b      	ldrh	r3, [r3, #20]
 80009c4:	430b      	orrs	r3, r1
 80009c6:	b299      	uxth	r1, r3
					 	 	 	 	 	 	 	 	 	| I2C_ConfigPtr->I2C_PeripheralMode);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	889b      	ldrh	r3, [r3, #4]
		I2Cx_temp[0] |= (I2C_ConfigPtr->I2C_StretchMode |I2C_ConfigPtr->I2C_GeneralCallAddress
 80009cc:	430b      	orrs	r3, r1
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	4313      	orrs	r3, r2
 80009d2:	b29b      	uxth	r3, r3
 80009d4:	81bb      	strh	r3, [r7, #12]

		/*
		 * 8) Set the slave address mode and the slave address itself for slave devices.
		 *    Note: Only 7 bit addressing is supported
		 */
		I2Cx_temp[2] |= (I2C_ConfigPtr->I2C_AddressMode);
 80009d6:	8a3a      	ldrh	r2, [r7, #16]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	899b      	ldrh	r3, [r3, #12]
 80009dc:	4313      	orrs	r3, r2
 80009de:	b29b      	uxth	r3, r3
 80009e0:	823b      	strh	r3, [r7, #16]
		I2Cx_temp[3] |= I2C_ConfigPtr->I2C_SlaveDeviceDuality;
 80009e2:	8a7a      	ldrh	r2, [r7, #18]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	89db      	ldrh	r3, [r3, #14]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	827b      	strh	r3, [r7, #18]

		I2Cx_temp[2] |= (I2C_ConfigPtr->I2C_SlaveAddress.I2C_SlaveDevice_PrimaryAddress<<1);
 80009ee:	8a3b      	ldrh	r3, [r7, #16]
 80009f0:	b21a      	sxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	7c1b      	ldrb	r3, [r3, #16]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	b21b      	sxth	r3, r3
 80009fa:	4313      	orrs	r3, r2
 80009fc:	b21b      	sxth	r3, r3
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	823b      	strh	r3, [r7, #16]
		if(I2C_ConfigPtr->I2C_SlaveDeviceDuality == I2C_SLAVE_DUALITY_ENABLE)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	89db      	ldrh	r3, [r3, #14]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d109      	bne.n	8000a1e <MCAL_I2C_Init+0x112>
			I2Cx_temp[3] |= (I2C_ConfigPtr->I2C_SlaveAddress.I2C_SlaveDevice_SecondaryAddress<<1);
 8000a0a:	8a7b      	ldrh	r3, [r7, #18]
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	7c5b      	ldrb	r3, [r3, #17]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	4313      	orrs	r3, r2
 8000a18:	b21b      	sxth	r3, r3
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	827b      	strh	r3, [r7, #18]

		/*
		 * 9) Provide the real registers with the current value in the saftey registers, except for CR1 register.
		 */
		I2C_ConfigPtr->I2Cx->CR2 	= I2Cx_temp[1];
 8000a1e:	89fa      	ldrh	r2, [r7, #14]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
		I2C_ConfigPtr->I2Cx->OAR1 	= I2Cx_temp[2];
 8000a26:	8a3a      	ldrh	r2, [r7, #16]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	609a      	str	r2, [r3, #8]
		I2C_ConfigPtr->I2Cx->OAR2 	= I2Cx_temp[3];
 8000a2e:	8a7a      	ldrh	r2, [r7, #18]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	60da      	str	r2, [r3, #12]
		I2C_ConfigPtr->I2Cx->CCR 	= I2Cx_temp[4];
 8000a36:	8aba      	ldrh	r2, [r7, #20]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	61da      	str	r2, [r3, #28]
		I2C_ConfigPtr->I2Cx->TRISE 	= I2Cx_temp[5];
 8000a3e:	8afa      	ldrh	r2, [r7, #22]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	621a      	str	r2, [r3, #32]
		I2C_ConfigPtr->I2Cx->CR1 	= I2Cx_temp[0];
 8000a46:	89ba      	ldrh	r2, [r7, #12]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	601a      	str	r2, [r3, #0]

		I2C_GPIO_SetPins(I2C_ConfigPtr);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ff26 	bl	80008a0 <I2C_GPIO_SetPins>

		SET_BIT(I2C_ConfigPtr->I2Cx->CR1,I2C_PERIPHERAL_ENABLE_BIT);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	f042 0201 	orr.w	r2, r2, #1
 8000a62:	601a      	str	r2, [r3, #0]
	{
		/* TODO
		 * SMBUS Configuration
		 */
	}
	return;
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
}
 8000a68:	3720      	adds	r7, #32
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	431bde83 	.word	0x431bde83
 8000a74:	40005400 	.word	0x40005400
 8000a78:	40021000 	.word	0x40021000
 8000a7c:	40005800 	.word	0x40005800
 8000a80:	000f4240 	.word	0x000f4240

08000a84 <MCAL_I2C_GetFlagStatus>:
 * @retval 			- None.
 *
 * Note				-
 *
 */
I2C_Flag_Status_t MCAL_I2C_GetFlagStatus(I2C_Config_t* I2C_ConfigPtr, I2C_Flags_t flagType){
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]

	I2C_Flag_Status_t flagStatus = I2C_Flag_Reset;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]

	if(flagType <= I2C_Flag_SMBALERT)
 8000a94:	78fb      	ldrb	r3, [r7, #3]
 8000a96:	2b0f      	cmp	r3, #15
 8000a98:	d80f      	bhi.n	8000aba <MCAL_I2C_GetFlagStatus+0x36>
	{
		if(READ_BIT(I2C_ConfigPtr->I2Cx->SR1,flagType))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	78fa      	ldrb	r2, [r7, #3]
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d013      	beq.n	8000adc <MCAL_I2C_GetFlagStatus+0x58>
		{
			flagStatus = I2C_Flag_Set;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e010      	b.n	8000adc <MCAL_I2C_GetFlagStatus+0x58>
		}
	}
	else
	{
		if(READ_BIT(I2C_ConfigPtr->I2Cx->SR2,(flagType-16)))
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	78fa      	ldrb	r2, [r7, #3]
 8000ac2:	3a10      	subs	r2, #16
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aca:	401a      	ands	r2, r3
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	3b10      	subs	r3, #16
 8000ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MCAL_I2C_GetFlagStatus+0x58>
		{
			flagStatus = I2C_Flag_Set;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
		}
	}

	return flagStatus;
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <MCAL_I2C_GenerateStart>:
 *
 * Note				-
 *
 */
void MCAL_I2C_GenerateStart(I2C_Config_t* I2C_ConfigPtr, I2C_Start_Status_t startStatus,
		I2C_Start_Condition_t startCondition){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
 8000af4:	4613      	mov	r3, r2
 8000af6:	70bb      	strb	r3, [r7, #2]
	/*
	 * Setting the START bit causes the interface to generate a Start condition and to switch to Master mode
	 * (MSL bit set) when the BUSY bit is cleared.
	 */

	if(startCondition != I2C_Repeated_Start)
 8000af8:	78bb      	ldrb	r3, [r7, #2]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d007      	beq.n	8000b0e <MCAL_I2C_GenerateStart+0x26>
	{
		// Wait the BUSY bit is cleared.
		while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_BUSY));
 8000afe:	bf00      	nop
 8000b00:	2111      	movs	r1, #17
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ffbe 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1f8      	bne.n	8000b00 <MCAL_I2C_GenerateStart+0x18>

	}

	//Setting the START bit if I2C_Start_Enable
	if(startStatus == I2C_Start_Enable)
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d108      	bne.n	8000b26 <MCAL_I2C_GenerateStart+0x3e>
		I2C_ConfigPtr->I2Cx->CR1 |= (1<<8);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b22:	601a      	str	r2, [r3, #0]
	else
		I2C_ConfigPtr->I2Cx->CR1 &= ~(1<<8);

}
 8000b24:	e007      	b.n	8000b36 <MCAL_I2C_GenerateStart+0x4e>
		I2C_ConfigPtr->I2Cx->CR1 &= ~(1<<8);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b34:	601a      	str	r2, [r3, #0]
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <MCAL_I2C_GenerateStop>:
 * @retval 			- None.
 *
 * Note				-
 *
 */
void MCAL_I2C_GenerateStop(I2C_Config_t* I2C_ConfigPtr, I2C_Stop_Status_t stopStatus){
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	460b      	mov	r3, r1
 8000b48:	70fb      	strb	r3, [r7, #3]

	//Setting the START bit if I2C_Start_Enable
	if(stopStatus == I2C_Stop_Enable)
 8000b4a:	78fb      	ldrb	r3, [r7, #3]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d108      	bne.n	8000b62 <MCAL_I2C_GenerateStop+0x24>
		I2C_ConfigPtr->I2Cx->CR1 |= (1<<9);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b5e:	601a      	str	r2, [r3, #0]
	else
		I2C_ConfigPtr->I2Cx->CR1 &= ~(1<<9);
}
 8000b60:	e007      	b.n	8000b72 <MCAL_I2C_GenerateStop+0x34>
		I2C_ConfigPtr->I2Cx->CR1 &= ~(1<<9);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <MCAL_I2C_SendAddress>:
 * @retval 			- None.
 *
 * Note				-
 *
 */
void MCAL_I2C_SendAddress(I2C_Config_t* I2C_ConfigPtr, uint16_t devAddress, I2C_Direction_t Dir){
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	707b      	strb	r3, [r7, #1]

	/*
	 * In 7-bit addressing mode (The Only Supported), one address byte is sent.
	 */
	devAddress = (devAddress<<1);
 8000b8c:	887b      	ldrh	r3, [r7, #2]
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	807b      	strh	r3, [r7, #2]
	devAddress |= Dir;
 8000b92:	787b      	ldrb	r3, [r7, #1]
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	807b      	strh	r3, [r7, #2]
	I2C_ConfigPtr->I2Cx->DR = devAddress;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	887a      	ldrh	r2, [r7, #2]
 8000ba2:	611a      	str	r2, [r3, #16]

}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr

08000bae <MCAL_I2C_MasterSendDataPolling>:

// Master Sending/Writing only using polling technique API *Note used for whole sequence*
void MCAL_I2C_MasterSendDataPolling(I2C_Config_t* I2C_ConfigPtr, uint8_t* pTxBuffer, uint32_t dataLength)
{
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
	for(int i=0;i<dataLength;i++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	e011      	b.n	8000be4 <MCAL_I2C_MasterSendDataPolling+0x36>
	{
		I2C_ConfigPtr->I2Cx->DR = pTxBuffer[i];
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	611a      	str	r2, [r3, #16]
		while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_TXE) == I2C_Flag_Reset);
 8000bce:	bf00      	nop
 8000bd0:	2107      	movs	r1, #7
 8000bd2:	68f8      	ldr	r0, [r7, #12]
 8000bd4:	f7ff ff56 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0f8      	beq.n	8000bd0 <MCAL_I2C_MasterSendDataPolling+0x22>
	for(int i=0;i<dataLength;i++)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	3301      	adds	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d8e9      	bhi.n	8000bc0 <MCAL_I2C_MasterSendDataPolling+0x12>
	}
}
 8000bec:	bf00      	nop
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <MCAL_I2C_MasterRecDataPolling>:

// Master Receiving/Reading only using polling technique API *Note used for whole sequence*
void MCAL_I2C_MasterRecDataPolling (I2C_Config_t* I2C_ConfigPtr, uint8_t* pRxBuffer, uint32_t dataLength,
		I2C_Stop_Condition_t stopCondition)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	70fb      	strb	r3, [r7, #3]
	vuint32_t SRxTemp = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]

	if(dataLength > 1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d936      	bls.n	8000c7a <MCAL_I2C_MasterRecDataPolling+0x86>
	{
		// • Clear ADDR.
		SRxTemp = I2C_ConfigPtr->I2Cx->SR1;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	613b      	str	r3, [r7, #16]
		SRxTemp = I2C_ConfigPtr->I2Cx->SR2;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	613b      	str	r3, [r7, #16]

		for(int i=0;i<dataLength;i++)
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	e026      	b.n	8000c70 <MCAL_I2C_MasterRecDataPolling+0x7c>
		{
			if(i == dataLength-1)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	1e5a      	subs	r2, r3, #1
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d10e      	bne.n	8000c4a <MCAL_I2C_MasterRecDataPolling+0x56>
			{
				// • Clear ACK bit
				I2C_ConfigPtr->I2Cx->CR1 &= ~(1<<10);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c3a:	601a      	str	r2, [r3, #0]

				// • Program START/STOP
				if(stopCondition == I2C_Stop)
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d103      	bne.n	8000c4a <MCAL_I2C_MasterRecDataPolling+0x56>
					MCAL_I2C_GenerateStop(I2C_ConfigPtr, I2C_Stop_Enable);
 8000c42:	2101      	movs	r1, #1
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f7ff ff7a 	bl	8000b3e <MCAL_I2C_GenerateStop>
			}

			// Poll on RXNE, wait for data register to be full for reading it.
			while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_RXNE) == I2C_Flag_Reset);
 8000c4a:	bf00      	nop
 8000c4c:	2106      	movs	r1, #6
 8000c4e:	68f8      	ldr	r0, [r7, #12]
 8000c50:	f7ff ff18 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0f8      	beq.n	8000c4c <MCAL_I2C_MasterRecDataPolling+0x58>

			// • Read Data in DR
			pRxBuffer[i] = I2C_ConfigPtr->I2Cx->DR;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6919      	ldr	r1, [r3, #16]
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	4413      	add	r3, r2
 8000c66:	b2ca      	uxtb	r2, r1
 8000c68:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<dataLength;i++)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	617b      	str	r3, [r7, #20]
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8d4      	bhi.n	8000c22 <MCAL_I2C_MasterRecDataPolling+0x2e>
 8000c78:	e027      	b.n	8000cca <MCAL_I2C_MasterRecDataPolling+0xd6>

		}
	}

	else if(dataLength == 1)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d124      	bne.n	8000cca <MCAL_I2C_MasterRecDataPolling+0xd6>
	{
		// • Clear ACK bit
		I2C_ConfigPtr->I2Cx->CR1 &= ~(1<<10);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c8e:	601a      	str	r2, [r3, #0]

		// • Clear ADDR.
		SRxTemp = I2C_ConfigPtr->I2Cx->SR1;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	695b      	ldr	r3, [r3, #20]
 8000c96:	613b      	str	r3, [r7, #16]
		SRxTemp = I2C_ConfigPtr->I2Cx->SR2;
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	613b      	str	r3, [r7, #16]

		// Poll on RXNE, wait for data register to be full for reading it.
		while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_RXNE) == I2C_Flag_Reset);
 8000ca0:	bf00      	nop
 8000ca2:	2106      	movs	r1, #6
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f7ff feed 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d0f8      	beq.n	8000ca2 <MCAL_I2C_MasterRecDataPolling+0xae>

		// • Program START/STOP
		if(stopCondition == I2C_Stop)
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d103      	bne.n	8000cbe <MCAL_I2C_MasterRecDataPolling+0xca>
			MCAL_I2C_GenerateStop(I2C_ConfigPtr, I2C_Stop_Enable);
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	68f8      	ldr	r0, [r7, #12]
 8000cba:	f7ff ff40 	bl	8000b3e <MCAL_I2C_GenerateStop>

		// • Read Data in DR
		*pRxBuffer = I2C_ConfigPtr->I2Cx->DR;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	701a      	strb	r2, [r3, #0]
	}
	(void)SRxTemp;
 8000cca:	693b      	ldr	r3, [r7, #16]
}
 8000ccc:	bf00      	nop
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <MCAL_I2C_MasterTxPolling>:
 * Note				- This API is implemented to support only polling technique and cannot be used with interrupts.
 *
 */
void MCAL_I2C_MasterTxPolling(I2C_Config_t* I2C_ConfigPtr, uint16_t devAddress, uint8_t* pTxBuffer,
		uint32_t dataLength, I2C_Start_Condition_t startCondition,I2C_Stop_Condition_t stopCondition)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	607a      	str	r2, [r7, #4]
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	817b      	strh	r3, [r7, #10]
	//Temp Registers for Reading
	vuint32_t SRxTemp = 0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

	/*
	 * Setting the START bit causes the interface to generate a Start condition and to switch to Master mode
	 * (MSL bit set) when the BUSY bit is cleared.
	 */
	MCAL_I2C_GenerateStart(I2C_ConfigPtr,I2C_Start_Enable,startCondition);
 8000ce8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cec:	461a      	mov	r2, r3
 8000cee:	2101      	movs	r1, #1
 8000cf0:	68f8      	ldr	r0, [r7, #12]
 8000cf2:	f7ff fef9 	bl	8000ae8 <MCAL_I2C_GenerateStart>
	/*
	 * Once the Start condition is sent:
	 * • The SB bit is set by hardware.
	 * So wait for the SB flag to be set.
	 */
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_SB) == I2C_Flag_Reset);
 8000cf6:	bf00      	nop
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	f7ff fec2 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f8      	beq.n	8000cf8 <MCAL_I2C_MasterTxPolling+0x24>

	/*
	 * 	Then the master waits for a read of the SR1 register followed by a write in the DR register with
	 * 	the Slave address. SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	 */
	SRxTemp = I2C_ConfigPtr->I2Cx->SR1;
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	695b      	ldr	r3, [r3, #20]
 8000d0c:	617b      	str	r3, [r7, #20]
	MCAL_I2C_SendAddress(I2C_ConfigPtr, devAddress, I2C_Direction_Write);
 8000d0e:	897b      	ldrh	r3, [r7, #10]
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	68f8      	ldr	r0, [r7, #12]
 8000d16:	f7ff ff31 	bl	8000b7c <MCAL_I2C_SendAddress>
	/*
	 * In 7-bit addressing mode (The Only Supported), one address byte is sent.
	 * As soon as the address byte is sent,
	 * The ADDR bit is set by hardware,
	 */
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_ADDR) == I2C_Flag_Reset);
 8000d1a:	bf00      	nop
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	68f8      	ldr	r0, [r7, #12]
 8000d20:	f7ff feb0 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d0f8      	beq.n	8000d1c <MCAL_I2C_MasterTxPolling+0x48>

	/*
	 * Then the master waits for a read of the SR1 register followed by a read of the SR2 register to clear ADDR
	 * bit.
	 */
	SRxTemp = I2C_ConfigPtr->I2Cx->SR1;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	617b      	str	r3, [r7, #20]
	SRxTemp = I2C_ConfigPtr->I2Cx->SR2;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	617b      	str	r3, [r7, #20]

	/*
	 * Checking if the Master is transmitting as well as if the bus is busy which means that this master still
	 * has access to the bus.
	 */
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_MSL) == I2C_Flag_Reset);
 8000d3a:	bf00      	nop
 8000d3c:	2110      	movs	r1, #16
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f7ff fea0 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d0f8      	beq.n	8000d3c <MCAL_I2C_MasterTxPolling+0x68>
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_BUSY) == I2C_Flag_Reset);
 8000d4a:	bf00      	nop
 8000d4c:	2111      	movs	r1, #17
 8000d4e:	68f8      	ldr	r0, [r7, #12]
 8000d50:	f7ff fe98 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f8      	beq.n	8000d4c <MCAL_I2C_MasterTxPolling+0x78>
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_TRA) == I2C_Flag_Reset);
 8000d5a:	bf00      	nop
 8000d5c:	2112      	movs	r1, #18
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f7ff fe90 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0f8      	beq.n	8000d5c <MCAL_I2C_MasterTxPolling+0x88>
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_TXE) == I2C_Flag_Reset);
 8000d6a:	bf00      	nop
 8000d6c:	2107      	movs	r1, #7
 8000d6e:	68f8      	ldr	r0, [r7, #12]
 8000d70:	f7ff fe88 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f8      	beq.n	8000d6c <MCAL_I2C_MasterTxPolling+0x98>

	/*
	 * Following the address transmission and after clearing ADDR, the master sends bytes from the DR register
	 * to the SDA line via the internal shift register.
	 */
	MCAL_I2C_MasterSendDataPolling(I2C_ConfigPtr, pTxBuffer, dataLength);
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	68f8      	ldr	r0, [r7, #12]
 8000d80:	f7ff ff15 	bl	8000bae <MCAL_I2C_MasterSendDataPolling>

	//   when i=dataLenght, TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_TXE) == I2C_Flag_Reset);
 8000d84:	bf00      	nop
 8000d86:	2107      	movs	r1, #7
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f7ff fe7b 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f8      	beq.n	8000d86 <MCAL_I2C_MasterTxPolling+0xb2>

	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_BTF) == I2C_Flag_Reset);
 8000d94:	bf00      	nop
 8000d96:	2102      	movs	r1, #2
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff fe73 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f8      	beq.n	8000d96 <MCAL_I2C_MasterTxPolling+0xc2>

	//After the last byte is written to the DR register, the STOP bit is set by software to generate a
	//Stop condition. The interface automatically goes back to slave mode (MSL bit cleared).
	if(stopCondition == I2C_Stop)
 8000da4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d103      	bne.n	8000db4 <MCAL_I2C_MasterTxPolling+0xe0>
		MCAL_I2C_GenerateStop(I2C_ConfigPtr, I2C_Stop_Enable);
 8000dac:	2101      	movs	r1, #1
 8000dae:	68f8      	ldr	r0, [r7, #12]
 8000db0:	f7ff fec5 	bl	8000b3e <MCAL_I2C_GenerateStop>

	(void)SRxTemp;
 8000db4:	697b      	ldr	r3, [r7, #20]
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <MCAL_I2C_MasterRxPolling>:
 * Note				- This API is implemented to support only polling technique and cannot be used with interrupts.
 *
 */
void MCAL_I2C_MasterRxPolling(I2C_Config_t* I2C_ConfigPtr, uint16_t devAddress, uint8_t* pRxBuffer,
		uint32_t dataLength, I2C_Start_Condition_t startCondition, I2C_Stop_Condition_t stopCondition)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	817b      	strh	r3, [r7, #10]
	//Temp Registers for Reading
	vuint32_t SRxTemp = 0;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	617b      	str	r3, [r7, #20]

	//Enable the Acknowledgment even if it is disabled in the initialization
	SET_BIT(I2C_ConfigPtr->I2Cx->CR1,I2C_ACKNOWLEDGMENT_ENABLE_BIT);
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000de0:	601a      	str	r2, [r3, #0]

	//Setting the START bit causes the interface to generate a Start condition and to switch to Master mode
	//(MSL bit set) when the BUSY bit is cleared.
	MCAL_I2C_GenerateStart(I2C_ConfigPtr,I2C_Start_Enable,startCondition);
 8000de2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000de6:	461a      	mov	r2, r3
 8000de8:	2101      	movs	r1, #1
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f7ff fe7c 	bl	8000ae8 <MCAL_I2C_GenerateStart>

	// Once the Start condition is sent: • The SB bit is set by hardware. So wait for the SB flag to be set.
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_SB) == I2C_Flag_Reset);
 8000df0:	bf00      	nop
 8000df2:	2100      	movs	r1, #0
 8000df4:	68f8      	ldr	r0, [r7, #12]
 8000df6:	f7ff fe45 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f8      	beq.n	8000df2 <MCAL_I2C_MasterRxPolling+0x34>

	// Then the master waits for a read of the SR1 register followed by a write in the DR register with
	// the Slave address. SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	SRxTemp = I2C_ConfigPtr->I2Cx->SR1;
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	617b      	str	r3, [r7, #20]
	MCAL_I2C_SendAddress(I2C_ConfigPtr, devAddress, I2C_Direction_Read);
 8000e08:	897b      	ldrh	r3, [r7, #10]
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff feb4 	bl	8000b7c <MCAL_I2C_SendAddress>


	// Following the address transmission and after clearing ADDR, the master receives bytes from the DR register
	// from the SDA line via the internal shift register.
	while(MCAL_I2C_GetFlagStatus(I2C_ConfigPtr,I2C_Flag_ADDR) == I2C_Flag_Reset);
 8000e14:	bf00      	nop
 8000e16:	2101      	movs	r1, #1
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f7ff fe33 	bl	8000a84 <MCAL_I2C_GetFlagStatus>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0f8      	beq.n	8000e16 <MCAL_I2C_MasterRxPolling+0x58>

	MCAL_I2C_MasterRecDataPolling(I2C_ConfigPtr, pRxBuffer, dataLength, stopCondition);
 8000e24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f7ff fee1 	bl	8000bf4 <MCAL_I2C_MasterRecDataPolling>

	(void)SRxTemp;
 8000e32:	697b      	ldr	r3, [r7, #20]
}
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <I2C1_EV_IRQHandler>:
										ISRs Definitions
-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
======================================================================================================*/

void I2C1_EV_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
	//vuint32_t Dummy_Read = 0; // Volatile for compiler optimization
	vuint32_t dummy = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	603b      	str	r3, [r7, #0]

	/* Interrupt handling for both master and slave mode of the device */
	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_1 = (I2C1->CR2 & (I2C_IRQ_ITEVFEN));	// Event interrupt enable
 8000e46:	4b39      	ldr	r3, [pc, #228]	; (8000f2c <I2C1_EV_IRQHandler+0xf0>)
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e4e:	60fb      	str	r3, [r7, #12]
	Temp_2 = (I2C1->CR2 & (I2C_IRQ_IITBUFEN));	// Buffer interrupt enable
 8000e50:	4b36      	ldr	r3, [pc, #216]	; (8000f2c <I2C1_EV_IRQHandler+0xf0>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e58:	60bb      	str	r3, [r7, #8]
	Temp_3 = (I2C1->SR1 & (I2C_Flag_STOPF));	// Stop detection (slave mode)
 8000e5a:	4b34      	ldr	r3, [pc, #208]	; (8000f2c <I2C1_EV_IRQHandler+0xf0>)
 8000e5c:	695b      	ldr	r3, [r3, #20]
 8000e5e:	f003 0304 	and.w	r3, r3, #4
 8000e62:	607b      	str	r3, [r7, #4]

	/* Handle Stop Condition Event */
	if(Temp_1 && Temp_3)
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00a      	beq.n	8000e80 <I2C1_EV_IRQHandler+0x44>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d007      	beq.n	8000e80 <I2C1_EV_IRQHandler+0x44>
	{
		/* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		 * i have already read SR1 in Temp_3
		 * then next statement i write to CR1
		 */
		I2C1->CR1 |= 0x0000;
 8000e70:	4b2e      	ldr	r3, [pc, #184]	; (8000f2c <I2C1_EV_IRQHandler+0xf0>)
 8000e72:	4a2e      	ldr	r2, [pc, #184]	; (8000f2c <I2C1_EV_IRQHandler+0xf0>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	6013      	str	r3, [r2, #0]
		g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_STOPF);
 8000e78:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <I2C1_EV_IRQHandler+0xf4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2004      	movs	r0, #4
 8000e7e:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle Received address matched. */
	Temp_3 = (I2C1->SR1 & (I2C_Flag_ADDR));		//ADDR
 8000e80:	4b2a      	ldr	r3, [pc, #168]	; (8000f2c <I2C1_EV_IRQHandler+0xf0>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_3)
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d00c      	beq.n	8000eaa <I2C1_EV_IRQHandler+0x6e>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d009      	beq.n	8000eaa <I2C1_EV_IRQHandler+0x6e>
		 */
		//Dummy_Read  = I2C1->SR1;
		//Dummy_Read  = I2C1->SR2;

		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 8000e96:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <I2C1_EV_IRQHandler+0xf0>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d103      	bne.n	8000eaa <I2C1_EV_IRQHandler+0x6e>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_ADDR);
 8000ea2:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <I2C1_EV_IRQHandler+0xf4>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2001      	movs	r0, #1
 8000ea8:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
	Temp_3 = (I2C1->SR1 & (I2C_Flag_TXE));		// TXE
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <I2C1_EV_IRQHandler+0xf0>)
 8000eac:	695b      	ldr	r3, [r3, #20]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case TXE=1, ITEVTEN=1, ITBUFEN=1
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d015      	beq.n	8000ee6 <I2C1_EV_IRQHandler+0xaa>
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d012      	beq.n	8000ee6 <I2C1_EV_IRQHandler+0xaa>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00f      	beq.n	8000ee6 <I2C1_EV_IRQHandler+0xaa>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <I2C1_EV_IRQHandler+0xf0>)
 8000ec8:	699b      	ldr	r3, [r3, #24]
 8000eca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d109      	bne.n	8000ee6 <I2C1_EV_IRQHandler+0xaa>
		}
		else
		{
			/* Slave mode */
			/* Check if slave in transmit mode */
			if(I2C1->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 1: Data bytes transmitted
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <I2C1_EV_IRQHandler+0xf0>)
 8000ed4:	699b      	ldr	r3, [r3, #24]
 8000ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <I2C1_EV_IRQHandler+0xaa>
			{
				g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_TxE);
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <I2C1_EV_IRQHandler+0xf4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2006      	movs	r0, #6
 8000ee4:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
	Temp_3 = (I2C1->SR1 & (I2C_Flag_RXNE));		// RXNE
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <I2C1_EV_IRQHandler+0xf0>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	f003 0306 	and.w	r3, r3, #6
 8000eee:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d015      	beq.n	8000f22 <I2C1_EV_IRQHandler+0xe6>
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d012      	beq.n	8000f22 <I2C1_EV_IRQHandler+0xe6>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d00f      	beq.n	8000f22 <I2C1_EV_IRQHandler+0xe6>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <I2C1_EV_IRQHandler+0xf0>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d109      	bne.n	8000f22 <I2C1_EV_IRQHandler+0xe6>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			if(I2C1->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 0: Data bytes received
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <I2C1_EV_IRQHandler+0xf0>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <I2C1_EV_IRQHandler+0xe6>
			{
				g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_RxNE);
 8000f1a:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <I2C1_EV_IRQHandler+0xf4>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2005      	movs	r0, #5
 8000f20:	4798      	blx	r3
			}
		}
	}
	(void)dummy;
 8000f22:	683b      	ldr	r3, [r7, #0]

}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40005400 	.word	0x40005400
 8000f30:	20000090 	.word	0x20000090

08000f34 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (I2C1->CR2) & I2C_IRQ_ITERREN;
 8000f3a:	4b39      	ldr	r3, [pc, #228]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f42:	607b      	str	r3, [r7, #4]


/***********************Check for Bus error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_BERR);
 8000f44:	4b36      	ldr	r3, [pc, #216]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2 )
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00c      	beq.n	8000f6e <I2C1_ER_IRQHandler+0x3a>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d009      	beq.n	8000f6e <I2C1_ER_IRQHandler+0x3a>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_BERR);
 8000f5a:	4b31      	ldr	r3, [pc, #196]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	4a30      	ldr	r2, [pc, #192]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000f60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f64:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
	   g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_BERR);
 8000f66:	4b2f      	ldr	r3, [pc, #188]	; (8001024 <I2C1_ER_IRQHandler+0xf0>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	4798      	blx	r3
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_ARLO);
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	f003 0302 	and.w	r3, r3, #2
 8000f76:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00c      	beq.n	8000f98 <I2C1_ER_IRQHandler+0x64>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d009      	beq.n	8000f98 <I2C1_ER_IRQHandler+0x64>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_ARLO);
 8000f84:	4b26      	ldr	r3, [pc, #152]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	4a25      	ldr	r2, [pc, #148]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000f8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000f8e:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_ARLO);
 8000f90:	4b24      	ldr	r3, [pc, #144]	; (8001024 <I2C1_ER_IRQHandler+0xf0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2001      	movs	r0, #1
 8000f96:	4798      	blx	r3

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_AF);
 8000f98:	4b21      	ldr	r3, [pc, #132]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00c      	beq.n	8000fc2 <I2C1_ER_IRQHandler+0x8e>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d009      	beq.n	8000fc2 <I2C1_ER_IRQHandler+0x8e>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_AF);
 8000fae:	4b1c      	ldr	r3, [pc, #112]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000fb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fb8:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_AF);
 8000fba:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <I2C1_ER_IRQHandler+0xf0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	4798      	blx	r3
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_OVR);
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d00c      	beq.n	8000fec <I2C1_ER_IRQHandler+0xb8>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d009      	beq.n	8000fec <I2C1_ER_IRQHandler+0xb8>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_OVR);
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	4a10      	ldr	r2, [pc, #64]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fe2:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_OVR);
 8000fe4:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <I2C1_ER_IRQHandler+0xf0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2003      	movs	r0, #3
 8000fea:	4798      	blx	r3
	}

/***********************Check for Time out error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_TIMEOUT);
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	f003 0320 	and.w	r3, r3, #32
 8000ff4:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d00c      	beq.n	8001016 <I2C1_ER_IRQHandler+0xe2>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d009      	beq.n	8001016 <I2C1_ER_IRQHandler+0xe2>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_TIMEOUT);
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a06      	ldr	r2, [pc, #24]	; (8001020 <I2C1_ER_IRQHandler+0xec>)
 8001008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800100c:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_TIMEOUT);
 800100e:	4b05      	ldr	r3, [pc, #20]	; (8001024 <I2C1_ER_IRQHandler+0xf0>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	2005      	movs	r0, #5
 8001014:	4798      	blx	r3
	}
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40005400 	.word	0x40005400
 8001024:	20000098 	.word	0x20000098

08001028 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0

	//vuint32_t Dummy_Read = 0; // Volatile for compiler optimization
	vuint32_t dummy = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	603b      	str	r3, [r7, #0]

	/* Interrupt handling for both master and slave mode of the device */
	uint32_t Temp_1, Temp_2, Temp_3;

	Temp_1 = (I2C2->CR2 & (I2C_IRQ_ITEVFEN));	// Event interrupt enable
 8001032:	4b39      	ldr	r3, [pc, #228]	; (8001118 <I2C2_EV_IRQHandler+0xf0>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800103a:	60fb      	str	r3, [r7, #12]
	Temp_2 = (I2C2->CR2 & (I2C_IRQ_IITBUFEN));	// Buffer interrupt enable
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <I2C2_EV_IRQHandler+0xf0>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001044:	60bb      	str	r3, [r7, #8]
	Temp_3 = (I2C2->SR1 & (I2C_Flag_STOPF));	// Stop detection (slave mode)
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <I2C2_EV_IRQHandler+0xf0>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	607b      	str	r3, [r7, #4]

	/* Handle Stop Condition Event */
	if(Temp_1 && Temp_3)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00a      	beq.n	800106c <I2C2_EV_IRQHandler+0x44>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d007      	beq.n	800106c <I2C2_EV_IRQHandler+0x44>
	{
		/* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		 * i have already read SR1 in Temp_3
		 * then next statement i write to CR1
		 */
		I2C2->CR1 |= 0x0000;
 800105c:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <I2C2_EV_IRQHandler+0xf0>)
 800105e:	4a2e      	ldr	r2, [pc, #184]	; (8001118 <I2C2_EV_IRQHandler+0xf0>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6013      	str	r3, [r2, #0]
		g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_STOPF);
 8001064:	4b2d      	ldr	r3, [pc, #180]	; (800111c <I2C2_EV_IRQHandler+0xf4>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2004      	movs	r0, #4
 800106a:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle Received address matched. */
	Temp_3 = (I2C2->SR1 & (I2C_Flag_ADDR));		//ADDR
 800106c:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <I2C2_EV_IRQHandler+0xf0>)
 800106e:	695b      	ldr	r3, [r3, #20]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_3)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00c      	beq.n	8001096 <I2C2_EV_IRQHandler+0x6e>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d009      	beq.n	8001096 <I2C2_EV_IRQHandler+0x6e>
		 */
		//Dummy_Read  = I2C1->SR1;
		//Dummy_Read  = I2C1->SR2;

		/* Check master mode or slave mode */
		if(I2C2->SR2 & (1<<I2C_Flag_MSL))
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <I2C2_EV_IRQHandler+0xf0>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d103      	bne.n	8001096 <I2C2_EV_IRQHandler+0x6e>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_ADDR);
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <I2C2_EV_IRQHandler+0xf4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2001      	movs	r0, #1
 8001094:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
	Temp_3 = (I2C2->SR1 & (I2C_Flag_TXE));		// TXE
 8001096:	4b20      	ldr	r3, [pc, #128]	; (8001118 <I2C2_EV_IRQHandler+0xf0>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case TXE=1, ITEVTEN=1, ITBUFEN=1
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d015      	beq.n	80010d2 <I2C2_EV_IRQHandler+0xaa>
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d012      	beq.n	80010d2 <I2C2_EV_IRQHandler+0xaa>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00f      	beq.n	80010d2 <I2C2_EV_IRQHandler+0xaa>
	{
		/* Check master mode or slave mode */
		if(I2C2->SR2 & (1<<I2C_Flag_MSL))
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <I2C2_EV_IRQHandler+0xf0>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d109      	bne.n	80010d2 <I2C2_EV_IRQHandler+0xaa>
		}
		else
		{
			/* Slave mode */
			/* Check if slave in transmit mode */
			if(I2C2->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 1: Data bytes transmitted
 80010be:	4b16      	ldr	r3, [pc, #88]	; (8001118 <I2C2_EV_IRQHandler+0xf0>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d003      	beq.n	80010d2 <I2C2_EV_IRQHandler+0xaa>
			{
				g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_TxE);
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <I2C2_EV_IRQHandler+0xf4>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2006      	movs	r0, #6
 80010d0:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
	Temp_3 = (I2C2->SR1 & (I2C_Flag_RXNE));		// RXNE
 80010d2:	4b11      	ldr	r3, [pc, #68]	; (8001118 <I2C2_EV_IRQHandler+0xf0>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	f003 0306 	and.w	r3, r3, #6
 80010da:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d015      	beq.n	800110e <I2C2_EV_IRQHandler+0xe6>
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d012      	beq.n	800110e <I2C2_EV_IRQHandler+0xe6>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00f      	beq.n	800110e <I2C2_EV_IRQHandler+0xe6>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <I2C2_EV_IRQHandler+0xf8>)
 80010f0:	699b      	ldr	r3, [r3, #24]
 80010f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d109      	bne.n	800110e <I2C2_EV_IRQHandler+0xe6>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			if(I2C2->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 0: Data bytes received
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <I2C2_EV_IRQHandler+0xf0>)
 80010fc:	699b      	ldr	r3, [r3, #24]
 80010fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <I2C2_EV_IRQHandler+0xe6>
			{
				g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_RxNE);
 8001106:	4b05      	ldr	r3, [pc, #20]	; (800111c <I2C2_EV_IRQHandler+0xf4>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2005      	movs	r0, #5
 800110c:	4798      	blx	r3
			}
		}
	}
	(void)dummy;
 800110e:	683b      	ldr	r3, [r7, #0]


}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40005800 	.word	0x40005800
 800111c:	20000094 	.word	0x20000094
 8001120:	40005400 	.word	0x40005400

08001124 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (I2C2->CR2) & I2C_IRQ_ITERREN;
 800112a:	4b39      	ldr	r3, [pc, #228]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001132:	607b      	str	r3, [r7, #4]


/***********************Check for Bus error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_BERR);
 8001134:	4b36      	ldr	r3, [pc, #216]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 8001136:	695b      	ldr	r3, [r3, #20]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2 )
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00c      	beq.n	800115e <I2C2_ER_IRQHandler+0x3a>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <I2C2_ER_IRQHandler+0x3a>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_BERR);
 800114a:	4b31      	ldr	r3, [pc, #196]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a30      	ldr	r2, [pc, #192]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 8001150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001154:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
	   g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_BERR);
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <I2C2_ER_IRQHandler+0xf0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2000      	movs	r0, #0
 800115c:	4798      	blx	r3
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_ARLO);
 800115e:	4b2c      	ldr	r3, [pc, #176]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 8001160:	695b      	ldr	r3, [r3, #20]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00c      	beq.n	8001188 <I2C2_ER_IRQHandler+0x64>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d009      	beq.n	8001188 <I2C2_ER_IRQHandler+0x64>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_ARLO);
 8001174:	4b26      	ldr	r3, [pc, #152]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 8001176:	695b      	ldr	r3, [r3, #20]
 8001178:	4a25      	ldr	r2, [pc, #148]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 800117a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800117e:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_ARLO);
 8001180:	4b24      	ldr	r3, [pc, #144]	; (8001214 <I2C2_ER_IRQHandler+0xf0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2001      	movs	r0, #1
 8001186:	4798      	blx	r3

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_AF);
 8001188:	4b21      	ldr	r3, [pc, #132]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	f003 0304 	and.w	r3, r3, #4
 8001190:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00c      	beq.n	80011b2 <I2C2_ER_IRQHandler+0x8e>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d009      	beq.n	80011b2 <I2C2_ER_IRQHandler+0x8e>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		I2C1->SR2 &= ~( 1 << I2C_Flag_AF);
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <I2C2_ER_IRQHandler+0xf4>)
 80011a0:	699b      	ldr	r3, [r3, #24]
 80011a2:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <I2C2_ER_IRQHandler+0xf4>)
 80011a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011a8:	6193      	str	r3, [r2, #24]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_AF);
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <I2C2_ER_IRQHandler+0xf0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2002      	movs	r0, #2
 80011b0:	4798      	blx	r3
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_OVR);
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00c      	beq.n	80011dc <I2C2_ER_IRQHandler+0xb8>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d009      	beq.n	80011dc <I2C2_ER_IRQHandler+0xb8>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_OVR);
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 80011ca:	695b      	ldr	r3, [r3, #20]
 80011cc:	4a10      	ldr	r2, [pc, #64]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 80011ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80011d2:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_OVR);
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <I2C2_ER_IRQHandler+0xf0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2003      	movs	r0, #3
 80011da:	4798      	blx	r3
	}

/***********************Check for Time out error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_TIMEOUT);
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	f003 0320 	and.w	r3, r3, #32
 80011e4:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d00c      	beq.n	8001206 <I2C2_ER_IRQHandler+0xe2>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d009      	beq.n	8001206 <I2C2_ER_IRQHandler+0xe2>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_TIMEOUT);
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	4a06      	ldr	r2, [pc, #24]	; (8001210 <I2C2_ER_IRQHandler+0xec>)
 80011f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80011fc:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_TIMEOUT);
 80011fe:	4b05      	ldr	r3, [pc, #20]	; (8001214 <I2C2_ER_IRQHandler+0xf0>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2005      	movs	r0, #5
 8001204:	4798      	blx	r3
	}
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40005800 	.word	0x40005800
 8001214:	2000009c 	.word	0x2000009c
 8001218:	40005400 	.word	0x40005400

0800121c <MCAL_RCC_SYSCLK>:
* @retval 			- SYSCLK Frequency.
*
* Note				- HSE is configured by the user. The PLL frequency is returned unchecked by 16MHz and to be done later.
*
*/
uint32_t MCAL_RCC_SYSCLK(void){
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
	* 00: HSI oscillator used as system clock
	* 01: HSE oscillator used as system clock
	* 10: PLL used as system clock
	* 11: Not applicable.
	*/
	switch( ( (RCC->CFGR) >> 2 ) & 0x3)
 8001220:	4b0d      	ldr	r3, [pc, #52]	; (8001258 <MCAL_RCC_SYSCLK+0x3c>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b03      	cmp	r3, #3
 800122c:	d810      	bhi.n	8001250 <MCAL_RCC_SYSCLK+0x34>
 800122e:	a201      	add	r2, pc, #4	; (adr r2, 8001234 <MCAL_RCC_SYSCLK+0x18>)
 8001230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001234:	08001245 	.word	0x08001245
 8001238:	08001249 	.word	0x08001249
 800123c:	0800124d 	.word	0x0800124d
 8001240:	08001251 	.word	0x08001251
	{
		case 0:
			return HSI_CLK;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <MCAL_RCC_SYSCLK+0x40>)
 8001246:	e003      	b.n	8001250 <MCAL_RCC_SYSCLK+0x34>
		case 1:
			return HSE_CLK; //To be configured by the user @Config HSE_CLK_Define
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <MCAL_RCC_SYSCLK+0x44>)
 800124a:	e001      	b.n	8001250 <MCAL_RCC_SYSCLK+0x34>
		case 2:
			return 16000000; //To do later
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <MCAL_RCC_SYSCLK+0x44>)
 800124e:	e7ff      	b.n	8001250 <MCAL_RCC_SYSCLK+0x34>
		case 3:
			break;
	}

}
 8001250:	4618      	mov	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40021000 	.word	0x40021000
 800125c:	007a1200 	.word	0x007a1200
 8001260:	00f42400 	.word	0x00f42400

08001264 <MCAL_RCC_HCLK>:
* @retval 			- HCLK Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_HCLK(void){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0

	/*
	* HPRE[3:0]: AHB prescaler
	*/
	uint32_t HCLK = (MCAL_RCC_SYSCLK() >> (g_AHB_Prescaler_Table[ (RCC->CFGR >> 4) & 0b1111 ]));
 800126a:	f7ff ffd7 	bl	800121c <MCAL_RCC_SYSCLK>
 800126e:	4601      	mov	r1, r0
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <MCAL_RCC_HCLK+0x2c>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	4a06      	ldr	r2, [pc, #24]	; (8001294 <MCAL_RCC_HCLK+0x30>)
 800127c:	5cd3      	ldrb	r3, [r2, r3]
 800127e:	fa21 f303 	lsr.w	r3, r1, r3
 8001282:	607b      	str	r3, [r7, #4]
	return HCLK;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000
 8001294:	08001490 	.word	0x08001490

08001298 <MCAL_RCC_PCLK1>:
* @retval 			- PCLK1 Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_PCLK1(void){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0

	/*
	* PPRE1[2:0]: APB Low-speed prescaler (APB1)
	*/

	uint32_t PCLK1 =  (MCAL_RCC_HCLK() >> (g_APB_Prescaler_Table[ (RCC->CFGR >> 8) & 0b111 ]));
 800129e:	f7ff ffe1 	bl	8001264 <MCAL_RCC_HCLK>
 80012a2:	4601      	mov	r1, r0
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <MCAL_RCC_PCLK1+0x2c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <MCAL_RCC_PCLK1+0x30>)
 80012b0:	5cd3      	ldrb	r3, [r2, r3]
 80012b2:	fa21 f303 	lsr.w	r3, r1, r3
 80012b6:	607b      	str	r3, [r7, #4]
	return PCLK1;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	08001488 	.word	0x08001488

080012cc <SPI1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void SPI1_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <SPI1_IRQHandler+0x10>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4798      	blx	r3
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	200000a0 	.word	0x200000a0

080012e0 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 80012e4:	4b02      	ldr	r3, [pc, #8]	; (80012f0 <SPI2_IRQHandler+0x10>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	4798      	blx	r3
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200000a0 	.word	0x200000a0

080012f4 <USART1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void USART1_IRQHandler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 80012f8:	4b02      	ldr	r3, [pc, #8]	; (8001304 <USART1_IRQHandler+0x10>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4798      	blx	r3
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200000a8 	.word	0x200000a8

08001308 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 800130c:	4b02      	ldr	r3, [pc, #8]	; (8001318 <USART2_IRQHandler+0x10>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4798      	blx	r3
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200000a8 	.word	0x200000a8

0800131c <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 8001320:	4b02      	ldr	r3, [pc, #8]	; (800132c <USART3_IRQHandler+0x10>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	4798      	blx	r3
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200000a8 	.word	0x200000a8

08001330 <main>:
#include "../HAL/Inc/keypad.h"
#include "../HAL/Inc/SevenSegment.h"
#include "../HAL/Inc/EEPROM.h"

int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0

	//Test Case 1
	uint8_t ch1[7] = {1,2,3,4,5,6,7};
 8001336:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <main+0x98>)
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001340:	6018      	str	r0, [r3, #0]
 8001342:	3304      	adds	r3, #4
 8001344:	8019      	strh	r1, [r3, #0]
 8001346:	3302      	adds	r3, #2
 8001348:	0c0a      	lsrs	r2, r1, #16
 800134a:	701a      	strb	r2, [r3, #0]
	uint8_t ch2[7] = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	f8c3 2003 	str.w	r2, [r3, #3]

	HAL_EEPROM_Init();
 8001356:	f7fe ff0b 	bl	8000170 <HAL_EEPROM_Init>
	HAL_EEPROM_WriteNbytes(0xAF, ch1 ,7);
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	2207      	movs	r2, #7
 8001360:	4619      	mov	r1, r3
 8001362:	20af      	movs	r0, #175	; 0xaf
 8001364:	f7fe ff26 	bl	80001b4 <HAL_EEPROM_WriteNbytes>
	HAL_EEPROM_ReadNbytes(0xAF, ch2 ,7);
 8001368:	463b      	mov	r3, r7
 800136a:	2207      	movs	r2, #7
 800136c:	4619      	mov	r1, r3
 800136e:	20af      	movs	r0, #175	; 0xaf
 8001370:	f7fe ff70 	bl	8000254 <HAL_EEPROM_ReadNbytes>

	//Test Case 2
	ch1[0] = 0xA;
 8001374:	230a      	movs	r3, #10
 8001376:	723b      	strb	r3, [r7, #8]
	ch1[1] = 0xB;
 8001378:	230b      	movs	r3, #11
 800137a:	727b      	strb	r3, [r7, #9]
	ch1[2] = 0xC;
 800137c:	230c      	movs	r3, #12
 800137e:	72bb      	strb	r3, [r7, #10]
	ch1[3] = 0xD;
 8001380:	230d      	movs	r3, #13
 8001382:	72fb      	strb	r3, [r7, #11]

	HAL_EEPROM_WriteNbytes(0xFFF, ch1 ,4);
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	2204      	movs	r2, #4
 800138a:	4619      	mov	r1, r3
 800138c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001390:	f7fe ff10 	bl	80001b4 <HAL_EEPROM_WriteNbytes>
	HAL_EEPROM_ReadNbytes(0xFFF, ch2 ,4);
 8001394:	463b      	mov	r3, r7
 8001396:	2204      	movs	r2, #4
 8001398:	4619      	mov	r1, r3
 800139a:	f640 70ff 	movw	r0, #4095	; 0xfff
 800139e:	f7fe ff59 	bl	8000254 <HAL_EEPROM_ReadNbytes>

	//Test Case 3
	ch1[0] = 0xAB;
 80013a2:	23ab      	movs	r3, #171	; 0xab
 80013a4:	723b      	strb	r3, [r7, #8]

	HAL_EEPROM_WriteNbytes(0x1234, ch1 ,1);
 80013a6:	f107 0308 	add.w	r3, r7, #8
 80013aa:	2201      	movs	r2, #1
 80013ac:	4619      	mov	r1, r3
 80013ae:	f241 2034 	movw	r0, #4660	; 0x1234
 80013b2:	f7fe feff 	bl	80001b4 <HAL_EEPROM_WriteNbytes>
	HAL_EEPROM_ReadNbytes(0x1234, ch2 ,1);
 80013b6:	463b      	mov	r3, r7
 80013b8:	2201      	movs	r2, #1
 80013ba:	4619      	mov	r1, r3
 80013bc:	f241 2034 	movw	r0, #4660	; 0x1234
 80013c0:	f7fe ff48 	bl	8000254 <HAL_EEPROM_ReadNbytes>

    while (1)
 80013c4:	e7fe      	b.n	80013c4 <main+0x94>
 80013c6:	bf00      	nop
 80013c8:	08001480 	.word	0x08001480

080013cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <LoopForever+0xe>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <LoopForever+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013fa:	f000 f811 	bl	8001420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013fe:	f7ff ff97 	bl	8001330 <main>

08001402 <LoopForever>:

LoopForever:
    b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   r0, =_estack
 8001404:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001410:	080014a8 	.word	0x080014a8
  ldr r2, =_sbss
 8001414:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001418:	200000b4 	.word	0x200000b4

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <__libc_init_array>:
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	2500      	movs	r5, #0
 8001424:	4e0c      	ldr	r6, [pc, #48]	; (8001458 <__libc_init_array+0x38>)
 8001426:	4c0d      	ldr	r4, [pc, #52]	; (800145c <__libc_init_array+0x3c>)
 8001428:	1ba4      	subs	r4, r4, r6
 800142a:	10a4      	asrs	r4, r4, #2
 800142c:	42a5      	cmp	r5, r4
 800142e:	d109      	bne.n	8001444 <__libc_init_array+0x24>
 8001430:	f000 f81a 	bl	8001468 <_init>
 8001434:	2500      	movs	r5, #0
 8001436:	4e0a      	ldr	r6, [pc, #40]	; (8001460 <__libc_init_array+0x40>)
 8001438:	4c0a      	ldr	r4, [pc, #40]	; (8001464 <__libc_init_array+0x44>)
 800143a:	1ba4      	subs	r4, r4, r6
 800143c:	10a4      	asrs	r4, r4, #2
 800143e:	42a5      	cmp	r5, r4
 8001440:	d105      	bne.n	800144e <__libc_init_array+0x2e>
 8001442:	bd70      	pop	{r4, r5, r6, pc}
 8001444:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001448:	4798      	blx	r3
 800144a:	3501      	adds	r5, #1
 800144c:	e7ee      	b.n	800142c <__libc_init_array+0xc>
 800144e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001452:	4798      	blx	r3
 8001454:	3501      	adds	r5, #1
 8001456:	e7f2      	b.n	800143e <__libc_init_array+0x1e>
 8001458:	080014a0 	.word	0x080014a0
 800145c:	080014a0 	.word	0x080014a0
 8001460:	080014a0 	.word	0x080014a0
 8001464:	080014a4 	.word	0x080014a4

08001468 <_init>:
 8001468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146a:	bf00      	nop
 800146c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800146e:	bc08      	pop	{r3}
 8001470:	469e      	mov	lr, r3
 8001472:	4770      	bx	lr

08001474 <_fini>:
 8001474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001476:	bf00      	nop
 8001478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800147a:	bc08      	pop	{r3}
 800147c:	469e      	mov	lr, r3
 800147e:	4770      	bx	lr
