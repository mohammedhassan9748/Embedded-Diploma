
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001000  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001130  08001130  00011130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011a8  080011a8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080011a8  080011a8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011a8  080011a8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011a8  080011a8  000111a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011ac  080011ac  000111ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080011b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000008  080011b8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080011b8  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b61  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007e0  00000000  00000000  00021b92  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000cca  00000000  00000000  00022372  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000228  00000000  00000000  00023040  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c0  00000000  00000000  00023268  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000945  00000000  00000000  00023428  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000b69  00000000  00000000  00023d6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007e13  00000000  00000000  000248d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002c6e9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006c4  00000000  00000000  0002c764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000008 	.word	0x20000008
 800014c:	00000000 	.word	0x00000000
 8000150:	08001118 	.word	0x08001118

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	2000000c 	.word	0x2000000c
 800016c:	08001118 	.word	0x08001118

08000170 <EXTI0_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3

}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000003c 	.word	0x2000003c

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3

}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000003c 	.word	0x2000003c

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3

}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000003c 	.word	0x2000003c

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3

}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000003c 	.word	0x2000003c

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000003c 	.word	0x2000003c

08000224 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); g_IRQ_CallBackPtr[5]();}
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); g_IRQ_CallBackPtr[6]();}
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); g_IRQ_CallBackPtr[7]();}
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); g_IRQ_CallBackPtr[8]();}
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); g_IRQ_CallBackPtr[9]();}
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	2000003c 	.word	0x2000003c

080002cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); g_IRQ_CallBackPtr[10]();}
 80002d0:	4b26      	ldr	r3, [pc, #152]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b23      	ldr	r3, [pc, #140]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a22      	ldr	r2, [pc, #136]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b21      	ldr	r3, [pc, #132]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); g_IRQ_CallBackPtr[11]();}
 80002ee:	4b1f      	ldr	r3, [pc, #124]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b1c      	ldr	r3, [pc, #112]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a1b      	ldr	r2, [pc, #108]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b1a      	ldr	r3, [pc, #104]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); g_IRQ_CallBackPtr[12]();}
 800030c:	4b17      	ldr	r3, [pc, #92]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b14      	ldr	r3, [pc, #80]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a13      	ldr	r2, [pc, #76]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b12      	ldr	r3, [pc, #72]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); g_IRQ_CallBackPtr[13]();}
 800032a:	4b10      	ldr	r3, [pc, #64]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b0d      	ldr	r3, [pc, #52]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a0c      	ldr	r2, [pc, #48]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); g_IRQ_CallBackPtr[14]();}
 8000348:	4b08      	ldr	r3, [pc, #32]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b05      	ldr	r3, [pc, #20]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a04      	ldr	r2, [pc, #16]	; (800036c <EXTI15_10_IRQHandler+0xa0>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b03      	ldr	r3, [pc, #12]	; (8000370 <EXTI15_10_IRQHandler+0xa4>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
}
 8000366:	bf00      	nop
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40010400 	.word	0x40010400
 8000370:	2000003c 	.word	0x2000003c

08000374 <Get_CRx_Position>:
/*================================================================
 * Description :
 * Private Function to get the 4 bits position required to configure of the CRx register according to the  pin number
 * of the specified GPIO_PinConfigPtr
 */
static uint8_t Get_CRx_Position(uint16_t PinNumber){
 8000374:	b480      	push	{r7}
 8000376:	b083      	sub	sp, #12
 8000378:	af00      	add	r7, sp, #0
 800037a:	4603      	mov	r3, r0
 800037c:	80fb      	strh	r3, [r7, #6]
	//Case PinNumber < GPIO_PIN_8
	switch(PinNumber){
 800037e:	88fb      	ldrh	r3, [r7, #6]
 8000380:	2b80      	cmp	r3, #128	; 0x80
 8000382:	d042      	beq.n	800040a <Get_CRx_Position+0x96>
 8000384:	2b80      	cmp	r3, #128	; 0x80
 8000386:	dc11      	bgt.n	80003ac <Get_CRx_Position+0x38>
 8000388:	2b08      	cmp	r3, #8
 800038a:	d036      	beq.n	80003fa <Get_CRx_Position+0x86>
 800038c:	2b08      	cmp	r3, #8
 800038e:	dc06      	bgt.n	800039e <Get_CRx_Position+0x2a>
 8000390:	2b02      	cmp	r3, #2
 8000392:	d02e      	beq.n	80003f2 <Get_CRx_Position+0x7e>
 8000394:	2b04      	cmp	r3, #4
 8000396:	d02e      	beq.n	80003f6 <Get_CRx_Position+0x82>
 8000398:	2b01      	cmp	r3, #1
 800039a:	d028      	beq.n	80003ee <Get_CRx_Position+0x7a>
 800039c:	e047      	b.n	800042e <Get_CRx_Position+0xba>
 800039e:	2b20      	cmp	r3, #32
 80003a0:	d02f      	beq.n	8000402 <Get_CRx_Position+0x8e>
 80003a2:	2b40      	cmp	r3, #64	; 0x40
 80003a4:	d02f      	beq.n	8000406 <Get_CRx_Position+0x92>
 80003a6:	2b10      	cmp	r3, #16
 80003a8:	d029      	beq.n	80003fe <Get_CRx_Position+0x8a>
 80003aa:	e040      	b.n	800042e <Get_CRx_Position+0xba>
 80003ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003b0:	d033      	beq.n	800041a <Get_CRx_Position+0xa6>
 80003b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003b6:	dc09      	bgt.n	80003cc <Get_CRx_Position+0x58>
 80003b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003bc:	d029      	beq.n	8000412 <Get_CRx_Position+0x9e>
 80003be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003c2:	d028      	beq.n	8000416 <Get_CRx_Position+0xa2>
 80003c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003c8:	d021      	beq.n	800040e <Get_CRx_Position+0x9a>
 80003ca:	e030      	b.n	800042e <Get_CRx_Position+0xba>
 80003cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003d0:	d027      	beq.n	8000422 <Get_CRx_Position+0xae>
 80003d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003d6:	dc03      	bgt.n	80003e0 <Get_CRx_Position+0x6c>
 80003d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003dc:	d01f      	beq.n	800041e <Get_CRx_Position+0xaa>
 80003de:	e026      	b.n	800042e <Get_CRx_Position+0xba>
 80003e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80003e4:	d01f      	beq.n	8000426 <Get_CRx_Position+0xb2>
 80003e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80003ea:	d01e      	beq.n	800042a <Get_CRx_Position+0xb6>
 80003ec:	e01f      	b.n	800042e <Get_CRx_Position+0xba>
		case GPIO_PIN_0:
			return 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	e01e      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_1:
			return 4;
 80003f2:	2304      	movs	r3, #4
 80003f4:	e01c      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_2:
			return 8;
 80003f6:	2308      	movs	r3, #8
 80003f8:	e01a      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_3:
			return 12;
 80003fa:	230c      	movs	r3, #12
 80003fc:	e018      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_4:
			return 16;
 80003fe:	2310      	movs	r3, #16
 8000400:	e016      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_5:
			return 20;
 8000402:	2314      	movs	r3, #20
 8000404:	e014      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_6:
			return 24;
 8000406:	2318      	movs	r3, #24
 8000408:	e012      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_7:
			return 28;
 800040a:	231c      	movs	r3, #28
 800040c:	e010      	b.n	8000430 <Get_CRx_Position+0xbc>

	//Case PinNumber > GPIO_PIN_7
		case GPIO_PIN_8:
			return 0;
 800040e:	2300      	movs	r3, #0
 8000410:	e00e      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_9:
			return 4;
 8000412:	2304      	movs	r3, #4
 8000414:	e00c      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_10:
			return 8;
 8000416:	2308      	movs	r3, #8
 8000418:	e00a      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_11:
			return 12;
 800041a:	230c      	movs	r3, #12
 800041c:	e008      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_12:
			return 16;
 800041e:	2310      	movs	r3, #16
 8000420:	e006      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_13:
			return 20;
 8000422:	2314      	movs	r3, #20
 8000424:	e004      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_14:
			return 24;
 8000426:	2318      	movs	r3, #24
 8000428:	e002      	b.n	8000430 <Get_CRx_Position+0xbc>
		case GPIO_PIN_15:
			return 28;
 800042a:	231c      	movs	r3, #28
 800042c:	e000      	b.n	8000430 <Get_CRx_Position+0xbc>
	}
	return 0;
 800042e:	2300      	movs	r3, #0
}
 8000430:	4618      	mov	r0, r3
 8000432:	370c      	adds	r7, #12
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
	...

0800043c <MCAL_GPIO_Init>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_Init(GPIO_PinConfig_t* GPIO_PinConfigPtr){
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]

	//Check port selected to enable it's clock
	if(GPIO_PinConfigPtr->GPIO_Port == GPIOA)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a66      	ldr	r2, [pc, #408]	; (80005e4 <MCAL_GPIO_Init+0x1a8>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <MCAL_GPIO_Init+0x20>
	{
		RCC_GPIOA_CLK_EN();
 800044e:	4b66      	ldr	r3, [pc, #408]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000450:	699b      	ldr	r3, [r3, #24]
 8000452:	4a65      	ldr	r2, [pc, #404]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000454:	f043 0304 	orr.w	r3, r3, #4
 8000458:	6193      	str	r3, [r2, #24]
 800045a:	e029      	b.n	80004b0 <MCAL_GPIO_Init+0x74>
	}
	else if(GPIO_PinConfigPtr->GPIO_Port == GPIOB)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a62      	ldr	r2, [pc, #392]	; (80005ec <MCAL_GPIO_Init+0x1b0>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d106      	bne.n	8000474 <MCAL_GPIO_Init+0x38>
	{
		RCC_GPIOB_CLK_EN();
 8000466:	4b60      	ldr	r3, [pc, #384]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	4a5f      	ldr	r2, [pc, #380]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 800046c:	f043 0308 	orr.w	r3, r3, #8
 8000470:	6193      	str	r3, [r2, #24]
 8000472:	e01d      	b.n	80004b0 <MCAL_GPIO_Init+0x74>
	}
	else if(GPIO_PinConfigPtr->GPIO_Port == GPIOC)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a5d      	ldr	r2, [pc, #372]	; (80005f0 <MCAL_GPIO_Init+0x1b4>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d106      	bne.n	800048c <MCAL_GPIO_Init+0x50>
	{
		RCC_GPIOC_CLK_EN();
 800047e:	4b5a      	ldr	r3, [pc, #360]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	4a59      	ldr	r2, [pc, #356]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000484:	f043 0310 	orr.w	r3, r3, #16
 8000488:	6193      	str	r3, [r2, #24]
 800048a:	e011      	b.n	80004b0 <MCAL_GPIO_Init+0x74>
	}
	else if(GPIO_PinConfigPtr->GPIO_Port == GPIOD)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a58      	ldr	r2, [pc, #352]	; (80005f4 <MCAL_GPIO_Init+0x1b8>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d106      	bne.n	80004a4 <MCAL_GPIO_Init+0x68>
	{
		RCC_GPIOD_CLK_EN();
 8000496:	4b54      	ldr	r3, [pc, #336]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 8000498:	699b      	ldr	r3, [r3, #24]
 800049a:	4a53      	ldr	r2, [pc, #332]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 800049c:	f043 0320 	orr.w	r3, r3, #32
 80004a0:	6193      	str	r3, [r2, #24]
 80004a2:	e005      	b.n	80004b0 <MCAL_GPIO_Init+0x74>
	}
	else
	{
		RCC_GPIOE_CLK_EN();
 80004a4:	4b50      	ldr	r3, [pc, #320]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a4f      	ldr	r2, [pc, #316]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 80004aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ae:	6193      	str	r3, [r2, #24]
	}

	//Check for alternate function mode (Input or Output) to enable it's clock
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_OUTPUT_OD)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	799b      	ldrb	r3, [r3, #6]
 80004b4:	2b05      	cmp	r3, #5
 80004b6:	d905      	bls.n	80004c4 <MCAL_GPIO_Init+0x88>
	{
		RCC_AFIO_CLK_EN();
 80004b8:	4b4b      	ldr	r3, [pc, #300]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a4a      	ldr	r2, [pc, #296]	; (80005e8 <MCAL_GPIO_Init+0x1ac>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6193      	str	r3, [r2, #24]
	}

	//Pointer holds the configuration register address either High or Low depends on PinNo
	vuint32_t* GPIO_CRx = NULL_PTR;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
	GPIO_CRx = ((GPIO_PinConfigPtr->GPIO_PinNo < GPIO_PIN_8)?&(GPIO_PinConfigPtr->GPIO_Port->CRL):&(GPIO_PinConfigPtr->GPIO_Port->CRH));
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	889b      	ldrh	r3, [r3, #4]
 80004cc:	2bff      	cmp	r3, #255	; 0xff
 80004ce:	d802      	bhi.n	80004d6 <MCAL_GPIO_Init+0x9a>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	e002      	b.n	80004dc <MCAL_GPIO_Init+0xa0>
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	3304      	adds	r3, #4
 80004dc:	60bb      	str	r3, [r7, #8]

	//MODE & CNF Variable (Initialized by it's default reset value)
	uint8_t PinConfig_Value = 0x4;
 80004de:	2304      	movs	r3, #4
 80004e0:	73fb      	strb	r3, [r7, #15]

	//Clear MODE & CNF
	(*GPIO_CRx) &= ~(0xF<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	889b      	ldrh	r3, [r3, #4]
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff ff44 	bl	8000374 <Get_CRx_Position>
 80004ec:	4603      	mov	r3, r0
 80004ee:	461a      	mov	r2, r3
 80004f0:	230f      	movs	r3, #15
 80004f2:	4093      	lsls	r3, r2
 80004f4:	43da      	mvns	r2, r3
 80004f6:	68bb      	ldr	r3, [r7, #8]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	401a      	ands	r2, r3
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	601a      	str	r2, [r3, #0]

	//Check if pin is output
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_INPUT_PD && GPIO_PinConfigPtr->GPIO_Mode < GPIO_MODE_AF_INPUT)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	799b      	ldrb	r3, [r3, #6]
 8000504:	2b03      	cmp	r3, #3
 8000506:	d914      	bls.n	8000532 <MCAL_GPIO_Init+0xf6>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	799b      	ldrb	r3, [r3, #6]
 800050c:	2b07      	cmp	r3, #7
 800050e:	d810      	bhi.n	8000532 <MCAL_GPIO_Init+0xf6>
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	73fb      	strb	r3, [r7, #15]
		//Set MODE & CNF
		PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode-4)<<2) | (GPIO_PinConfigPtr->GPIO_Output_Speed)) & 0x0F;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	799b      	ldrb	r3, [r3, #6]
 8000518:	3b04      	subs	r3, #4
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	b25a      	sxtb	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	79db      	ldrb	r3, [r3, #7]
 8000522:	b25b      	sxtb	r3, r3
 8000524:	4313      	orrs	r3, r2
 8000526:	b25b      	sxtb	r3, r3
 8000528:	b2db      	uxtb	r3, r3
 800052a:	f003 030f 	and.w	r3, r3, #15
 800052e:	73fb      	strb	r3, [r7, #15]
 8000530:	e037      	b.n	80005a2 <MCAL_GPIO_Init+0x166>

	//Else pin is input
	else //MODE = 00: Input mode (reset state)
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	73fb      	strb	r3, [r7, #15]

		//Check if Input Analog mode or Input Floating
		if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_ANALOG || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_FLO)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	799b      	ldrb	r3, [r3, #6]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d003      	beq.n	8000546 <MCAL_GPIO_Init+0x10a>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	799b      	ldrb	r3, [r3, #6]
 8000542:	2b01      	cmp	r3, #1
 8000544:	d107      	bne.n	8000556 <MCAL_GPIO_Init+0x11a>
		{	//Set MODE & CNF
			PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode)<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	799b      	ldrb	r3, [r3, #6]
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	b2db      	uxtb	r3, r3
 800054e:	f003 030f 	and.w	r3, r3, #15
 8000552:	73fb      	strb	r3, [r7, #15]
 8000554:	e025      	b.n	80005a2 <MCAL_GPIO_Init+0x166>
		}

		//Check if Input with pull-up or Input with pull-down
		else if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PD)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	799b      	ldrb	r3, [r3, #6]
 800055a:	2b02      	cmp	r3, #2
 800055c:	d003      	beq.n	8000566 <MCAL_GPIO_Init+0x12a>
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	799b      	ldrb	r3, [r3, #6]
 8000562:	2b03      	cmp	r3, #3
 8000564:	d11b      	bne.n	800059e <MCAL_GPIO_Init+0x162>
		{
			//Set MODE & CNF
			PinConfig_Value = ((GPIO_MODE_INPUT_PU<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 8000566:	2308      	movs	r3, #8
 8000568:	73fb      	strb	r3, [r7, #15]

			//Check if Input with pull-up
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	799b      	ldrb	r3, [r3, #6]
 800056e:	2b02      	cmp	r3, #2
 8000570:	d10a      	bne.n	8000588 <MCAL_GPIO_Init+0x14c>
			{
				//Set output data register ODR because pull up specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	68da      	ldr	r2, [r3, #12]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	889b      	ldrh	r3, [r3, #4]
 800057c:	4619      	mov	r1, r3
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	430a      	orrs	r2, r1
 8000584:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000586:	e00c      	b.n	80005a2 <MCAL_GPIO_Init+0x166>

			//Check if Input with pull-down
			else
			{
				//Clear output data register ODR because pull down specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	68da      	ldr	r2, [r3, #12]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	889b      	ldrh	r3, [r3, #4]
 8000592:	4619      	mov	r1, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	430a      	orrs	r2, r1
 800059a:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800059c:	e001      	b.n	80005a2 <MCAL_GPIO_Init+0x166>
		}

		//Else Alternate function input
		else
		{
			PinConfig_Value = ((GPIO_MODE_INPUT_FLO<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 800059e:	2304      	movs	r3, #4
 80005a0:	73fb      	strb	r3, [r7, #15]
		}

	}

	//Write on CRx register to configure pin -> x is (H or L)
	(*GPIO_CRx) &= ~(PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 80005a2:	7bfc      	ldrb	r4, [r7, #15]
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	889b      	ldrh	r3, [r3, #4]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fee3 	bl	8000374 <Get_CRx_Position>
 80005ae:	4603      	mov	r3, r0
 80005b0:	fa04 f303 	lsl.w	r3, r4, r3
 80005b4:	43da      	mvns	r2, r3
 80005b6:	68bb      	ldr	r3, [r7, #8]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	401a      	ands	r2, r3
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	601a      	str	r2, [r3, #0]
	(*GPIO_CRx) |= (PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 80005c0:	7bfc      	ldrb	r4, [r7, #15]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	889b      	ldrh	r3, [r3, #4]
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fed4 	bl	8000374 <Get_CRx_Position>
 80005cc:	4603      	mov	r3, r0
 80005ce:	fa04 f203 	lsl.w	r2, r4, r3
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	431a      	orrs	r2, r3
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	601a      	str	r2, [r3, #0]

	return;
 80005dc:	bf00      	nop

}
 80005de:	3714      	adds	r7, #20
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd90      	pop	{r4, r7, pc}
 80005e4:	40010800 	.word	0x40010800
 80005e8:	40021000 	.word	0x40021000
 80005ec:	40010c00 	.word	0x40010c00
 80005f0:	40011000 	.word	0x40011000
 80005f4:	40011400 	.word	0x40011400

080005f8 <MCAL_GPIO_TogglePin>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_TogglePin(GPIO_PinConfig_t* GPIO_PinConfigPtr){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

	//Toggle the specified pin
	GPIO_PinConfigPtr->GPIO_Port->ODR ^= GPIO_PinConfigPtr->GPIO_PinNo;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68da      	ldr	r2, [r3, #12]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	889b      	ldrh	r3, [r3, #4]
 800060a:	4619      	mov	r1, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	404a      	eors	r2, r1
 8000612:	60da      	str	r2, [r3, #12]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	bc80      	pop	{r7}
 800061c:	4770      	bx	lr
	...

08000620 <MCAL_RCC_SYSCLK>:
* @retval 			- SYSCLK Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_SYSCLK(void){
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
	* 00: HSI oscillator used as system clock
	* 01: HSE oscillator used as system clock
	* 10: PLL used as system clock
	* 11: Not applicable.
	*/
	switch( ( (RCC->CFGR) >> 2 ) & 0x3)
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MCAL_RCC_SYSCLK+0x3c>)
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	089b      	lsrs	r3, r3, #2
 800062a:	f003 0303 	and.w	r3, r3, #3
 800062e:	2b03      	cmp	r3, #3
 8000630:	d810      	bhi.n	8000654 <MCAL_RCC_SYSCLK+0x34>
 8000632:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <MCAL_RCC_SYSCLK+0x18>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	08000649 	.word	0x08000649
 800063c:	0800064d 	.word	0x0800064d
 8000640:	08000651 	.word	0x08000651
 8000644:	08000655 	.word	0x08000655
	{
		case 0:
			return HSI_CLK;
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <MCAL_RCC_SYSCLK+0x40>)
 800064a:	e003      	b.n	8000654 <MCAL_RCC_SYSCLK+0x34>
		case 1:
			return HSE_CLK; //To be configured by the user @Config HSE_CLK_Define
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <MCAL_RCC_SYSCLK+0x44>)
 800064e:	e001      	b.n	8000654 <MCAL_RCC_SYSCLK+0x34>
		case 2:
			return 16000000; //To do later
 8000650:	4b04      	ldr	r3, [pc, #16]	; (8000664 <MCAL_RCC_SYSCLK+0x44>)
 8000652:	e7ff      	b.n	8000654 <MCAL_RCC_SYSCLK+0x34>
		case 3:
			break;
	}

}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000
 8000660:	007a1200 	.word	0x007a1200
 8000664:	00f42400 	.word	0x00f42400

08000668 <MCAL_RCC_HCLK>:
* @retval 			- HCLK Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_HCLK(void){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0

	/*
	* HPRE[3:0]: AHB prescaler
	*/
	return (MCAL_RCC_SYSCLK() >> (g_AHB_Prescaler_Table[ (RCC->CFGR >> 4) & 0b1111 ]));
 800066c:	f7ff ffd8 	bl	8000620 <MCAL_RCC_SYSCLK>
 8000670:	4601      	mov	r1, r0
 8000672:	4b05      	ldr	r3, [pc, #20]	; (8000688 <MCAL_RCC_HCLK+0x20>)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	091b      	lsrs	r3, r3, #4
 8000678:	f003 030f 	and.w	r3, r3, #15
 800067c:	4a03      	ldr	r2, [pc, #12]	; (800068c <MCAL_RCC_HCLK+0x24>)
 800067e:	5cd3      	ldrb	r3, [r2, r3]
 8000680:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000684:	4618      	mov	r0, r3
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	08001198 	.word	0x08001198

08000690 <MCAL_RCC_PCLK1>:
* @retval 			- PCLK1 Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_PCLK1(void){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

	/*
	* PPRE1[2:0]: APB Low-speed prescaler (APB1)
	*/

	return (MCAL_RCC_HCLK() >> (g_APB_Prescaler_Table[ (RCC->CFGR >> 8) & 0b111 ]));
 8000694:	f7ff ffe8 	bl	8000668 <MCAL_RCC_HCLK>
 8000698:	4601      	mov	r1, r0
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <MCAL_RCC_PCLK1+0x20>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	0a1b      	lsrs	r3, r3, #8
 80006a0:	f003 0307 	and.w	r3, r3, #7
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <MCAL_RCC_PCLK1+0x24>)
 80006a6:	5cd3      	ldrb	r3, [r2, r3]
 80006a8:	fa21 f303 	lsr.w	r3, r1, r3

}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	08001190 	.word	0x08001190

080006b8 <MCAL_RCC_PCLK2>:
* @retval 			- PCLK2 Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_PCLK2(void){
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

	/*
	* PPRE2[2:0]: APB high-speed prescaler (APB2)
	*/
	return (MCAL_RCC_HCLK() >> (g_APB_Prescaler_Table[ (RCC->CFGR >> 11) & 0b111 ]));
 80006bc:	f7ff ffd4 	bl	8000668 <MCAL_RCC_HCLK>
 80006c0:	4601      	mov	r1, r0
 80006c2:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <MCAL_RCC_PCLK2+0x20>)
 80006c4:	685b      	ldr	r3, [r3, #4]
 80006c6:	0adb      	lsrs	r3, r3, #11
 80006c8:	f003 0307 	and.w	r3, r3, #7
 80006cc:	4a03      	ldr	r2, [pc, #12]	; (80006dc <MCAL_RCC_PCLK2+0x24>)
 80006ce:	5cd3      	ldrb	r3, [r2, r3]
 80006d0:	fa21 f303 	lsr.w	r3, r1, r3

}
 80006d4:	4618      	mov	r0, r3
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	08001190 	.word	0x08001190

080006e0 <MCAL_SPI_Init>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_SPI_Init(SPI_Config_t* SPI_ConfigPtr){
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

	// Safety for registers
	uint16_t SPIx_CR1_temp = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	81fb      	strh	r3, [r7, #14]
	uint16_t SPIx_CR2_temp = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	81bb      	strh	r3, [r7, #12]

	/*
	* 1) Enable the SPI Clock according to the Channel Selected.
	*/
	if(SPI_ConfigPtr->SPIx == SPI1)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4a42      	ldr	r2, [pc, #264]	; (8000800 <MCAL_SPI_Init+0x120>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d106      	bne.n	8000708 <MCAL_SPI_Init+0x28>
		RCC_SPI1_CLK_EN();
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <MCAL_SPI_Init+0x124>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a41      	ldr	r2, [pc, #260]	; (8000804 <MCAL_SPI_Init+0x124>)
 8000700:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	e005      	b.n	8000714 <MCAL_SPI_Init+0x34>
	else
		RCC_SPI2_CLK_EN();
 8000708:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <MCAL_SPI_Init+0x124>)
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	4a3d      	ldr	r2, [pc, #244]	; (8000804 <MCAL_SPI_Init+0x124>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000712:	61d3      	str	r3, [r2, #28]

	/*
	* 2) Set the device Mode (Master or Slave) & Enable the SPI Peripheral.
	*/
	SPIx_CR1_temp |= SPI_ConfigPtr->SPI_Mode;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	889a      	ldrh	r2, [r3, #4]
 8000718:	89fb      	ldrh	r3, [r7, #14]
 800071a:	4313      	orrs	r3, r2
 800071c:	81fb      	strh	r3, [r7, #14]
	/*
	* 3) Set the device communication node (FullDuplex - HafDuplex - Simplex).
	* NOTE: We aim only for bits 15 and 10 (BIDIMODE & RXONLY), therefore we masked them since they contain another bits
	* in the definition for discrimination.
	*/
	SPIx_CR1_temp |= (SPI_ConfigPtr->SPI_CommMode & 0x8400);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	88db      	ldrh	r3, [r3, #6]
 8000722:	b21b      	sxth	r3, r3
 8000724:	f423 43f7 	bic.w	r3, r3, #31616	; 0x7b80
 8000728:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800072c:	b21a      	sxth	r2, r3
 800072e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000732:	4313      	orrs	r3, r2
 8000734:	b21b      	sxth	r3, r3
 8000736:	81fb      	strh	r3, [r7, #14]

	/*
	* 4) Check if Master Mode is Selected to define the serial clock baud rate.
	*/
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	889b      	ldrh	r3, [r3, #4]
 800073c:	2b04      	cmp	r3, #4
 800073e:	d104      	bne.n	800074a <MCAL_SPI_Init+0x6a>
		SPIx_CR1_temp |= SPI_ConfigPtr->SPI_PreScaler;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	8a5a      	ldrh	r2, [r3, #18]
 8000744:	89fb      	ldrh	r3, [r7, #14]
 8000746:	4313      	orrs	r3, r2
 8000748:	81fb      	strh	r3, [r7, #14]

	/*
	* 5) Set the DFF bit to define 8- or 16-bit data frame format.
	*/
	SPIx_CR1_temp |= SPI_ConfigPtr->SPI_DataSize;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	895a      	ldrh	r2, [r3, #10]
 800074e:	89fb      	ldrh	r3, [r7, #14]
 8000750:	4313      	orrs	r3, r2
 8000752:	81fb      	strh	r3, [r7, #14]

	/*
	* 6) Select the CPOL and CPHA bits to define one of the four relationships between the data transfer and the serial clock.
	*/
	SPIx_CR1_temp |= (SPI_ConfigPtr->SPI_ClkPhase) | (SPI_ConfigPtr->SPI_ClkPolarity);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	89da      	ldrh	r2, [r3, #14]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	899b      	ldrh	r3, [r3, #12]
 800075c:	4313      	orrs	r3, r2
 800075e:	b29a      	uxth	r2, r3
 8000760:	89fb      	ldrh	r3, [r7, #14]
 8000762:	4313      	orrs	r3, r2
 8000764:	81fb      	strh	r3, [r7, #14]

	/*
	* 7) Configure the LSBFIRST bit in the SPI_CR1 register to define the frame format.
	*/
	SPIx_CR1_temp |= SPI_ConfigPtr->SPI_FrameFormat;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	891a      	ldrh	r2, [r3, #8]
 800076a:	89fb      	ldrh	r3, [r7, #14]
 800076c:	4313      	orrs	r3, r2
 800076e:	81fb      	strh	r3, [r7, #14]

	if(SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_MASTER_OD || SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_MASTER_OE)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	8a1b      	ldrh	r3, [r3, #16]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d003      	beq.n	8000780 <MCAL_SPI_Init+0xa0>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	8a1b      	ldrh	r3, [r3, #16]
 800077c:	2b04      	cmp	r3, #4
 800077e:	d105      	bne.n	800078c <MCAL_SPI_Init+0xac>
		SPIx_CR2_temp |= SPI_ConfigPtr->SPI_SlaveSelect;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	8a1a      	ldrh	r2, [r3, #16]
 8000784:	89bb      	ldrh	r3, [r7, #12]
 8000786:	4313      	orrs	r3, r2
 8000788:	81bb      	strh	r3, [r7, #12]
 800078a:	e004      	b.n	8000796 <MCAL_SPI_Init+0xb6>
	else
		SPIx_CR1_temp |= SPI_ConfigPtr->SPI_SlaveSelect;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	8a1a      	ldrh	r2, [r3, #16]
 8000790:	89fb      	ldrh	r3, [r7, #14]
 8000792:	4313      	orrs	r3, r2
 8000794:	81fb      	strh	r3, [r7, #14]

	/*
	* 8) Enable or Disable Interrupt according to the configuration & Update Interrupt Handling CallBack.
	*/
	if(SPI_ConfigPtr->SPI_IRQ_EN != SPI_IE_DISABLE){
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	8a9b      	ldrh	r3, [r3, #20]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d01e      	beq.n	80007dc <MCAL_SPI_Init+0xfc>

		//Enable Interrupt mask in SPI
		SPIx_CR2_temp |= SPI_ConfigPtr->SPI_IRQ_EN;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	8a9a      	ldrh	r2, [r3, #20]
 80007a2:	89bb      	ldrh	r3, [r7, #12]
 80007a4:	4313      	orrs	r3, r2
 80007a6:	81bb      	strh	r3, [r7, #12]

		//Enable Interrupt mask in NVIC
		if(SPI_ConfigPtr->SPIx == SPI1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a14      	ldr	r2, [pc, #80]	; (8000800 <MCAL_SPI_Init+0x120>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d10a      	bne.n	80007c8 <MCAL_SPI_Init+0xe8>
		{
			g_IRQ_CallBackPtr[0] = SPI_ConfigPtr->IRQ_CallBackPtr;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <MCAL_SPI_Init+0x128>)
 80007b8:	6013      	str	r3, [r2, #0]
			NVIC_IRQ35_EN();
 80007ba:	4b14      	ldr	r3, [pc, #80]	; (800080c <MCAL_SPI_Init+0x12c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a13      	ldr	r2, [pc, #76]	; (800080c <MCAL_SPI_Init+0x12c>)
 80007c0:	f043 0308 	orr.w	r3, r3, #8
 80007c4:	6013      	str	r3, [r2, #0]
 80007c6:	e009      	b.n	80007dc <MCAL_SPI_Init+0xfc>
		}
		else
		{
			g_IRQ_CallBackPtr[1] = SPI_ConfigPtr->IRQ_CallBackPtr;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <MCAL_SPI_Init+0x128>)
 80007ce:	6053      	str	r3, [r2, #4]
			NVIC_IRQ36_EN();
 80007d0:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MCAL_SPI_Init+0x12c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a0d      	ldr	r2, [pc, #52]	; (800080c <MCAL_SPI_Init+0x12c>)
 80007d6:	f043 0310 	orr.w	r3, r3, #16
 80007da:	6013      	str	r3, [r2, #0]
	}

	/*
	* 9) Enable the SPI peripheral by setting the SPE bit to 1.
	*/
	SPIx_CR1_temp |= SPI_ENABLE;
 80007dc:	89fb      	ldrh	r3, [r7, #14]
 80007de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007e2:	81fb      	strh	r3, [r7, #14]

	/*
	* 10) Set the real registers values with the safety templates.
	*/
	SPI_ConfigPtr->SPIx->CR1 = SPIx_CR1_temp;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	89fa      	ldrh	r2, [r7, #14]
 80007ea:	601a      	str	r2, [r3, #0]
	SPI_ConfigPtr->SPIx->CR2 = SPIx_CR2_temp;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	89ba      	ldrh	r2, [r7, #12]
 80007f2:	605a      	str	r2, [r3, #4]

}
 80007f4:	bf00      	nop
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40013000 	.word	0x40013000
 8000804:	40021000 	.word	0x40021000
 8000808:	20000034 	.word	0x20000034
 800080c:	e000e104 	.word	0xe000e104

08000810 <MCAL_SPI_GPIO_SetPins>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_SPI_GPIO_SetPins(SPI_Config_t* SPI_ConfigPtr){
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	; 0x30
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t MOSI,MISO,SCK,NSS;
	int NSS_Index;
	/*
	* 1) Check if SPIx is SPI1 or SPI2.
	*/
	if(SPI_ConfigPtr->SPIx == SPI1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a67      	ldr	r2, [pc, #412]	; (80009bc <MCAL_SPI_GPIO_SetPins+0x1ac>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d112      	bne.n	8000848 <MCAL_SPI_GPIO_SetPins+0x38>
	{
		//Configure NSS Pin Data
		NSS.GPIO_Port = GPIOA;
 8000822:	4b67      	ldr	r3, [pc, #412]	; (80009c0 <MCAL_SPI_GPIO_SetPins+0x1b0>)
 8000824:	60fb      	str	r3, [r7, #12]
		NSS.GPIO_PinNo = GPIO_PIN_4;
 8000826:	2310      	movs	r3, #16
 8000828:	823b      	strh	r3, [r7, #16]

		//Configure SCK Pin Data
		SCK.GPIO_Port = GPIOA;
 800082a:	4b65      	ldr	r3, [pc, #404]	; (80009c0 <MCAL_SPI_GPIO_SetPins+0x1b0>)
 800082c:	617b      	str	r3, [r7, #20]
		SCK.GPIO_PinNo = GPIO_PIN_5;
 800082e:	2320      	movs	r3, #32
 8000830:	833b      	strh	r3, [r7, #24]

		//Configure MISO Pin Data
		MISO.GPIO_Port = GPIOA;
 8000832:	4b63      	ldr	r3, [pc, #396]	; (80009c0 <MCAL_SPI_GPIO_SetPins+0x1b0>)
 8000834:	61fb      	str	r3, [r7, #28]
		MISO.GPIO_PinNo = GPIO_PIN_6;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	843b      	strh	r3, [r7, #32]

		//Configure MOSI Pin Data
		MOSI.GPIO_Port = GPIOA;
 800083a:	4b61      	ldr	r3, [pc, #388]	; (80009c0 <MCAL_SPI_GPIO_SetPins+0x1b0>)
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
		MOSI.GPIO_PinNo = GPIO_PIN_7;
 800083e:	2380      	movs	r3, #128	; 0x80
 8000840:	853b      	strh	r3, [r7, #40]	; 0x28
		NSS_Index = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000846:	e015      	b.n	8000874 <MCAL_SPI_GPIO_SetPins+0x64>

	}
	else
	{
		//Configure NSS Pin Data
		NSS.GPIO_Port = GPIOB;
 8000848:	4b5e      	ldr	r3, [pc, #376]	; (80009c4 <MCAL_SPI_GPIO_SetPins+0x1b4>)
 800084a:	60fb      	str	r3, [r7, #12]
		NSS.GPIO_PinNo = GPIO_PIN_12;
 800084c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000850:	823b      	strh	r3, [r7, #16]

		//Configure SCK Pin Data
		SCK.GPIO_Port = GPIOB;
 8000852:	4b5c      	ldr	r3, [pc, #368]	; (80009c4 <MCAL_SPI_GPIO_SetPins+0x1b4>)
 8000854:	617b      	str	r3, [r7, #20]
		SCK.GPIO_PinNo = GPIO_PIN_13;
 8000856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085a:	833b      	strh	r3, [r7, #24]

		//Configure MISO Pin Data
		MISO.GPIO_Port = GPIOB;
 800085c:	4b59      	ldr	r3, [pc, #356]	; (80009c4 <MCAL_SPI_GPIO_SetPins+0x1b4>)
 800085e:	61fb      	str	r3, [r7, #28]
		MISO.GPIO_PinNo = GPIO_PIN_14;
 8000860:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000864:	843b      	strh	r3, [r7, #32]

		//Configure MOSI Pin Data
		MOSI.GPIO_Port = GPIOB;
 8000866:	4b57      	ldr	r3, [pc, #348]	; (80009c4 <MCAL_SPI_GPIO_SetPins+0x1b4>)
 8000868:	627b      	str	r3, [r7, #36]	; 0x24
		MOSI.GPIO_PinNo = GPIO_PIN_15;
 800086a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800086e:	853b      	strh	r3, [r7, #40]	; 0x28
		NSS_Index = 1;
 8000870:	2301      	movs	r3, #1
 8000872:	62fb      	str	r3, [r7, #44]	; 0x2c


	/*
	* 2) Configure SCK Pin.
	*/
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	889b      	ldrh	r3, [r3, #4]
 8000878:	2b04      	cmp	r3, #4
 800087a:	d104      	bne.n	8000886 <MCAL_SPI_GPIO_SetPins+0x76>
	{
		SCK.GPIO_Mode = GPIO_MODE_AF_OUTPUT_PP;
 800087c:	2306      	movs	r3, #6
 800087e:	76bb      	strb	r3, [r7, #26]
		SCK.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 8000880:	2301      	movs	r3, #1
 8000882:	76fb      	strb	r3, [r7, #27]
 8000884:	e007      	b.n	8000896 <MCAL_SPI_GPIO_SetPins+0x86>
	}
	else if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_SLAVE)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	889b      	ldrh	r3, [r3, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d103      	bne.n	8000896 <MCAL_SPI_GPIO_SetPins+0x86>
	{
		SCK.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800088e:	2301      	movs	r3, #1
 8000890:	76bb      	strb	r3, [r7, #26]
		SCK.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 8000892:	2300      	movs	r3, #0
 8000894:	76fb      	strb	r3, [r7, #27]
	}
	MCAL_GPIO_Init(&SCK);
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fdce 	bl	800043c <MCAL_GPIO_Init>

	/*
	* 2) Configure MOSI Pin.
	*/
	//Check if the MOSI on the Master or Slave Device won't be configured at all first and if not, configure it as it should be.
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	889b      	ldrh	r3, [r3, #4]
 80008a4:	2b04      	cmp	r3, #4
 80008a6:	d110      	bne.n	80008ca <MCAL_SPI_GPIO_SetPins+0xba>
	{
		if(SPI_ConfigPtr->SPI_CommMode == SPI_SIMPLEX_RX_ONLY)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	88db      	ldrh	r3, [r3, #6]
 80008ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80008b0:	d01f      	beq.n	80008f2 <MCAL_SPI_GPIO_SetPins+0xe2>
			//Do Nothing
			//MOSI on the Master Device won't be configured at all.
		}
		else
		{
			MOSI.GPIO_Mode = GPIO_MODE_AF_OUTPUT_PP;
 80008b2:	2306      	movs	r3, #6
 80008b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			MOSI.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 80008b8:	2301      	movs	r3, #1
 80008ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			MCAL_GPIO_Init(&MOSI);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fdba 	bl	800043c <MCAL_GPIO_Init>
 80008c8:	e013      	b.n	80008f2 <MCAL_SPI_GPIO_SetPins+0xe2>
		}
	}
	else
	{
		if(SPI_ConfigPtr->SPI_CommMode == SPI_HALF_DUPLEX || SPI_ConfigPtr->SPI_CommMode == SPI_SIMPLEX_TX_ONLY)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	88db      	ldrh	r3, [r3, #6]
 80008ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80008d2:	d00e      	beq.n	80008f2 <MCAL_SPI_GPIO_SetPins+0xe2>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	88db      	ldrh	r3, [r3, #6]
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d00a      	beq.n	80008f2 <MCAL_SPI_GPIO_SetPins+0xe2>
			//Do Nothing
			//MOSI on the Slave Device won't be configured at all.
		}
		else
		{
			MOSI.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 80008dc:	2301      	movs	r3, #1
 80008de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			MOSI.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			MCAL_GPIO_Init(&MOSI);
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fda5 	bl	800043c <MCAL_GPIO_Init>

	/*
	* 3) Configure MISO Pin.
	*/
	//Check if the MISO on the Master or Slave Device won't be configured at all first and if not, configure it as it should be.
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	889b      	ldrh	r3, [r3, #4]
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	d114      	bne.n	8000924 <MCAL_SPI_GPIO_SetPins+0x114>
	{
		if(SPI_ConfigPtr->SPI_CommMode == SPI_HALF_DUPLEX || SPI_ConfigPtr->SPI_CommMode == SPI_SIMPLEX_TX_ONLY)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	88db      	ldrh	r3, [r3, #6]
 80008fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000902:	d01f      	beq.n	8000944 <MCAL_SPI_GPIO_SetPins+0x134>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	88db      	ldrh	r3, [r3, #6]
 8000908:	2b04      	cmp	r3, #4
 800090a:	d01b      	beq.n	8000944 <MCAL_SPI_GPIO_SetPins+0x134>
			//Do Nothing
			//MISO on the Master Device won't be configured at all.
		}
		else
		{
			MISO.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800090c:	2301      	movs	r3, #1
 800090e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			MISO.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 8000912:	2300      	movs	r3, #0
 8000914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			MCAL_GPIO_Init(&MISO);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fd8d 	bl	800043c <MCAL_GPIO_Init>
 8000922:	e00f      	b.n	8000944 <MCAL_SPI_GPIO_SetPins+0x134>
		}
	}
	else
	{
		if(SPI_ConfigPtr->SPI_CommMode == SPI_SIMPLEX_RX_ONLY)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	88db      	ldrh	r3, [r3, #6]
 8000928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800092c:	d00a      	beq.n	8000944 <MCAL_SPI_GPIO_SetPins+0x134>
			//Do Nothing
			//MISO on the Slave Device won't be configured at all.
		}
		else
		{
			MISO.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800092e:	2301      	movs	r3, #1
 8000930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			MISO.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 8000934:	2300      	movs	r3, #0
 8000936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			MCAL_GPIO_Init(&MISO);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fd7c 	bl	800043c <MCAL_GPIO_Init>
	}

	/*
	* 4) Configure NSS Pin.
	*/
	if(SPI_ConfigPtr->SPI_Mode == SPI_MODE_MASTER)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	889b      	ldrh	r3, [r3, #4]
 8000948:	2b04      	cmp	r3, #4
 800094a:	d11b      	bne.n	8000984 <MCAL_SPI_GPIO_SetPins+0x174>
	{
		if(SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_MASTER_OE)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	8a1b      	ldrh	r3, [r3, #16]
 8000950:	2b04      	cmp	r3, #4
 8000952:	d109      	bne.n	8000968 <MCAL_SPI_GPIO_SetPins+0x158>
		{
			NSS.GPIO_Mode = GPIO_MODE_AF_OUTPUT_PP;
 8000954:	2306      	movs	r3, #6
 8000956:	74bb      	strb	r3, [r7, #18]
			NSS.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_10MHZ;
 8000958:	2301      	movs	r3, #1
 800095a:	74fb      	strb	r3, [r7, #19]
			MCAL_GPIO_Init(&NSS);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fd6b 	bl	800043c <MCAL_GPIO_Init>
 8000966:	e01a      	b.n	800099e <MCAL_SPI_GPIO_SetPins+0x18e>
		}
		else if(SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_MASTER_OD)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	8a1b      	ldrh	r3, [r3, #16]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d116      	bne.n	800099e <MCAL_SPI_GPIO_SetPins+0x18e>
		{
			NSS.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 8000970:	2301      	movs	r3, #1
 8000972:	74bb      	strb	r3, [r7, #18]
			NSS.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 8000974:	2300      	movs	r3, #0
 8000976:	74fb      	strb	r3, [r7, #19]
			MCAL_GPIO_Init(&NSS);
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff fd5d 	bl	800043c <MCAL_GPIO_Init>
 8000982:	e00c      	b.n	800099e <MCAL_SPI_GPIO_SetPins+0x18e>
		}
	}
	else
	{
		if(SPI_ConfigPtr->SPI_SlaveSelect == SPI_SS_HARDWARE_SLAVE)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	8a1b      	ldrh	r3, [r3, #16]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d108      	bne.n	800099e <MCAL_SPI_GPIO_SetPins+0x18e>
		{
			NSS.GPIO_Mode = GPIO_MODE_INPUT_FLO;
 800098c:	2301      	movs	r3, #1
 800098e:	74bb      	strb	r3, [r7, #18]
			NSS.GPIO_Output_Speed = GPIO_OUTPUT_SPEED_NONE;
 8000990:	2300      	movs	r3, #0
 8000992:	74fb      	strb	r3, [r7, #19]
			MCAL_GPIO_Init(&NSS);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fd4f 	bl	800043c <MCAL_GPIO_Init>
		}
	}
	g_NSS_Pin[NSS_Index] = NSS;
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <MCAL_SPI_GPIO_SetPins+0x1b8>)
 80009a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	4413      	add	r3, r2
 80009a6:	f107 020c 	add.w	r2, r7, #12
 80009aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ae:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40013000 	.word	0x40013000
 80009c0:	40010800 	.word	0x40010800
 80009c4:	40010c00 	.word	0x40010c00
 80009c8:	20000024 	.word	0x20000024

080009cc <MCAL_SPI_Transmit>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_SPI_Transmit(SPI_Config_t* SPI_ConfigPtr, uint16_t* pTxBuffer, SPI_Polling_Mechanism_t Polling_Status){
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	4613      	mov	r3, r2
 80009d8:	71fb      	strb	r3, [r7, #7]

	//Check for Polling_Status
	if(Polling_Status == SPI_Polling_Enable)
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d107      	bne.n	80009f0 <MCAL_SPI_Transmit+0x24>
		//wait for transmit data register to be empty
		while( ! ( (SPI_ConfigPtr->SPIx->SR) & (1<<1) ) );
 80009e0:	bf00      	nop
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	689b      	ldr	r3, [r3, #8]
 80009e8:	f003 0302 	and.w	r3, r3, #2
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d0f8      	beq.n	80009e2 <MCAL_SPI_Transmit+0x16>

	//Check if Half-Duplex Mode was configured
	if (SPI_ConfigPtr->SPI_CommMode == SPI_HALF_DUPLEX)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	88db      	ldrh	r3, [r3, #6]
 80009f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80009f8:	d11f      	bne.n	8000a3a <MCAL_SPI_Transmit+0x6e>
	{
		while(READ_BIT(SPI_ConfigPtr->SPIx->SR,7));
 80009fa:	bf00      	nop
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1f8      	bne.n	80009fc <MCAL_SPI_Transmit+0x30>
		CLEAR_BIT(SPI_ConfigPtr->SPIx->CR1,6);
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a18:	601a      	str	r2, [r3, #0]
		SET_BIT(SPI_ConfigPtr->SPIx->CR1,14);
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a28:	601a      	str	r2, [r3, #0]
		SET_BIT(SPI_ConfigPtr->SPIx->CR1,6);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a38:	601a      	str	r2, [r3, #0]
	}
	//Send the data to the Tx Buffer
	SPI_ConfigPtr->SPIx->DR = (*pTxBuffer);
 8000a3a:	68bb      	ldr	r3, [r7, #8]
 8000a3c:	881a      	ldrh	r2, [r3, #0]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	60da      	str	r2, [r3, #12]

}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <MCAL_SPI_Receive>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_SPI_Receive(SPI_Config_t* SPI_ConfigPtr, uint16_t* pTxBuffer, SPI_Polling_Mechanism_t Polling_Status){
 8000a4e:	b480      	push	{r7}
 8000a50:	b085      	sub	sp, #20
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	71fb      	strb	r3, [r7, #7]

	//Check for Polling_Status
	if(Polling_Status == SPI_Polling_Enable)
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d107      	bne.n	8000a72 <MCAL_SPI_Receive+0x24>
		//wait for receive data register to be empty
		while( ! ( (SPI_ConfigPtr->SPIx->SR) & (1<<0) ) );
 8000a62:	bf00      	nop
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0f8      	beq.n	8000a64 <MCAL_SPI_Receive+0x16>

	//Check if Half-Duplex Mode was configured
	if (SPI_ConfigPtr->SPI_CommMode == SPI_HALF_DUPLEX)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	88db      	ldrh	r3, [r3, #6]
 8000a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a7a:	d11f      	bne.n	8000abc <MCAL_SPI_Receive+0x6e>
	{
		while(READ_BIT(SPI_ConfigPtr->SPIx->SR,7));
 8000a7c:	bf00      	nop
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d1f8      	bne.n	8000a7e <MCAL_SPI_Receive+0x30>
		CLEAR_BIT(SPI_ConfigPtr->SPIx->CR1,6);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000a9a:	601a      	str	r2, [r3, #0]
		CLEAR_BIT(SPI_ConfigPtr->SPIx->CR1,14);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000aaa:	601a      	str	r2, [r3, #0]
		SET_BIT(SPI_ConfigPtr->SPIx->CR1,6);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000aba:	601a      	str	r2, [r3, #0]
	}
	//Send the data to the Tx Buffer
	(*pTxBuffer) = (uint16_t)SPI_ConfigPtr->SPIx->DR;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	801a      	strh	r2, [r3, #0]

}
 8000ac8:	bf00      	nop
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <MCAL_SPI_TX_RX>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock.
*
*/
void MCAL_SPI_TX_RX(SPI_Config_t* SPI_ConfigPtr, uint16_t* pTxBuffer, SPI_Polling_Mechanism_t Polling_Status){
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b084      	sub	sp, #16
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	60f8      	str	r0, [r7, #12]
 8000ada:	60b9      	str	r1, [r7, #8]
 8000adc:	4613      	mov	r3, r2
 8000ade:	71fb      	strb	r3, [r7, #7]

	//Transmit Data
	MCAL_SPI_Transmit(SPI_ConfigPtr,pTxBuffer,Polling_Status);
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	68b9      	ldr	r1, [r7, #8]
 8000ae6:	68f8      	ldr	r0, [r7, #12]
 8000ae8:	f7ff ff70 	bl	80009cc <MCAL_SPI_Transmit>
	//Then Receive Data
	MCAL_SPI_Receive(SPI_ConfigPtr,pTxBuffer,Polling_Status);
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	461a      	mov	r2, r3
 8000af0:	68b9      	ldr	r1, [r7, #8]
 8000af2:	68f8      	ldr	r0, [r7, #12]
 8000af4:	f7ff ffab 	bl	8000a4e <MCAL_SPI_Receive>

}
 8000af8:	bf00      	nop
 8000afa:	3710      	adds	r7, #16
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <SPI1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void SPI1_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <SPI1_IRQHandler+0x10>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4798      	blx	r3
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000034 	.word	0x20000034

08000b14 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8000b18:	4b02      	ldr	r3, [pc, #8]	; (8000b24 <SPI2_IRQHandler+0x10>)
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	4798      	blx	r3
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000034 	.word	0x20000034

08000b28 <MCAL_UART_Init>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_UART_Init(UART_Config_t* UART_ConfigPtr){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

	/*
	* 1) Enable the USART Clock according to the Channel Selected & get Clock Frequencies.
	*/
	uint32_t PCLKx;
	if(UART_ConfigPtr->USARTx == USART1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a64      	ldr	r2, [pc, #400]	; (8000cc8 <MCAL_UART_Init+0x1a0>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d109      	bne.n	8000b4e <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000b3a:	4b64      	ldr	r3, [pc, #400]	; (8000ccc <MCAL_UART_Init+0x1a4>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	4a63      	ldr	r2, [pc, #396]	; (8000ccc <MCAL_UART_Init+0x1a4>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6193      	str	r3, [r2, #24]
		PCLKx = MCAL_RCC_PCLK2();
 8000b46:	f7ff fdb7 	bl	80006b8 <MCAL_RCC_PCLK2>
 8000b4a:	61f8      	str	r0, [r7, #28]
 8000b4c:	e017      	b.n	8000b7e <MCAL_UART_Init+0x56>
	}
	else if (UART_ConfigPtr->USARTx == USART2)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a5f      	ldr	r2, [pc, #380]	; (8000cd0 <MCAL_UART_Init+0x1a8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d109      	bne.n	8000b6c <MCAL_UART_Init+0x44>
	{
		RCC_USART2_CLK_EN();
 8000b58:	4b5c      	ldr	r3, [pc, #368]	; (8000ccc <MCAL_UART_Init+0x1a4>)
 8000b5a:	69db      	ldr	r3, [r3, #28]
 8000b5c:	4a5b      	ldr	r2, [pc, #364]	; (8000ccc <MCAL_UART_Init+0x1a4>)
 8000b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b62:	61d3      	str	r3, [r2, #28]
		PCLKx = MCAL_RCC_PCLK1();
 8000b64:	f7ff fd94 	bl	8000690 <MCAL_RCC_PCLK1>
 8000b68:	61f8      	str	r0, [r7, #28]
 8000b6a:	e008      	b.n	8000b7e <MCAL_UART_Init+0x56>
	}
	else
	{
		RCC_USART3_CLK_EN();
 8000b6c:	4b57      	ldr	r3, [pc, #348]	; (8000ccc <MCAL_UART_Init+0x1a4>)
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	4a56      	ldr	r2, [pc, #344]	; (8000ccc <MCAL_UART_Init+0x1a4>)
 8000b72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b76:	61d3      	str	r3, [r2, #28]
		PCLKx = MCAL_RCC_PCLK1();
 8000b78:	f7ff fd8a 	bl	8000690 <MCAL_RCC_PCLK1>
 8000b7c:	61f8      	str	r0, [r7, #28]
	}

	/*
	* 2) Enable the USART by writing the UE bit in USART_CR1 register to 1.
	*/
	UART_ConfigPtr->USARTx->CR1 |= (1<<13);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	68da      	ldr	r2, [r3, #12]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b8c:	60da      	str	r2, [r3, #12]

	/*
	* 3) Program the M bit in USART_CR1 to define the word length.
	*/
	UART_ConfigPtr->USARTx->CR1 |= UART_ConfigPtr->USART_WordLength;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	68d9      	ldr	r1, [r3, #12]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	68da      	ldr	r2, [r3, #12]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	60da      	str	r2, [r3, #12]

	/*
	* 4) Program the number of stop bits in USART_CR2.
	*/
	UART_ConfigPtr->USARTx->CR2 |= UART_ConfigPtr->USART_StopBits;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	6919      	ldr	r1, [r3, #16]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	611a      	str	r2, [r3, #16]

	/*
	* 5) Select the desired baud rate using the baud rate register USART_BRR.
	*/
	uint32_t DIV_Mantissa = (uint16_t)(PCLKx/(16*UART_ConfigPtr->USART_BaudRate));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	011b      	lsls	r3, r3, #4
 8000bb8:	69fa      	ldr	r2, [r7, #28]
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	61bb      	str	r3, [r7, #24]
	uint32_t DIV_Mantissa_MUL100 = DIV_Mantissa*100;
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	2264      	movs	r2, #100	; 0x64
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	617b      	str	r3, [r7, #20]

	uint32_t DIV_Fraction_MUL100 = ((PCLKx*25)/(4*UART_ConfigPtr->USART_BaudRate)) - DIV_Mantissa_MUL100;
 8000bcc:	69fa      	ldr	r2, [r7, #28]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	4413      	add	r3, r2
 8000bd4:	009a      	lsls	r2, r3, #2
 8000bd6:	441a      	add	r2, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	fbb2 f2f3 	udiv	r2, r2, r3
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	1ad3      	subs	r3, r2, r3
 8000be6:	613b      	str	r3, [r7, #16]
	uint32_t  DIV_Fraction = (DIV_Fraction_MUL100*16)/100;
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	011b      	lsls	r3, r3, #4
 8000bec:	4a39      	ldr	r2, [pc, #228]	; (8000cd4 <MCAL_UART_Init+0x1ac>)
 8000bee:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf2:	095b      	lsrs	r3, r3, #5
 8000bf4:	60fb      	str	r3, [r7, #12]

	DIV_Mantissa = DIV_Mantissa & 0xFFF;
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bfc:	61bb      	str	r3, [r7, #24]
	DIV_Fraction = DIV_Fraction & 0xF;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f003 030f 	and.w	r3, r3, #15
 8000c04:	60fb      	str	r3, [r7, #12]

	UART_ConfigPtr->USARTx->BRR |= ( (DIV_Mantissa<<4) | (DIV_Fraction) );
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6899      	ldr	r1, [r3, #8]
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	011a      	lsls	r2, r3, #4
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	431a      	orrs	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	609a      	str	r2, [r3, #8]

	/*
	* 6) Select the parity enable or disable and even or odd USART_CR1 register.
	*/
	UART_ConfigPtr->USARTx->CR1 |= UART_ConfigPtr->USART_Parity;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68d9      	ldr	r1, [r3, #12]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	691a      	ldr	r2, [r3, #16]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	60da      	str	r2, [r3, #12]

	/*
	* 7) Enable or Disable HwFlowCtrl parity in USART_CR3 register.
	*/
	UART_ConfigPtr->USARTx->CR3 |= UART_ConfigPtr->USART_FlowControl;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6959      	ldr	r1, [r3, #20]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	699a      	ldr	r2, [r3, #24]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	615a      	str	r2, [r3, #20]

	/*
	* 8) Set the TE bit (if chosen) in USART_CR1 to send an idle frame as first transmission &
	*	 Set the RE bit (if chosen) in USART_CR1. This enables the receiver which begins searching for a start bit.
	*/
	UART_ConfigPtr->USARTx->CR1 |= UART_ConfigPtr->USART_Mode;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	68d9      	ldr	r1, [r3, #12]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685a      	ldr	r2, [r3, #4]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	60da      	str	r2, [r3, #12]

	/*
	* 9) Enable or Disable Interrupt according to the configuration & Update Interrupt Handling CallBack.
	*/
	if(UART_ConfigPtr->USART_IRQ_EN != USART_IE_DISABLE){
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d032      	beq.n	8000cc0 <MCAL_UART_Init+0x198>

		//Enable Interrupt mask in UART
		UART_ConfigPtr->USARTx->CR1 |= UART_ConfigPtr->USART_IRQ_EN;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68d9      	ldr	r1, [r3, #12]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	69da      	ldr	r2, [r3, #28]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	60da      	str	r2, [r3, #12]

		//Enable Interrupt mask in NVIC
		if(UART_ConfigPtr->USARTx == USART1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a15      	ldr	r2, [pc, #84]	; (8000cc8 <MCAL_UART_Init+0x1a0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d10a      	bne.n	8000c8c <MCAL_UART_Init+0x164>
		{
			g_IRQ_CallBackPtr[0] = UART_ConfigPtr->IRQ_CallBackPtr;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6a1b      	ldr	r3, [r3, #32]
 8000c7a:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <MCAL_UART_Init+0x1b0>)
 8000c7c:	6013      	str	r3, [r2, #0]
			NVIC_IRQ37_EN();
 8000c7e:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <MCAL_UART_Init+0x1b4>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <MCAL_UART_Init+0x1b4>)
 8000c84:	f043 0320 	orr.w	r3, r3, #32
 8000c88:	6013      	str	r3, [r2, #0]
			g_IRQ_CallBackPtr[2] = UART_ConfigPtr->IRQ_CallBackPtr;
			NVIC_IRQ39_EN();
		}
	}

}
 8000c8a:	e019      	b.n	8000cc0 <MCAL_UART_Init+0x198>
		else if (UART_ConfigPtr->USARTx == USART2)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <MCAL_UART_Init+0x1a8>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d10a      	bne.n	8000cac <MCAL_UART_Init+0x184>
			g_IRQ_CallBackPtr[1] = UART_ConfigPtr->IRQ_CallBackPtr;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a1b      	ldr	r3, [r3, #32]
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <MCAL_UART_Init+0x1b0>)
 8000c9c:	6053      	str	r3, [r2, #4]
			NVIC_IRQ38_EN();
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MCAL_UART_Init+0x1b4>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <MCAL_UART_Init+0x1b4>)
 8000ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca8:	6013      	str	r3, [r2, #0]
}
 8000caa:	e009      	b.n	8000cc0 <MCAL_UART_Init+0x198>
			g_IRQ_CallBackPtr[2] = UART_ConfigPtr->IRQ_CallBackPtr;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6a1b      	ldr	r3, [r3, #32]
 8000cb0:	4a09      	ldr	r2, [pc, #36]	; (8000cd8 <MCAL_UART_Init+0x1b0>)
 8000cb2:	6093      	str	r3, [r2, #8]
			NVIC_IRQ39_EN();
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MCAL_UART_Init+0x1b4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <MCAL_UART_Init+0x1b4>)
 8000cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cbe:	6013      	str	r3, [r2, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	3720      	adds	r7, #32
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40013800 	.word	0x40013800
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40004400 	.word	0x40004400
 8000cd4:	51eb851f 	.word	0x51eb851f
 8000cd8:	2000003c 	.word	0x2000003c
 8000cdc:	e000e104 	.word	0xe000e104

08000ce0 <MCAL_UART_GPIO_SetPins>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_UART_GPIO_SetPins(UART_Config_t* UART_ConfigPtr){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b09a      	sub	sp, #104	; 0x68
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

	//Check if USARTx is USART1
	if(UART_ConfigPtr->USARTx == USART1){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a73      	ldr	r2, [pc, #460]	; (8000ebc <MCAL_UART_GPIO_SetPins+0x1dc>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d149      	bne.n	8000d86 <MCAL_UART_GPIO_SetPins+0xa6>

		// PA9  --> TX
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_TX))
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0308 	and.w	r3, r3, #8
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d00b      	beq.n	8000d16 <MCAL_UART_GPIO_SetPins+0x36>
		{
			// GPIO Configuration: Alternate function push-pull
			GPIO_PinConfig_t Tx1 = {GPIOA, GPIO_PIN_9, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000cfe:	4a70      	ldr	r2, [pc, #448]	; (8000ec0 <MCAL_UART_GPIO_SetPins+0x1e0>)
 8000d00:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d08:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tx1);
 8000d0c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fb93 	bl	800043c <MCAL_GPIO_Init>
		}

		// PA10 --> RX
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_RX)){
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00b      	beq.n	8000d3a <MCAL_UART_GPIO_SetPins+0x5a>
			// GPIO Configuration: Alternate function Input Floating
			GPIO_PinConfig_t Rx1 = {GPIOA, GPIO_PIN_10, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000d22:	4a68      	ldr	r2, [pc, #416]	; (8000ec4 <MCAL_UART_GPIO_SetPins+0x1e4>)
 8000d24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d2c:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Rx1);
 8000d30:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fb81 	bl	800043c <MCAL_GPIO_Init>
		}

		// PA11 --> CTS
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_CTS)){
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00b      	beq.n	8000d5e <MCAL_UART_GPIO_SetPins+0x7e>
			// GPIO Configuration: Alternate function push-pull
			GPIO_PinConfig_t cts1 = {GPIOA, GPIO_PIN_11, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000d46:	4a60      	ldr	r2, [pc, #384]	; (8000ec8 <MCAL_UART_GPIO_SetPins+0x1e8>)
 8000d48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d50:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&cts1);
 8000d54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fb6f 	bl	800043c <MCAL_GPIO_Init>
		}

		// PA12 --> RTS
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_RTS)){
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	f000 80a3 	beq.w	8000eb2 <MCAL_UART_GPIO_SetPins+0x1d2>
			// GPIO Configuration: Alternate function Input Floating
			GPIO_PinConfig_t rts1 = {GPIOA, GPIO_PIN_12, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000d6c:	4a57      	ldr	r2, [pc, #348]	; (8000ecc <MCAL_UART_GPIO_SetPins+0x1ec>)
 8000d6e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d76:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&rts1);
 8000d7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fb5c 	bl	800043c <MCAL_GPIO_Init>
			MCAL_GPIO_Init(&rts3);
		}

	}

}
 8000d84:	e095      	b.n	8000eb2 <MCAL_UART_GPIO_SetPins+0x1d2>
	else if(UART_ConfigPtr->USARTx == USART2)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a51      	ldr	r2, [pc, #324]	; (8000ed0 <MCAL_UART_GPIO_SetPins+0x1f0>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d148      	bne.n	8000e22 <MCAL_UART_GPIO_SetPins+0x142>
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_TX))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0308 	and.w	r3, r3, #8
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00b      	beq.n	8000db4 <MCAL_UART_GPIO_SetPins+0xd4>
			GPIO_PinConfig_t Tx2 = {GPIOA, GPIO_PIN_2, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000d9c:	4a4d      	ldr	r2, [pc, #308]	; (8000ed4 <MCAL_UART_GPIO_SetPins+0x1f4>)
 8000d9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000da2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000da6:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tx2);
 8000daa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fb44 	bl	800043c <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_RX)){
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d00b      	beq.n	8000dd8 <MCAL_UART_GPIO_SetPins+0xf8>
			GPIO_PinConfig_t Rx2 = {GPIOA, GPIO_PIN_3, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000dc0:	4a45      	ldr	r2, [pc, #276]	; (8000ed8 <MCAL_UART_GPIO_SetPins+0x1f8>)
 8000dc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dca:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Rx2);
 8000dce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff fb32 	bl	800043c <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_CTS)){
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d00b      	beq.n	8000dfc <MCAL_UART_GPIO_SetPins+0x11c>
			GPIO_PinConfig_t cts2 = {GPIOA, GPIO_PIN_0, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000de4:	4a3d      	ldr	r2, [pc, #244]	; (8000edc <MCAL_UART_GPIO_SetPins+0x1fc>)
 8000de6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000dea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dee:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&cts2);
 8000df2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fb20 	bl	800043c <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_RTS)){
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d054      	beq.n	8000eb2 <MCAL_UART_GPIO_SetPins+0x1d2>
			GPIO_PinConfig_t rts2 = {GPIOA, GPIO_PIN_1, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000e08:	4a35      	ldr	r2, [pc, #212]	; (8000ee0 <MCAL_UART_GPIO_SetPins+0x200>)
 8000e0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e12:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&rts2);
 8000e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fb0e 	bl	800043c <MCAL_GPIO_Init>
}
 8000e20:	e047      	b.n	8000eb2 <MCAL_UART_GPIO_SetPins+0x1d2>
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_TX))
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00b      	beq.n	8000e46 <MCAL_UART_GPIO_SetPins+0x166>
			GPIO_PinConfig_t Tx3 = {GPIOB, GPIO_PIN_10, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000e2e:	4a2d      	ldr	r2, [pc, #180]	; (8000ee4 <MCAL_UART_GPIO_SetPins+0x204>)
 8000e30:	f107 0320 	add.w	r3, r7, #32
 8000e34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e38:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tx3);
 8000e3c:	f107 0320 	add.w	r3, r7, #32
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fafb 	bl	800043c <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_RX)){
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00b      	beq.n	8000e6a <MCAL_UART_GPIO_SetPins+0x18a>
			GPIO_PinConfig_t Rx3 = {GPIOB, GPIO_PIN_11, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000e52:	4a25      	ldr	r2, [pc, #148]	; (8000ee8 <MCAL_UART_GPIO_SetPins+0x208>)
 8000e54:	f107 0318 	add.w	r3, r7, #24
 8000e58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e5c:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Rx3);
 8000e60:	f107 0318 	add.w	r3, r7, #24
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fae9 	bl	800043c <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_CTS)){
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d00b      	beq.n	8000e8e <MCAL_UART_GPIO_SetPins+0x1ae>
			GPIO_PinConfig_t cts3 = {GPIOB, GPIO_PIN_13, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000e76:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <MCAL_UART_GPIO_SetPins+0x20c>)
 8000e78:	f107 0310 	add.w	r3, r7, #16
 8000e7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e80:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&cts3);
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fad7 	bl	800043c <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_RTS)){
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00b      	beq.n	8000eb2 <MCAL_UART_GPIO_SetPins+0x1d2>
			GPIO_PinConfig_t rts3 = {GPIOB, GPIO_PIN_14, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000e9a:	4a15      	ldr	r2, [pc, #84]	; (8000ef0 <MCAL_UART_GPIO_SetPins+0x210>)
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ea4:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&rts3);
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fac5 	bl	800043c <MCAL_GPIO_Init>
}
 8000eb2:	bf00      	nop
 8000eb4:	3768      	adds	r7, #104	; 0x68
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40013800 	.word	0x40013800
 8000ec0:	08001130 	.word	0x08001130
 8000ec4:	08001138 	.word	0x08001138
 8000ec8:	08001140 	.word	0x08001140
 8000ecc:	08001148 	.word	0x08001148
 8000ed0:	40004400 	.word	0x40004400
 8000ed4:	08001150 	.word	0x08001150
 8000ed8:	08001158 	.word	0x08001158
 8000edc:	08001160 	.word	0x08001160
 8000ee0:	08001168 	.word	0x08001168
 8000ee4:	08001170 	.word	0x08001170
 8000ee8:	08001178 	.word	0x08001178
 8000eec:	08001180 	.word	0x08001180
 8000ef0:	08001188 	.word	0x08001188

08000ef4 <MCAL_UART_Transmit>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_UART_Transmit(UART_Config_t* UART_ConfigPtr, uint16_t* pTxBuffer, USART_Polling_Mechanism_t Polling_Status){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	4613      	mov	r3, r2
 8000f00:	71fb      	strb	r3, [r7, #7]

	//Check for Polling_Status
	if(Polling_Status == UART_Polling_Enable)
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d107      	bne.n	8000f18 <MCAL_UART_Transmit+0x24>
		//wait for transmit data register to be empty
		while( ! ( (UART_ConfigPtr->USARTx->SR) & (1<<7) ) );
 8000f08:	bf00      	nop
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f8      	beq.n	8000f0a <MCAL_UART_Transmit+0x16>
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit
	 * */

	if(UART_ConfigPtr->USART_WordLength == USART_WORD_LENGTH_9)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f20:	d108      	bne.n	8000f34 <MCAL_UART_Transmit+0x40>
	{
		UART_ConfigPtr->USARTx->DR = ( (*pTxBuffer) & 0x1FF );
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f30:	605a      	str	r2, [r3, #4]
	else
	{
		UART_ConfigPtr->USARTx->DR = ( (*pTxBuffer) & 0x0FF );
	}

}
 8000f32:	e006      	b.n	8000f42 <MCAL_UART_Transmit+0x4e>
		UART_ConfigPtr->USARTx->DR = ( (*pTxBuffer) & 0x0FF );
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	b2d2      	uxtb	r2, r2
 8000f40:	605a      	str	r2, [r3, #4]
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <USART1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void USART1_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000f50:	4b02      	ldr	r3, [pc, #8]	; (8000f5c <USART1_IRQHandler+0x10>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4798      	blx	r3
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	2000003c 	.word	0x2000003c

08000f60 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8000f64:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <USART2_IRQHandler+0x10>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	4798      	blx	r3
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000003c 	.word	0x2000003c

08000f74 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 8000f78:	4b02      	ldr	r3, [pc, #8]	; (8000f84 <USART3_IRQHandler+0x10>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	4798      	blx	r3
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	2000003c 	.word	0x2000003c

08000f88 <SPI1_IRQ_CallBack>:
SPI_Config_t  spi1;
GPIO_PinConfig_t nss1;
GPIO_PinConfig_t led = {GPIOB,GPIO_PIN_0,GPIO_MODE_OUTPUT_PP,GPIO_OUTPUT_SPEED_10MHZ};

void SPI1_IRQ_CallBack(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
#ifdef MCU_Act_As_Slave
	//Receive UART - Send UART

	//Receive SPI in MCU2 from SPI in MCU1
	MCAL_SPI_TX_RX(&spi1, &character, UART_Polling_Disable);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4909      	ldr	r1, [pc, #36]	; (8000fb4 <SPI1_IRQ_CallBack+0x2c>)
 8000f90:	4809      	ldr	r0, [pc, #36]	; (8000fb8 <SPI1_IRQ_CallBack+0x30>)
 8000f92:	f7ff fd9e 	bl	8000ad2 <MCAL_SPI_TX_RX>
	if(character == 'm')
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <SPI1_IRQ_CallBack+0x2c>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	2b6d      	cmp	r3, #109	; 0x6d
 8000f9c:	d102      	bne.n	8000fa4 <SPI1_IRQ_CallBack+0x1c>
		MCAL_GPIO_TogglePin(&led);
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <SPI1_IRQ_CallBack+0x34>)
 8000fa0:	f7ff fb2a 	bl	80005f8 <MCAL_GPIO_TogglePin>
	MCAL_UART_Transmit(&uart1, &character, UART_Polling_Enable);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	4903      	ldr	r1, [pc, #12]	; (8000fb4 <SPI1_IRQ_CallBack+0x2c>)
 8000fa8:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <SPI1_IRQ_CallBack+0x38>)
 8000faa:	f7ff ffa3 	bl	8000ef4 <MCAL_UART_Transmit>

#endif
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000078 	.word	0x20000078
 8000fb8:	200000a8 	.word	0x200000a8
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000084 	.word	0x20000084

08000fc4 <main>:
#endif

}

int main(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

	uart1.USARTx 			= USART1;
 8000fc8:	4b26      	ldr	r3, [pc, #152]	; (8001064 <main+0xa0>)
 8000fca:	4a27      	ldr	r2, [pc, #156]	; (8001068 <main+0xa4>)
 8000fcc:	601a      	str	r2, [r3, #0]
	uart1.USART_BaudRate 	= USART_BAUDRATE_115200;
 8000fce:	4b25      	ldr	r3, [pc, #148]	; (8001064 <main+0xa0>)
 8000fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd4:	609a      	str	r2, [r3, #8]
	uart1.USART_WordLength 	= USART_WORD_LENGTH_8;
 8000fd6:	4b23      	ldr	r3, [pc, #140]	; (8001064 <main+0xa0>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
	uart1.USART_Parity 		= USART_PARITY_DISABLE;
 8000fdc:	4b21      	ldr	r3, [pc, #132]	; (8001064 <main+0xa0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
	uart1.USART_StopBits 	= USART_STOP_BIT_1;
 8000fe2:	4b20      	ldr	r3, [pc, #128]	; (8001064 <main+0xa0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
	uart1.USART_FlowControl = USART_FLOW_CONTROL_DISABLE;
 8000fe8:	4b1e      	ldr	r3, [pc, #120]	; (8001064 <main+0xa0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
	uart1.USART_IRQ_EN 		= USART_IE_RXNE;
	uart1.IRQ_CallBackPtr 	= UART1_IRQ_CallBack;
#endif

#ifdef MCU_Act_As_Slave
	uart1.USART_Mode 		= USART_MODE_TX;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <main+0xa0>)
 8000ff0:	2208      	movs	r2, #8
 8000ff2:	605a      	str	r2, [r3, #4]
	uart1.USART_IRQ_EN 		= USART_IE_DISABLE;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <main+0xa0>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
	uart1.IRQ_CallBackPtr 	= NULL_PTR;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	; (8001064 <main+0xa0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
#endif

	MCAL_UART_Init(&uart1);
 8001000:	4818      	ldr	r0, [pc, #96]	; (8001064 <main+0xa0>)
 8001002:	f7ff fd91 	bl	8000b28 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(&uart1);
 8001006:	4817      	ldr	r0, [pc, #92]	; (8001064 <main+0xa0>)
 8001008:	f7ff fe6a 	bl	8000ce0 <MCAL_UART_GPIO_SetPins>

	//Common Configuration for master & slave
	spi1.SPIx = SPI1;
 800100c:	4b17      	ldr	r3, [pc, #92]	; (800106c <main+0xa8>)
 800100e:	4a18      	ldr	r2, [pc, #96]	; (8001070 <main+0xac>)
 8001010:	601a      	str	r2, [r3, #0]
	spi1.SPI_ClkPhase = SPI_2ND_EDGE_CAPTURE_STROBE;
 8001012:	4b16      	ldr	r3, [pc, #88]	; (800106c <main+0xa8>)
 8001014:	2201      	movs	r2, #1
 8001016:	81da      	strh	r2, [r3, #14]
	spi1.SPI_ClkPolarity = SPI_CLOCK_IDLE_HIGH;
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <main+0xa8>)
 800101a:	2202      	movs	r2, #2
 800101c:	819a      	strh	r2, [r3, #12]
	spi1.SPI_DataSize = SPI_DATA_SIZE_8;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <main+0xa8>)
 8001020:	2200      	movs	r2, #0
 8001022:	815a      	strh	r2, [r3, #10]
	spi1.SPI_FrameFormat = SPI_FRAME_FORMAT_MSB;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <main+0xa8>)
 8001026:	2200      	movs	r2, #0
 8001028:	811a      	strh	r2, [r3, #8]
	spi1.SPI_PreScaler = SPI_PRESCALER_DIVISOR_8;
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <main+0xa8>)
 800102c:	2210      	movs	r2, #16
 800102e:	825a      	strh	r2, [r3, #18]
	MCAL_GPIO_Init(&nss1);
	MCAL_GPIO_WritePin(&nss1, GPIO_PIN_SET);
#endif

#ifdef MCU_Act_As_Slave
	spi1.SPI_CommMode = SPI_FULL_DUPLEX;
 8001030:	4b0e      	ldr	r3, [pc, #56]	; (800106c <main+0xa8>)
 8001032:	2202      	movs	r2, #2
 8001034:	80da      	strh	r2, [r3, #6]
	spi1.SPI_Mode = SPI_MODE_SLAVE;
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <main+0xa8>)
 8001038:	2200      	movs	r2, #0
 800103a:	809a      	strh	r2, [r3, #4]
	spi1.SPI_SlaveSelect = SPI_SS_HARDWARE_SLAVE;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <main+0xa8>)
 800103e:	2200      	movs	r2, #0
 8001040:	821a      	strh	r2, [r3, #16]
	spi1.SPI_IRQ_EN = SPI_IE_RXNE;
 8001042:	4b0a      	ldr	r3, [pc, #40]	; (800106c <main+0xa8>)
 8001044:	2240      	movs	r2, #64	; 0x40
 8001046:	829a      	strh	r2, [r3, #20]
	spi1.IRQ_CallBackPtr = SPI1_IRQ_CallBack;
 8001048:	4b08      	ldr	r3, [pc, #32]	; (800106c <main+0xa8>)
 800104a:	4a0a      	ldr	r2, [pc, #40]	; (8001074 <main+0xb0>)
 800104c:	619a      	str	r2, [r3, #24]
	MCAL_GPIO_Init(&led);
 800104e:	480a      	ldr	r0, [pc, #40]	; (8001078 <main+0xb4>)
 8001050:	f7ff f9f4 	bl	800043c <MCAL_GPIO_Init>
#endif

	MCAL_SPI_Init(&spi1);
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <main+0xa8>)
 8001056:	f7ff fb43 	bl	80006e0 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_SetPins(&spi1);
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <main+0xa8>)
 800105c:	f7ff fbd8 	bl	8000810 <MCAL_SPI_GPIO_SetPins>


    while (1)
 8001060:	e7fe      	b.n	8001060 <main+0x9c>
 8001062:	bf00      	nop
 8001064:	20000084 	.word	0x20000084
 8001068:	40013800 	.word	0x40013800
 800106c:	200000a8 	.word	0x200000a8
 8001070:	40013000 	.word	0x40013000
 8001074:	08000f89 	.word	0x08000f89
 8001078:	20000000 	.word	0x20000000

0800107c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800107e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001080:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010aa:	f000 f811 	bl	80010d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ae:	f7ff ff89 	bl	8000fc4 <main>

080010b2 <LoopForever>:

LoopForever:
    b LoopForever
 80010b2:	e7fe      	b.n	80010b2 <LoopForever>
  ldr   r0, =_estack
 80010b4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80010c0:	080011b0 	.word	0x080011b0
  ldr r2, =_sbss
 80010c4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80010c8:	200000c4 	.word	0x200000c4

080010cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_2_IRQHandler>
	...

080010d0 <__libc_init_array>:
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	2500      	movs	r5, #0
 80010d4:	4e0c      	ldr	r6, [pc, #48]	; (8001108 <__libc_init_array+0x38>)
 80010d6:	4c0d      	ldr	r4, [pc, #52]	; (800110c <__libc_init_array+0x3c>)
 80010d8:	1ba4      	subs	r4, r4, r6
 80010da:	10a4      	asrs	r4, r4, #2
 80010dc:	42a5      	cmp	r5, r4
 80010de:	d109      	bne.n	80010f4 <__libc_init_array+0x24>
 80010e0:	f000 f81a 	bl	8001118 <_init>
 80010e4:	2500      	movs	r5, #0
 80010e6:	4e0a      	ldr	r6, [pc, #40]	; (8001110 <__libc_init_array+0x40>)
 80010e8:	4c0a      	ldr	r4, [pc, #40]	; (8001114 <__libc_init_array+0x44>)
 80010ea:	1ba4      	subs	r4, r4, r6
 80010ec:	10a4      	asrs	r4, r4, #2
 80010ee:	42a5      	cmp	r5, r4
 80010f0:	d105      	bne.n	80010fe <__libc_init_array+0x2e>
 80010f2:	bd70      	pop	{r4, r5, r6, pc}
 80010f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80010f8:	4798      	blx	r3
 80010fa:	3501      	adds	r5, #1
 80010fc:	e7ee      	b.n	80010dc <__libc_init_array+0xc>
 80010fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001102:	4798      	blx	r3
 8001104:	3501      	adds	r5, #1
 8001106:	e7f2      	b.n	80010ee <__libc_init_array+0x1e>
 8001108:	080011a8 	.word	0x080011a8
 800110c:	080011a8 	.word	0x080011a8
 8001110:	080011a8 	.word	0x080011a8
 8001114:	080011ac 	.word	0x080011ac

08001118 <_init>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	bf00      	nop
 800111c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800111e:	bc08      	pop	{r3}
 8001120:	469e      	mov	lr, r3
 8001122:	4770      	bx	lr

08001124 <_fini>:
 8001124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001126:	bf00      	nop
 8001128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800112a:	bc08      	pop	{r3}
 800112c:	469e      	mov	lr, r3
 800112e:	4770      	bx	lr
