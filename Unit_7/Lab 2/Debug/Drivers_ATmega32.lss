
Drivers_ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000556  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000556  000005ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080007a  0080007a  00000604  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000634  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013e9  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d3  00000000  00000000  00001b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000801  00000000  00000000  0000242c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00002c30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000575  00000000  00000000  00002e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003fa  00000000  00000000  0000339d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00003797  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 02 	call	0x4c0	; 0x4c0 <main>
  8a:	0c 94 a9 02 	jmp	0x552	; 0x552 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KEYPAD_Set_Columns_VCC>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

static void KEYPAD_Set_Columns_VCC(void){
	
	//Initialize columns as VCC at first, i.e: each column data pin = 1
	MCAL_GPIO_WritePin(KEYPAD_PORT,KEYPAD_COLUMN_0,GPIO_PIN_SET);
  92:	41 e0       	ldi	r20, 0x01	; 1
  94:	60 e1       	ldi	r22, 0x10	; 16
  96:	83 e3       	ldi	r24, 0x33	; 51
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT,KEYPAD_COLUMN_1,GPIO_PIN_SET);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	60 e2       	ldi	r22, 0x20	; 32
  a2:	83 e3       	ldi	r24, 0x33	; 51
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT,KEYPAD_COLUMN_2,GPIO_PIN_SET);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	60 e4       	ldi	r22, 0x40	; 64
  ae:	83 e3       	ldi	r24, 0x33	; 51
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(KEYPAD_PORT,KEYPAD_COLUMN_3,GPIO_PIN_SET);
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	60 e8       	ldi	r22, 0x80	; 128
  ba:	83 e3       	ldi	r24, 0x33	; 51
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
  c2:	08 95       	ret

000000c4 <HAL_KEYPAD_Init>:
* @retval 			- None.
*
* Note				- This initializes only one KEYPAD per MCU.
*
*/
void HAL_KEYPAD_Init(void){
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
	
	//Configure Rows pins as input pull-up
	g_PinConfig.GPIO_Mode = GPIO_MODE_INPUT_PU;
  ca:	ca e7       	ldi	r28, 0x7A	; 122
  cc:	d0 e0       	ldi	r29, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	89 83       	std	Y+1, r24	; 0x01
	//Initialize Rows pins
	g_PinConfig.GPIO_PinNo = KEYPAD_ROW_0;
  d2:	88 83       	st	Y, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&g_PinConfig);
  d4:	be 01       	movw	r22, r28
  d6:	83 e3       	ldi	r24, 0x33	; 51
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	
	g_PinConfig.GPIO_PinNo = KEYPAD_ROW_1;
  de:	12 e0       	ldi	r17, 0x02	; 2
  e0:	18 83       	st	Y, r17
	MCAL_GPIO_Init(KEYPAD_PORT,&g_PinConfig);
  e2:	be 01       	movw	r22, r28
  e4:	83 e3       	ldi	r24, 0x33	; 51
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	
	g_PinConfig.GPIO_PinNo = KEYPAD_ROW_2;
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	88 83       	st	Y, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&g_PinConfig);
  f0:	be 01       	movw	r22, r28
  f2:	83 e3       	ldi	r24, 0x33	; 51
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	
	g_PinConfig.GPIO_PinNo = KEYPAD_ROW_3;
  fa:	88 e0       	ldi	r24, 0x08	; 8
  fc:	88 83       	st	Y, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&g_PinConfig);
  fe:	be 01       	movw	r22, r28
 100:	83 e3       	ldi	r24, 0x33	; 51
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	
	//Configure Columns pins as output
	g_PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT;
 108:	19 83       	std	Y+1, r17	; 0x01
	
	//Initialize Columns pins
	g_PinConfig.GPIO_PinNo = KEYPAD_COLUMN_0;
 10a:	80 e1       	ldi	r24, 0x10	; 16
 10c:	88 83       	st	Y, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&g_PinConfig);
 10e:	be 01       	movw	r22, r28
 110:	83 e3       	ldi	r24, 0x33	; 51
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	
	g_PinConfig.GPIO_PinNo = KEYPAD_COLUMN_1;
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	88 83       	st	Y, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&g_PinConfig);
 11c:	be 01       	movw	r22, r28
 11e:	83 e3       	ldi	r24, 0x33	; 51
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	
	g_PinConfig.GPIO_PinNo = KEYPAD_COLUMN_2;
 126:	80 e4       	ldi	r24, 0x40	; 64
 128:	88 83       	st	Y, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&g_PinConfig);
 12a:	be 01       	movw	r22, r28
 12c:	83 e3       	ldi	r24, 0x33	; 51
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	
	g_PinConfig.GPIO_PinNo = KEYPAD_COLUMN_3;
 134:	80 e8       	ldi	r24, 0x80	; 128
 136:	88 83       	st	Y, r24
	MCAL_GPIO_Init(KEYPAD_PORT,&g_PinConfig);
 138:	be 01       	movw	r22, r28
 13a:	83 e3       	ldi	r24, 0x33	; 51
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	
	
	KEYPAD_Set_Columns_VCC();
 142:	0e 94 49 00 	call	0x92	; 0x92 <KEYPAD_Set_Columns_VCC>
}
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	08 95       	ret

0000014e <HAL_KEYPAD_GetButtonPressed>:
*					  if no button pressed.
*
* Note				- 
*
*/
uint8_t HAL_KEYPAD_GetButtonPressed(void){
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
	
	for(int i=0;i<4;i++)
 158:	e1 2c       	mov	r14, r1
 15a:	f1 2c       	mov	r15, r1
 15c:	31 c0       	rjmp	.+98     	; 0x1c0 <HAL_KEYPAD_GetButtonPressed+0x72>
	{
		KEYPAD_Set_Columns_VCC();
 15e:	0e 94 49 00 	call	0x92	; 0x92 <KEYPAD_Set_Columns_VCC>
		
		MCAL_GPIO_WritePin(KEYPAD_PORT,g_KeypadColumns[i],GPIO_PIN_CLEAR);
 162:	40 e0       	ldi	r20, 0x00	; 0
 164:	f7 01       	movw	r30, r14
 166:	ef 58       	subi	r30, 0x8F	; 143
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	60 81       	ld	r22, Z
 16c:	83 e3       	ldi	r24, 0x33	; 51
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
		
		for(int j=0;j<4;j++)
 174:	c0 e0       	ldi	r28, 0x00	; 0
 176:	d0 e0       	ldi	r29, 0x00	; 0
 178:	1d c0       	rjmp	.+58     	; 0x1b4 <HAL_KEYPAD_GetButtonPressed+0x66>
		{
			if(MCAL_GPIO_ReadPin(KEYPAD_PORT,g_KeypadRows[j])==GPIO_PIN_CLEAR)
 17a:	fe 01       	movw	r30, r28
 17c:	eb 58       	subi	r30, 0x8B	; 139
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	10 81       	ld	r17, Z
 182:	61 2f       	mov	r22, r17
 184:	83 e3       	ldi	r24, 0x33	; 51
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	0e 94 97 02 	call	0x52e	; 0x52e <MCAL_GPIO_ReadPin>
 18c:	81 11       	cpse	r24, r1
 18e:	11 c0       	rjmp	.+34     	; 0x1b2 <HAL_KEYPAD_GetButtonPressed+0x64>
			{
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT,g_KeypadRows[j])==GPIO_PIN_CLEAR);
 190:	61 2f       	mov	r22, r17
 192:	83 e3       	ldi	r24, 0x33	; 51
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 97 02 	call	0x52e	; 0x52e <MCAL_GPIO_ReadPin>
 19a:	88 23       	and	r24, r24
 19c:	c9 f3       	breq	.-14     	; 0x190 <HAL_KEYPAD_GetButtonPressed+0x42>
				return g_KeypadData[j][i];
 19e:	cc 0f       	add	r28, r28
 1a0:	dd 1f       	adc	r29, r29
 1a2:	cc 0f       	add	r28, r28
 1a4:	dd 1f       	adc	r29, r29
 1a6:	cf 59       	subi	r28, 0x9F	; 159
 1a8:	df 4f       	sbci	r29, 0xFF	; 255
 1aa:	ce 0d       	add	r28, r14
 1ac:	df 1d       	adc	r29, r15
 1ae:	88 81       	ld	r24, Y
 1b0:	0c c0       	rjmp	.+24     	; 0x1ca <HAL_KEYPAD_GetButtonPressed+0x7c>
	{
		KEYPAD_Set_Columns_VCC();
		
		MCAL_GPIO_WritePin(KEYPAD_PORT,g_KeypadColumns[i],GPIO_PIN_CLEAR);
		
		for(int j=0;j<4;j++)
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	c4 30       	cpi	r28, 0x04	; 4
 1b6:	d1 05       	cpc	r29, r1
 1b8:	04 f3       	brlt	.-64     	; 0x17a <HAL_KEYPAD_GetButtonPressed+0x2c>
* Note				- 
*
*/
uint8_t HAL_KEYPAD_GetButtonPressed(void){
	
	for(int i=0;i<4;i++)
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	e8 1a       	sub	r14, r24
 1be:	f8 0a       	sbc	r15, r24
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	e8 16       	cp	r14, r24
 1c4:	f1 04       	cpc	r15, r1
 1c6:	5c f2       	brlt	.-106    	; 0x15e <HAL_KEYPAD_GetButtonPressed+0x10>
				while(MCAL_GPIO_ReadPin(KEYPAD_PORT,g_KeypadRows[j])==GPIO_PIN_CLEAR);
				return g_KeypadData[j][i];
			}
		}
	}
	return KEYPAD_BUTTON_NOT_PRESSED;
 1c8:	80 e0       	ldi	r24, 0x00	; 0
	
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	ff 90       	pop	r15
 1d2:	ef 90       	pop	r14
 1d4:	08 95       	ret

000001d6 <LCD_GPIO_Init>:

/*================================================================
 * Description :
 * Initializes the pins chosen according to @config
 */
static void LCD_GPIO_Init(void){
 1d6:	cf 93       	push	r28
 1d8:	df 93       	push	r29
	
	//Configure at first g_PinConfig as output always
	g_PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT;
 1da:	cd e7       	ldi	r28, 0x7D	; 125
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	89 83       	std	Y+1, r24	; 0x01
	
	//Configure RS Pin
	g_PinConfig.GPIO_PinNo = LCD_RS_PIN;
 1e2:	88 83       	st	Y, r24
	MCAL_GPIO_Init(LCD_CTRL_PORT,&g_PinConfig);
 1e4:	be 01       	movw	r22, r28
 1e6:	89 e3       	ldi	r24, 0x39	; 57
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	
	//Configure EN Pin
	g_PinConfig.GPIO_PinNo = LCD_EN_PIN;
 1ee:	88 e0       	ldi	r24, 0x08	; 8
 1f0:	88 83       	st	Y, r24
	MCAL_GPIO_Init(LCD_CTRL_PORT,&g_PinConfig);
 1f2:	be 01       	movw	r22, r28
 1f4:	89 e3       	ldi	r24, 0x39	; 57
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	LCD_delay_ms(20);
	
	#if DATA_BITS_NO == FOUR_BIT_MODE
	
	//Configure Data Bit 4 Pin
	g_PinConfig.GPIO_PinNo = LCD_DATA_PIN_4;
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	88 83       	st	Y, r24
	MCAL_GPIO_Init(LCD_DATA_PORT,&g_PinConfig);
 200:	be 01       	movw	r22, r28
 202:	89 e3       	ldi	r24, 0x39	; 57
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	//Configure Data Bit 5 Pin
	g_PinConfig.GPIO_PinNo = LCD_DATA_PIN_5;
 20a:	80 e2       	ldi	r24, 0x20	; 32
 20c:	88 83       	st	Y, r24
	MCAL_GPIO_Init(LCD_DATA_PORT,&g_PinConfig);
 20e:	be 01       	movw	r22, r28
 210:	89 e3       	ldi	r24, 0x39	; 57
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	//Configure Data Bit 6 Pin
	g_PinConfig.GPIO_PinNo = LCD_DATA_PIN_6;
 218:	80 e4       	ldi	r24, 0x40	; 64
 21a:	88 83       	st	Y, r24
	MCAL_GPIO_Init(LCD_DATA_PORT,&g_PinConfig);
 21c:	be 01       	movw	r22, r28
 21e:	89 e3       	ldi	r24, 0x39	; 57
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	//Configure Data Bit 7 Pin
	g_PinConfig.GPIO_PinNo = LCD_DATA_PIN_7;
 226:	80 e8       	ldi	r24, 0x80	; 128
 228:	88 83       	st	Y, r24
	MCAL_GPIO_Init(LCD_DATA_PORT,&g_PinConfig);
 22a:	be 01       	movw	r22, r28
 22c:	89 e3       	ldi	r24, 0x39	; 57
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 72 02 	call	0x4e4	; 0x4e4 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(LCD_DATA_PORT,&g_PinConfig);
	g_PinConfig.GPIO_PinNo = GPIO_PIN_7;
	MCAL_GPIO_Init(LCD_DATA_PORT,&g_PinConfig);
	
	#endif
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <LCD_Kick>:
 * Disable EN and wait to Enable EN again to send(Kick) data correctly
 */
static void LCD_Kick(void){
	
	//Set EN pin
	MCAL_GPIO_WritePin(LCD_CTRL_PORT,LCD_EN_PIN,GPIO_PIN_SET);
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	68 e0       	ldi	r22, 0x08	; 8
 23e:	89 e3       	ldi	r24, 0x39	; 57
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	
	// AC Characteristics : Enable cycle time (R & W ) = 500 ns
	LCD_delay_ms(50);
	
	//Clear EN pin
	MCAL_GPIO_WritePin(LCD_CTRL_PORT,LCD_EN_PIN,GPIO_PIN_CLEAR);
 246:	40 e0       	ldi	r20, 0x00	; 0
 248:	68 e0       	ldi	r22, 0x08	; 8
 24a:	89 e3       	ldi	r24, 0x39	; 57
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
 252:	08 95       	ret

00000254 <LCD_WriteChar>:
	MCAL_GPIO_Init(LCD_DATA_PORT,&g_PinConfig);
	
	#endif
}

static void LCD_WriteChar(const uint8_t c){
 254:	cf 93       	push	r28
 256:	c8 2f       	mov	r28, r24
	
	// Data Mode : RS = 1
	MCAL_GPIO_WritePin(LCD_CTRL_PORT,LCD_RS_PIN,GPIO_PIN_SET);
 258:	41 e0       	ldi	r20, 0x01	; 1
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	89 e3       	ldi	r24, 0x39	; 57
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>

	//Check if DATA_BITS_NO configured as FOUR_BIT_MODE
	#if DATA_BITS_NO == FOUR_BIT_MODE
	
	//Send Last four bits
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_4,(c&(1<<4))>>4);
 264:	4c 2f       	mov	r20, r28
 266:	40 71       	andi	r20, 0x10	; 16
 268:	50 e0       	ldi	r21, 0x00	; 0
 26a:	55 95       	asr	r21
 26c:	47 95       	ror	r20
 26e:	55 95       	asr	r21
 270:	47 95       	ror	r20
 272:	55 95       	asr	r21
 274:	47 95       	ror	r20
 276:	55 95       	asr	r21
 278:	47 95       	ror	r20
 27a:	60 e1       	ldi	r22, 0x10	; 16
 27c:	89 e3       	ldi	r24, 0x39	; 57
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_5,(c&(1<<5))>>5);
 284:	4c 2f       	mov	r20, r28
 286:	40 72       	andi	r20, 0x20	; 32
 288:	50 e0       	ldi	r21, 0x00	; 0
 28a:	55 95       	asr	r21
 28c:	47 95       	ror	r20
 28e:	55 95       	asr	r21
 290:	47 95       	ror	r20
 292:	55 95       	asr	r21
 294:	47 95       	ror	r20
 296:	55 95       	asr	r21
 298:	47 95       	ror	r20
 29a:	55 95       	asr	r21
 29c:	47 95       	ror	r20
 29e:	60 e2       	ldi	r22, 0x20	; 32
 2a0:	89 e3       	ldi	r24, 0x39	; 57
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_6,(c&(1<<6))>>6);
 2a8:	4c 2f       	mov	r20, r28
 2aa:	40 74       	andi	r20, 0x40	; 64
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	04 2e       	mov	r0, r20
 2b0:	45 2f       	mov	r20, r21
 2b2:	00 0c       	add	r0, r0
 2b4:	44 1f       	adc	r20, r20
 2b6:	55 0b       	sbc	r21, r21
 2b8:	00 0c       	add	r0, r0
 2ba:	44 1f       	adc	r20, r20
 2bc:	55 1f       	adc	r21, r21
 2be:	60 e4       	ldi	r22, 0x40	; 64
 2c0:	89 e3       	ldi	r24, 0x39	; 57
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_7,(c&(1<<7))>>7);
 2c8:	4c 2f       	mov	r20, r28
 2ca:	44 1f       	adc	r20, r20
 2cc:	44 27       	eor	r20, r20
 2ce:	44 1f       	adc	r20, r20
 2d0:	60 e8       	ldi	r22, 0x80	; 128
 2d2:	89 e3       	ldi	r24, 0x39	; 57
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	LCD_Kick();
 2da:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_Kick>
	
	//Send First four bits
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_4,(c&(1<<0))>>0);
 2de:	4c 2f       	mov	r20, r28
 2e0:	41 70       	andi	r20, 0x01	; 1
 2e2:	60 e1       	ldi	r22, 0x10	; 16
 2e4:	89 e3       	ldi	r24, 0x39	; 57
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_5,(c&(1<<1))>>1);
 2ec:	4c 2f       	mov	r20, r28
 2ee:	42 70       	andi	r20, 0x02	; 2
 2f0:	50 e0       	ldi	r21, 0x00	; 0
 2f2:	55 95       	asr	r21
 2f4:	47 95       	ror	r20
 2f6:	60 e2       	ldi	r22, 0x20	; 32
 2f8:	89 e3       	ldi	r24, 0x39	; 57
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_6,(c&(1<<2))>>2);
 300:	4c 2f       	mov	r20, r28
 302:	44 70       	andi	r20, 0x04	; 4
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	55 95       	asr	r21
 308:	47 95       	ror	r20
 30a:	55 95       	asr	r21
 30c:	47 95       	ror	r20
 30e:	60 e4       	ldi	r22, 0x40	; 64
 310:	89 e3       	ldi	r24, 0x39	; 57
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_7,(c&(1<<3))>>3);
 318:	c8 70       	andi	r28, 0x08	; 8
 31a:	4c 2f       	mov	r20, r28
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	55 95       	asr	r21
 320:	47 95       	ror	r20
 322:	55 95       	asr	r21
 324:	47 95       	ror	r20
 326:	55 95       	asr	r21
 328:	47 95       	ror	r20
 32a:	60 e8       	ldi	r22, 0x80	; 128
 32c:	89 e3       	ldi	r24, 0x39	; 57
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	LCD_Kick();
 334:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_Kick>
	MCAL_GPIO_WritePort(LCD_DATA_PORT,c);
	LCD_Kick();
	
	#endif

}
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <HAL_LCD_WriteCommand>:
* @retval 			- None.
*
* Note				- 
*
*/
void HAL_LCD_WriteCommand(uint8_t command){
 33c:	cf 93       	push	r28
 33e:	c8 2f       	mov	r28, r24
	
	// Command Mode : RS = 0
	MCAL_GPIO_WritePin(LCD_CTRL_PORT,LCD_RS_PIN,GPIO_PIN_CLEAR);
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	62 e0       	ldi	r22, 0x02	; 2
 344:	89 e3       	ldi	r24, 0x39	; 57
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	
	//Check if DATA_BITS_NO configured as FOUR_BIT_MODE
	#if DATA_BITS_NO == FOUR_BIT_MODE
	
	//Send Last four bits
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_4,(command&(1<<4))>>4);
 34c:	4c 2f       	mov	r20, r28
 34e:	40 71       	andi	r20, 0x10	; 16
 350:	50 e0       	ldi	r21, 0x00	; 0
 352:	55 95       	asr	r21
 354:	47 95       	ror	r20
 356:	55 95       	asr	r21
 358:	47 95       	ror	r20
 35a:	55 95       	asr	r21
 35c:	47 95       	ror	r20
 35e:	55 95       	asr	r21
 360:	47 95       	ror	r20
 362:	60 e1       	ldi	r22, 0x10	; 16
 364:	89 e3       	ldi	r24, 0x39	; 57
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_5,(command&(1<<5))>>5);
 36c:	4c 2f       	mov	r20, r28
 36e:	40 72       	andi	r20, 0x20	; 32
 370:	50 e0       	ldi	r21, 0x00	; 0
 372:	55 95       	asr	r21
 374:	47 95       	ror	r20
 376:	55 95       	asr	r21
 378:	47 95       	ror	r20
 37a:	55 95       	asr	r21
 37c:	47 95       	ror	r20
 37e:	55 95       	asr	r21
 380:	47 95       	ror	r20
 382:	55 95       	asr	r21
 384:	47 95       	ror	r20
 386:	60 e2       	ldi	r22, 0x20	; 32
 388:	89 e3       	ldi	r24, 0x39	; 57
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_6,(command&(1<<6))>>6);
 390:	4c 2f       	mov	r20, r28
 392:	40 74       	andi	r20, 0x40	; 64
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	04 2e       	mov	r0, r20
 398:	45 2f       	mov	r20, r21
 39a:	00 0c       	add	r0, r0
 39c:	44 1f       	adc	r20, r20
 39e:	55 0b       	sbc	r21, r21
 3a0:	00 0c       	add	r0, r0
 3a2:	44 1f       	adc	r20, r20
 3a4:	55 1f       	adc	r21, r21
 3a6:	60 e4       	ldi	r22, 0x40	; 64
 3a8:	89 e3       	ldi	r24, 0x39	; 57
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_7,(command&(1<<7))>>7);
 3b0:	4c 2f       	mov	r20, r28
 3b2:	44 1f       	adc	r20, r20
 3b4:	44 27       	eor	r20, r20
 3b6:	44 1f       	adc	r20, r20
 3b8:	60 e8       	ldi	r22, 0x80	; 128
 3ba:	89 e3       	ldi	r24, 0x39	; 57
 3bc:	90 e0       	ldi	r25, 0x00	; 0
 3be:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	LCD_Kick();
 3c2:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_Kick>
	
	//Send First four bits
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_4,(command&(1<<0))>>0);
 3c6:	4c 2f       	mov	r20, r28
 3c8:	41 70       	andi	r20, 0x01	; 1
 3ca:	60 e1       	ldi	r22, 0x10	; 16
 3cc:	89 e3       	ldi	r24, 0x39	; 57
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_5,(command&(1<<1))>>1);
 3d4:	4c 2f       	mov	r20, r28
 3d6:	42 70       	andi	r20, 0x02	; 2
 3d8:	50 e0       	ldi	r21, 0x00	; 0
 3da:	55 95       	asr	r21
 3dc:	47 95       	ror	r20
 3de:	60 e2       	ldi	r22, 0x20	; 32
 3e0:	89 e3       	ldi	r24, 0x39	; 57
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_6,(command&(1<<2))>>2);
 3e8:	4c 2f       	mov	r20, r28
 3ea:	44 70       	andi	r20, 0x04	; 4
 3ec:	50 e0       	ldi	r21, 0x00	; 0
 3ee:	55 95       	asr	r21
 3f0:	47 95       	ror	r20
 3f2:	55 95       	asr	r21
 3f4:	47 95       	ror	r20
 3f6:	60 e4       	ldi	r22, 0x40	; 64
 3f8:	89 e3       	ldi	r24, 0x39	; 57
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_DATA_PORT,LCD_DATA_PIN_7,(command&(1<<3))>>3);
 400:	c8 70       	andi	r28, 0x08	; 8
 402:	4c 2f       	mov	r20, r28
 404:	50 e0       	ldi	r21, 0x00	; 0
 406:	55 95       	asr	r21
 408:	47 95       	ror	r20
 40a:	55 95       	asr	r21
 40c:	47 95       	ror	r20
 40e:	55 95       	asr	r21
 410:	47 95       	ror	r20
 412:	60 e8       	ldi	r22, 0x80	; 128
 414:	89 e3       	ldi	r24, 0x39	; 57
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 9d 02 	call	0x53a	; 0x53a <MCAL_GPIO_WritePin>
	LCD_Kick();
 41c:	0e 94 1d 01 	call	0x23a	; 0x23a <LCD_Kick>
	MCAL_GPIO_WritePort(LCD_DATA_PORT,command);
	LCD_Kick();
	
	#endif
	
}
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <HAL_LCD_Init>:
*
*/
void HAL_LCD_Init(void){
	
	//Initialize LCD GPIO Connection
	LCD_GPIO_Init();
 424:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_GPIO_Init>
	
	//Check if DATA_BITS_NO configured as FOUR_BIT_MODE
	#if DATA_BITS_NO == FOUR_BIT_MODE
	
	HAL_LCD_WriteCommand(LCD_CMD_GO_TO_HOME);
 428:	82 e0       	ldi	r24, 0x02	; 2
 42a:	0e 94 9e 01 	call	0x33c	; 0x33c <HAL_LCD_WriteCommand>
	HAL_LCD_WriteCommand(LCD_CMD_FUNCTION_4BIT_2LINES);
 42e:	88 e2       	ldi	r24, 0x28	; 40
 430:	0e 94 9e 01 	call	0x33c	; 0x33c <HAL_LCD_WriteCommand>
	
	HAL_LCD_WriteCommand(LCD_CMD_FUNCTION_8BIT_2LINES);
	
	#endif
	
	HAL_LCD_WriteCommand(LCD_CMD_DISP_ON);
 434:	8c e0       	ldi	r24, 0x0C	; 12
 436:	0e 94 9e 01 	call	0x33c	; 0x33c <HAL_LCD_WriteCommand>
 43a:	08 95       	ret

0000043c <HAL_LCD_ClearScreen>:
*
*/
void HAL_LCD_ClearScreen(void){
	
	//LCD Clear Screen Command
	HAL_LCD_WriteCommand(LCD_CMD_CLEAR_SCREEN);
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	0e 94 9e 01 	call	0x33c	; 0x33c <HAL_LCD_WriteCommand>
	//Reset LCD_AXIS
	g_LCD_X = LCD_X_RESET_VALUE;
 442:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <g_LCD_X>
	g_LCD_Y = LCD_Y_RESET_VALUE;
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 44c:	08 95       	ret

0000044e <HAL_LCD_GoToXY>:
*
* Note				- This API would work only for 16x2 LCD only.
*
*/
void HAL_LCD_GoToXY(uint8_t line, uint8_t position)
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	c8 2f       	mov	r28, r24
 454:	d6 2f       	mov	r29, r22
	if (line == 1)
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	31 f4       	brne	.+12     	; 0x466 <HAL_LCD_GoToXY+0x18>
	{
		if (position < 16 && position >= 0)
 45a:	60 31       	cpi	r22, 0x10	; 16
 45c:	20 f4       	brcc	.+8      	; 0x466 <HAL_LCD_GoToXY+0x18>
		{
			HAL_LCD_WriteCommand(LCD_CMD_BEGIN_AT_FIRST_ROW + position);
 45e:	80 e8       	ldi	r24, 0x80	; 128
 460:	86 0f       	add	r24, r22
 462:	0e 94 9e 01 	call	0x33c	; 0x33c <HAL_LCD_WriteCommand>
		}
	}
	if (line == 2)
 466:	c2 30       	cpi	r28, 0x02	; 2
 468:	31 f4       	brne	.+12     	; 0x476 <HAL_LCD_GoToXY+0x28>
	{
		if (position < 16 && position >= 0)
 46a:	d0 31       	cpi	r29, 0x10	; 16
 46c:	20 f4       	brcc	.+8      	; 0x476 <HAL_LCD_GoToXY+0x28>
		{
			HAL_LCD_WriteCommand(LCD_CMD_BEGIN_AT_SECOND_ROW + position);
 46e:	80 ec       	ldi	r24, 0xC0	; 192
 470:	8d 0f       	add	r24, r29
 472:	0e 94 9e 01 	call	0x33c	; 0x33c <HAL_LCD_WriteCommand>
		}
	}
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <HAL_LCD_WriteChar>:
* @retval 			- None.
*
* Note				-
*
*/
void HAL_LCD_WriteChar(const uint8_t c){
 47c:	cf 93       	push	r28
 47e:	c8 2f       	mov	r28, r24
	
	if(g_LCD_X > LCD_X_MAX){
 480:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <g_LCD_X>
 484:	80 31       	cpi	r24, 0x10	; 16
 486:	90 f0       	brcs	.+36     	; 0x4ac <HAL_LCD_WriteChar+0x30>
		g_LCD_X = LCD_X_RESET_VALUE;
 488:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <g_LCD_X>
		if(g_LCD_Y == LCD_Y_MAX){
 48c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 490:	82 30       	cpi	r24, 0x02	; 2
 492:	31 f4       	brne	.+12     	; 0x4a0 <HAL_LCD_WriteChar+0x24>
			g_LCD_Y = LCD_Y_RESET_VALUE;
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			HAL_LCD_ClearScreen();
 49a:	0e 94 1e 02 	call	0x43c	; 0x43c <HAL_LCD_ClearScreen>
			return;
 49e:	0e c0       	rjmp	.+28     	; 0x4bc <HAL_LCD_WriteChar+0x40>
		}
		else{
			g_LCD_Y++;
 4a0:	8f 5f       	subi	r24, 0xFF	; 255
 4a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			HAL_LCD_GoToXY(g_LCD_Y,g_LCD_X);
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	0e 94 27 02 	call	0x44e	; 0x44e <HAL_LCD_GoToXY>
		}
	}
	
	LCD_WriteChar(c);
 4ac:	8c 2f       	mov	r24, r28
 4ae:	0e 94 2a 01 	call	0x254	; 0x254 <LCD_WriteChar>
	g_LCD_X++;
 4b2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <g_LCD_X>
 4b6:	8f 5f       	subi	r24, 0xFF	; 255
 4b8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <g_LCD_X>
	
}
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <main>:

uint8_t CharToPrint;

int main(void)
{
	HAL_LCD_Init();
 4c0:	0e 94 12 02 	call	0x424	; 0x424 <HAL_LCD_Init>
	HAL_KEYPAD_Init();
 4c4:	0e 94 62 00 	call	0xc4	; 0xc4 <HAL_KEYPAD_Init>
	
    /* Replace with your application code */
    while (1) 
    {
		CharToPrint = HAL_KEYPAD_GetButtonPressed();
 4c8:	0e 94 a7 00 	call	0x14e	; 0x14e <HAL_KEYPAD_GetButtonPressed>
 4cc:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <CharToPrint>
		
		switch(CharToPrint){
 4d0:	88 23       	and	r24, r24
 4d2:	d1 f3       	breq	.-12     	; 0x4c8 <main+0x8>
 4d4:	8f 33       	cpi	r24, 0x3F	; 63
 4d6:	19 f4       	brne	.+6      	; 0x4de <main+0x1e>
			case KEYPAD_BUTTON_NOT_PRESSED:
				break;
			case '?':
				HAL_LCD_ClearScreen();
 4d8:	0e 94 1e 02 	call	0x43c	; 0x43c <HAL_LCD_ClearScreen>
				break;
 4dc:	f5 cf       	rjmp	.-22     	; 0x4c8 <main+0x8>
			default:
				HAL_LCD_WriteChar(CharToPrint);
 4de:	0e 94 3e 02 	call	0x47c	; 0x47c <HAL_LCD_WriteChar>
				break;
 4e2:	f2 cf       	rjmp	.-28     	; 0x4c8 <main+0x8>

000004e4 <MCAL_GPIO_Init>:
uint8_t MCAL_GPIO_ReadPort(GPIO_Typedef* GPIOx_Ptr){

	//Return the whole port data
	return (uint8_t)(GPIOx_Ptr->PIN & 0xFF);

}
 4e4:	fc 01       	movw	r30, r24
 4e6:	db 01       	movw	r26, r22
 4e8:	11 96       	adiw	r26, 0x01	; 1
 4ea:	8c 91       	ld	r24, X
 4ec:	11 97       	sbiw	r26, 0x01	; 1
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	79 f0       	breq	.+30     	; 0x510 <MCAL_GPIO_Init+0x2c>
 4f2:	18 f0       	brcs	.+6      	; 0x4fa <MCAL_GPIO_Init+0x16>
 4f4:	82 30       	cpi	r24, 0x02	; 2
 4f6:	b1 f0       	breq	.+44     	; 0x524 <MCAL_GPIO_Init+0x40>
 4f8:	08 95       	ret
 4fa:	91 81       	ldd	r25, Z+1	; 0x01
 4fc:	8c 91       	ld	r24, X
 4fe:	80 95       	com	r24
 500:	89 23       	and	r24, r25
 502:	81 83       	std	Z+1, r24	; 0x01
 504:	92 81       	ldd	r25, Z+2	; 0x02
 506:	8c 91       	ld	r24, X
 508:	80 95       	com	r24
 50a:	89 23       	and	r24, r25
 50c:	82 83       	std	Z+2, r24	; 0x02
 50e:	08 95       	ret
 510:	91 81       	ldd	r25, Z+1	; 0x01
 512:	8c 91       	ld	r24, X
 514:	80 95       	com	r24
 516:	89 23       	and	r24, r25
 518:	81 83       	std	Z+1, r24	; 0x01
 51a:	92 81       	ldd	r25, Z+2	; 0x02
 51c:	8c 91       	ld	r24, X
 51e:	89 2b       	or	r24, r25
 520:	82 83       	std	Z+2, r24	; 0x02
 522:	08 95       	ret
 524:	91 81       	ldd	r25, Z+1	; 0x01
 526:	8c 91       	ld	r24, X
 528:	89 2b       	or	r24, r25
 52a:	81 83       	std	Z+1, r24	; 0x01
 52c:	08 95       	ret

0000052e <MCAL_GPIO_ReadPin>:
 52e:	fc 01       	movw	r30, r24
 530:	80 81       	ld	r24, Z
 532:	86 23       	and	r24, r22
 534:	09 f0       	breq	.+2      	; 0x538 <MCAL_GPIO_ReadPin+0xa>
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	08 95       	ret

0000053a <MCAL_GPIO_WritePin>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_WritePin(GPIO_Typedef* GPIOx_Ptr, uint8_t PinNo, uint8_t PinValue){
 53a:	fc 01       	movw	r30, r24

	//Check if sent pin state is one.
	if(PinValue == GPIO_PIN_SET){
 53c:	41 30       	cpi	r20, 0x01	; 1
 53e:	21 f4       	brne	.+8      	; 0x548 <MCAL_GPIO_WritePin+0xe>
		//Pin state required is set.
		GPIOx_Ptr->PORT |=  PinNo;
 540:	82 81       	ldd	r24, Z+2	; 0x02
 542:	68 2b       	or	r22, r24
 544:	62 83       	std	Z+2, r22	; 0x02
 546:	08 95       	ret

	//Check if sent pin state is zero.
	else
	{
		//Pin state required is cleared.
		GPIOx_Ptr->PORT &= ~PinNo;
 548:	92 81       	ldd	r25, Z+2	; 0x02
 54a:	60 95       	com	r22
 54c:	69 23       	and	r22, r25
 54e:	62 83       	std	Z+2, r22	; 0x02
 550:	08 95       	ret

00000552 <_exit>:
 552:	f8 94       	cli

00000554 <__stop_program>:
 554:	ff cf       	rjmp	.-2      	; 0x554 <__stop_program>
