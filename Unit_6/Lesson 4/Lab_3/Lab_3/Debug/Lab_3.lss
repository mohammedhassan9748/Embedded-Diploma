
Lab_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000170  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e8  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000059c  00000000  00000000  00000960  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030d  00000000  00000000  00000efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000375  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001649  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001823  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_2>
   c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ad 00 	call	0x15a	; 0x15a <main>
  64:	0c 94 b6 00 	jmp	0x16c	; 0x16c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
    {
		PORTD &= ~(0b111 << 5);
    }
}

ISR(INT0_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	8f 93       	push	r24
  7a:	9f 93       	push	r25
	PORTD |= (1<<PIND5);
  7c:	82 b3       	in	r24, 0x12	; 18
  7e:	80 62       	ori	r24, 0x20	; 32
  80:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	2f e3       	ldi	r18, 0x3F	; 63
  84:	8d e0       	ldi	r24, 0x0D	; 13
  86:	93 e0       	ldi	r25, 0x03	; 3
  88:	21 50       	subi	r18, 0x01	; 1
  8a:	80 40       	sbci	r24, 0x00	; 0
  8c:	90 40       	sbci	r25, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <__vector_1+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <__vector_1+0x26>
  92:	00 00       	nop
	_delay_ms(1000);
	PORTD  &= ~(1<<PIND5);
  94:	82 b3       	in	r24, 0x12	; 18
  96:	8f 7d       	andi	r24, 0xDF	; 223
  98:	82 bb       	out	0x12, r24	; 18
}
  9a:	9f 91       	pop	r25
  9c:	8f 91       	pop	r24
  9e:	2f 91       	pop	r18
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <__vector_2>:

ISR(INT1_vect){
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
	PORTD |= (1<<PIND6);
  ba:	82 b3       	in	r24, 0x12	; 18
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	82 bb       	out	0x12, r24	; 18
  c0:	2f e3       	ldi	r18, 0x3F	; 63
  c2:	8d e0       	ldi	r24, 0x0D	; 13
  c4:	93 e0       	ldi	r25, 0x03	; 3
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <__vector_2+0x1c>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <__vector_2+0x26>
  d0:	00 00       	nop
	_delay_ms(1000);
	PORTD  &= ~(1<<PIND6);
  d2:	82 b3       	in	r24, 0x12	; 18
  d4:	8f 7b       	andi	r24, 0xBF	; 191
  d6:	82 bb       	out	0x12, r24	; 18
}
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	2f 91       	pop	r18
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <__vector_3>:

ISR(INT2_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	2f 93       	push	r18
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
	PORTD |= (1<<PIND7);
  f8:	82 b3       	in	r24, 0x12	; 18
  fa:	80 68       	ori	r24, 0x80	; 128
  fc:	82 bb       	out	0x12, r24	; 18
  fe:	2f e3       	ldi	r18, 0x3F	; 63
 100:	8d e0       	ldi	r24, 0x0D	; 13
 102:	93 e0       	ldi	r25, 0x03	; 3
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <__vector_3+0x1c>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <__vector_3+0x26>
 10e:	00 00       	nop
	_delay_ms(1000);
	PORTD  &= ~(1<<PIND7);
 110:	82 b3       	in	r24, 0x12	; 18
 112:	8f 77       	andi	r24, 0x7F	; 127
 114:	82 bb       	out	0x12, r24	; 18
}
 116:	9f 91       	pop	r25
 118:	8f 91       	pop	r24
 11a:	2f 91       	pop	r18
 11c:	0f 90       	pop	r0
 11e:	0f be       	out	0x3f, r0	; 63
 120:	0f 90       	pop	r0
 122:	1f 90       	pop	r1
 124:	18 95       	reti

00000126 <GPIO_Init>:

void GPIO_Init(void){
	//Make PD2,PD3 and PB2 Inputs
	DDRD &= ~(1<<PIND2); 
 126:	81 b3       	in	r24, 0x11	; 17
 128:	8b 7f       	andi	r24, 0xFB	; 251
 12a:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1<<PIND3);
 12c:	81 b3       	in	r24, 0x11	; 17
 12e:	87 7f       	andi	r24, 0xF7	; 247
 130:	81 bb       	out	0x11, r24	; 17
	DDRB &= ~(1<<PINB2);
 132:	87 b3       	in	r24, 0x17	; 23
 134:	8b 7f       	andi	r24, 0xFB	; 251
 136:	87 bb       	out	0x17, r24	; 23
	
	//Make PD5,PD6 and PD7 Outputs
	DDRD |= (1<<PIND5) | (1<<PIND6) | (1<<PIND7);
 138:	81 b3       	in	r24, 0x11	; 17
 13a:	80 6e       	ori	r24, 0xE0	; 224
 13c:	81 bb       	out	0x11, r24	; 17
	
	//Clear LEDs
	PORTD &= ~(0b111 << 5);
 13e:	82 b3       	in	r24, 0x12	; 18
 140:	8f 71       	andi	r24, 0x1F	; 31
 142:	82 bb       	out	0x12, r24	; 18
 144:	08 95       	ret

00000146 <EXTI_Init>:
}

void EXTI_Init(void){
	//Make PD2,PD3 and PB2 Rising Edge Triggered
	MCUCR |= (1<<ISC00) | (1<<ISC01) | (1<<ISC10) | (1<<ISC11);
 146:	85 b7       	in	r24, 0x35	; 53
 148:	8f 60       	ori	r24, 0x0F	; 15
 14a:	85 bf       	out	0x35, r24	; 53
	MCUCSR |= (1<<ISC2);
 14c:	84 b7       	in	r24, 0x34	; 52
 14e:	80 64       	ori	r24, 0x40	; 64
 150:	84 bf       	out	0x34, r24	; 52
	
	//EXTI Request Enable for INT0, INT1 and INT2
	GICR |= (1<<INT0) | (1<<INT1) | (1<<INT2);
 152:	8b b7       	in	r24, 0x3b	; 59
 154:	80 6e       	ori	r24, 0xE0	; 224
 156:	8b bf       	out	0x3b, r24	; 59
 158:	08 95       	ret

0000015a <main>:
void GPIO_Init(void);
void EXTI_Init(void);

int main(void)
{
	GPIO_Init();
 15a:	0e 94 93 00 	call	0x126	; 0x126 <GPIO_Init>
	EXTI_Init();
 15e:	0e 94 a3 00 	call	0x146	; 0x146 <EXTI_Init>
	sei();
 162:	78 94       	sei
    /* Replace with your application code */
    while (1) 
    {
		PORTD &= ~(0b111 << 5);
 164:	82 b3       	in	r24, 0x12	; 18
 166:	8f 71       	andi	r24, 0x1F	; 31
 168:	82 bb       	out	0x12, r24	; 18
 16a:	fc cf       	rjmp	.-8      	; 0x164 <main+0xa>

0000016c <_exit>:
 16c:	f8 94       	cli

0000016e <__stop_program>:
 16e:	ff cf       	rjmp	.-2      	; 0x16e <__stop_program>
