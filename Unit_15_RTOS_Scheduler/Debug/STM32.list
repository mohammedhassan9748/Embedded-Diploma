
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000167c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080017ac  080017ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017f0  080017f0  000117f8  2**0
                  CONTENTS
  4 .ARM          00000000  080017f0  080017f0  000117f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017f0  080017f8  000117f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017f0  080017f0  000117f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017f4  080017f4  000117f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000117f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000000  080017f8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  080017f8  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000117f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005cf2  00000000  00000000  00011821  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010b0  00000000  00000000  00017513  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001ce8  00000000  00000000  000185c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000438  00000000  00000000  0001a2b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000003e8  00000000  00000000  0001a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000269e  00000000  00000000  0001aad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002bac  00000000  00000000  0001d16e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0001190f  00000000  00000000  0001fd1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00031629  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ebc  00000000  00000000  000316a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001794 	.word	0x08001794

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001794 	.word	0x08001794

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <EXTI0_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void EXTI0_IRQHandler(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<0);
 8000188:	4b05      	ldr	r3, [pc, #20]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018a:	695b      	ldr	r3, [r3, #20]
 800018c:	4a04      	ldr	r2, [pc, #16]	; (80001a0 <EXTI0_IRQHandler+0x1c>)
 800018e:	f043 0301 	orr.w	r3, r3, #1
 8000192:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000194:	4b03      	ldr	r3, [pc, #12]	; (80001a4 <EXTI0_IRQHandler+0x20>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4798      	blx	r3

}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010400 	.word	0x40010400
 80001a4:	2000001c 	.word	0x2000001c

080001a8 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<1);
 80001ac:	4b05      	ldr	r3, [pc, #20]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001ae:	695b      	ldr	r3, [r3, #20]
 80001b0:	4a04      	ldr	r2, [pc, #16]	; (80001c4 <EXTI1_IRQHandler+0x1c>)
 80001b2:	f043 0302 	orr.w	r3, r3, #2
 80001b6:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <EXTI1_IRQHandler+0x20>)
 80001ba:	685b      	ldr	r3, [r3, #4]
 80001bc:	4798      	blx	r3

}
 80001be:	bf00      	nop
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010400 	.word	0x40010400
 80001c8:	2000001c 	.word	0x2000001c

080001cc <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<2);
 80001d0:	4b05      	ldr	r3, [pc, #20]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d2:	695b      	ldr	r3, [r3, #20]
 80001d4:	4a04      	ldr	r2, [pc, #16]	; (80001e8 <EXTI2_IRQHandler+0x1c>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 80001dc:	4b03      	ldr	r3, [pc, #12]	; (80001ec <EXTI2_IRQHandler+0x20>)
 80001de:	689b      	ldr	r3, [r3, #8]
 80001e0:	4798      	blx	r3

}
 80001e2:	bf00      	nop
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	40010400 	.word	0x40010400
 80001ec:	2000001c 	.word	0x2000001c

080001f0 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<3);
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001f6:	695b      	ldr	r3, [r3, #20]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <EXTI3_IRQHandler+0x1c>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[3]();
 8000200:	4b03      	ldr	r3, [pc, #12]	; (8000210 <EXTI3_IRQHandler+0x20>)
 8000202:	68db      	ldr	r3, [r3, #12]
 8000204:	4798      	blx	r3

}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	40010400 	.word	0x40010400
 8000210:	2000001c 	.word	0x2000001c

08000214 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<4);
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <EXTI4_IRQHandler+0x1c>)
 800021e:	f043 0310 	orr.w	r3, r3, #16
 8000222:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[4]();
 8000224:	4b03      	ldr	r3, [pc, #12]	; (8000234 <EXTI4_IRQHandler+0x20>)
 8000226:	691b      	ldr	r3, [r3, #16]
 8000228:	4798      	blx	r3

}
 800022a:	bf00      	nop
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40010400 	.word	0x40010400
 8000234:	2000001c 	.word	0x2000001c

08000238 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); g_IRQ_CallBackPtr[5]();}
 800023c:	4b26      	ldr	r3, [pc, #152]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800023e:	695b      	ldr	r3, [r3, #20]
 8000240:	f003 0320 	and.w	r3, r3, #32
 8000244:	2b00      	cmp	r3, #0
 8000246:	d008      	beq.n	800025a <EXTI9_5_IRQHandler+0x22>
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800024a:	695b      	ldr	r3, [r3, #20]
 800024c:	4a22      	ldr	r2, [pc, #136]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800024e:	f043 0320 	orr.w	r3, r3, #32
 8000252:	6153      	str	r3, [r2, #20]
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000256:	695b      	ldr	r3, [r3, #20]
 8000258:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); g_IRQ_CallBackPtr[6]();}
 800025a:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000262:	2b00      	cmp	r3, #0
 8000264:	d008      	beq.n	8000278 <EXTI9_5_IRQHandler+0x40>
 8000266:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a1b      	ldr	r2, [pc, #108]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000270:	6153      	str	r3, [r2, #20]
 8000272:	4b1a      	ldr	r3, [pc, #104]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000274:	699b      	ldr	r3, [r3, #24]
 8000276:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); g_IRQ_CallBackPtr[7]();}
 8000278:	4b17      	ldr	r3, [pc, #92]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800027a:	695b      	ldr	r3, [r3, #20]
 800027c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000280:	2b00      	cmp	r3, #0
 8000282:	d008      	beq.n	8000296 <EXTI9_5_IRQHandler+0x5e>
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 800028a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800028e:	6153      	str	r3, [r2, #20]
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 8000292:	69db      	ldr	r3, [r3, #28]
 8000294:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); g_IRQ_CallBackPtr[8]();}
 8000296:	4b10      	ldr	r3, [pc, #64]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 8000298:	695b      	ldr	r3, [r3, #20]
 800029a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d008      	beq.n	80002b4 <EXTI9_5_IRQHandler+0x7c>
 80002a2:	4b0d      	ldr	r3, [pc, #52]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002a4:	695b      	ldr	r3, [r3, #20]
 80002a6:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ac:	6153      	str	r3, [r2, #20]
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 80002b0:	6a1b      	ldr	r3, [r3, #32]
 80002b2:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); g_IRQ_CallBackPtr[9]();}
 80002b4:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d008      	beq.n	80002d2 <EXTI9_5_IRQHandler+0x9a>
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <EXTI9_5_IRQHandler+0xa0>)
 80002c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002ca:	6153      	str	r3, [r2, #20]
 80002cc:	4b03      	ldr	r3, [pc, #12]	; (80002dc <EXTI9_5_IRQHandler+0xa4>)
 80002ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d0:	4798      	blx	r3
}
 80002d2:	bf00      	nop
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40010400 	.word	0x40010400
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); g_IRQ_CallBackPtr[10]();}
 80002e4:	4b26      	ldr	r3, [pc, #152]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 80002e6:	695b      	ldr	r3, [r3, #20]
 80002e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d008      	beq.n	8000302 <EXTI15_10_IRQHandler+0x22>
 80002f0:	4b23      	ldr	r3, [pc, #140]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a22      	ldr	r2, [pc, #136]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 80002f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fa:	6153      	str	r3, [r2, #20]
 80002fc:	4b21      	ldr	r3, [pc, #132]	; (8000384 <EXTI15_10_IRQHandler+0xa4>)
 80002fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000300:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); g_IRQ_CallBackPtr[11]();}
 8000302:	4b1f      	ldr	r3, [pc, #124]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800030a:	2b00      	cmp	r3, #0
 800030c:	d008      	beq.n	8000320 <EXTI15_10_IRQHandler+0x40>
 800030e:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a1b      	ldr	r2, [pc, #108]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 8000314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000318:	6153      	str	r3, [r2, #20]
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <EXTI15_10_IRQHandler+0xa4>)
 800031c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800031e:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); g_IRQ_CallBackPtr[12]();}
 8000320:	4b17      	ldr	r3, [pc, #92]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000328:	2b00      	cmp	r3, #0
 800032a:	d008      	beq.n	800033e <EXTI15_10_IRQHandler+0x5e>
 800032c:	4b14      	ldr	r3, [pc, #80]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 800032e:	695b      	ldr	r3, [r3, #20]
 8000330:	4a13      	ldr	r2, [pc, #76]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 8000332:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000336:	6153      	str	r3, [r2, #20]
 8000338:	4b12      	ldr	r3, [pc, #72]	; (8000384 <EXTI15_10_IRQHandler+0xa4>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); g_IRQ_CallBackPtr[13]();}
 800033e:	4b10      	ldr	r3, [pc, #64]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 8000340:	695b      	ldr	r3, [r3, #20]
 8000342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000346:	2b00      	cmp	r3, #0
 8000348:	d008      	beq.n	800035c <EXTI15_10_IRQHandler+0x7c>
 800034a:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a0c      	ldr	r2, [pc, #48]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 8000350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000354:	6153      	str	r3, [r2, #20]
 8000356:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <EXTI15_10_IRQHandler+0xa4>)
 8000358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800035a:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); g_IRQ_CallBackPtr[14]();}
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 800035e:	695b      	ldr	r3, [r3, #20]
 8000360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000364:	2b00      	cmp	r3, #0
 8000366:	d008      	beq.n	800037a <EXTI15_10_IRQHandler+0x9a>
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 800036a:	695b      	ldr	r3, [r3, #20]
 800036c:	4a04      	ldr	r2, [pc, #16]	; (8000380 <EXTI15_10_IRQHandler+0xa0>)
 800036e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000372:	6153      	str	r3, [r2, #20]
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <EXTI15_10_IRQHandler+0xa4>)
 8000376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000378:	4798      	blx	r3
}
 800037a:	bf00      	nop
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40010400 	.word	0x40010400
 8000384:	2000001c 	.word	0x2000001c

08000388 <TIM2_IRQHandler>:
	if(CCRxIndex >= 0 || CCRxIndex < 4)
		return (TimX->CCR[CCRxIndex]);
}

void TIM2_IRQHandler(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	if(TIM2->SR & (1<<0))
 800038c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000390:	691b      	ldr	r3, [r3, #16]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	2b00      	cmp	r3, #0
 8000398:	d012      	beq.n	80003c0 <TIM2_IRQHandler+0x38>
	{
		/*
		 * Stop Counting while handling ISR.
		 */
		CLEAR_BIT(TIM2->CR1,0);
 800039a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003a4:	f023 0301 	bic.w	r3, r3, #1
 80003a8:	6013      	str	r3, [r2, #0]
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM2->SR,0);
 80003aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ae:	691b      	ldr	r3, [r3, #16]
 80003b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b4:	f023 0301 	bic.w	r3, r3, #1
 80003b8:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[0]();
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <TIM2_IRQHandler+0x60>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4798      	blx	r3
	}

	if(TIM2->SR & GPTM_IRQ_EN_TIE)
 80003c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c4:	691b      	ldr	r3, [r3, #16]
 80003c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d00a      	beq.n	80003e4 <TIM2_IRQHandler+0x5c>
	{
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM2->SR,6);
 80003ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003dc:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[0]();
 80003de:	4b02      	ldr	r3, [pc, #8]	; (80003e8 <TIM2_IRQHandler+0x60>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4798      	blx	r3
	}
}
 80003e4:	bf00      	nop
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000058 	.word	0x20000058

080003ec <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
	if(TIM3->SR & (1<<0))
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <TIM3_IRQHandler+0x50>)
 80003f2:	691b      	ldr	r3, [r3, #16]
 80003f4:	f003 0301 	and.w	r3, r3, #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d00e      	beq.n	800041a <TIM3_IRQHandler+0x2e>
	{
		/*
		 * Stop Counting while handling ISR.
		 */
		CLEAR_BIT(TIM3->CR1,0);
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <TIM3_IRQHandler+0x50>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a0e      	ldr	r2, [pc, #56]	; (800043c <TIM3_IRQHandler+0x50>)
 8000402:	f023 0301 	bic.w	r3, r3, #1
 8000406:	6013      	str	r3, [r2, #0]
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM3->SR,0);
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <TIM3_IRQHandler+0x50>)
 800040a:	691b      	ldr	r3, [r3, #16]
 800040c:	4a0b      	ldr	r2, [pc, #44]	; (800043c <TIM3_IRQHandler+0x50>)
 800040e:	f023 0301 	bic.w	r3, r3, #1
 8000412:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[1]();
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <TIM3_IRQHandler+0x54>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	4798      	blx	r3
	}

	if(TIM3->SR & GPTM_IRQ_EN_TIE)
 800041a:	4b08      	ldr	r3, [pc, #32]	; (800043c <TIM3_IRQHandler+0x50>)
 800041c:	691b      	ldr	r3, [r3, #16]
 800041e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000422:	2b00      	cmp	r3, #0
 8000424:	d008      	beq.n	8000438 <TIM3_IRQHandler+0x4c>
	{
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM3->SR,6);
 8000426:	4b05      	ldr	r3, [pc, #20]	; (800043c <TIM3_IRQHandler+0x50>)
 8000428:	691b      	ldr	r3, [r3, #16]
 800042a:	4a04      	ldr	r2, [pc, #16]	; (800043c <TIM3_IRQHandler+0x50>)
 800042c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000430:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[1]();
 8000432:	4b03      	ldr	r3, [pc, #12]	; (8000440 <TIM3_IRQHandler+0x54>)
 8000434:	685b      	ldr	r3, [r3, #4]
 8000436:	4798      	blx	r3
	}
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40000400 	.word	0x40000400
 8000440:	20000058 	.word	0x20000058

08000444 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
	if(TIM4->SR & (1<<0))
 8000448:	4b12      	ldr	r3, [pc, #72]	; (8000494 <TIM4_IRQHandler+0x50>)
 800044a:	691b      	ldr	r3, [r3, #16]
 800044c:	f003 0301 	and.w	r3, r3, #1
 8000450:	2b00      	cmp	r3, #0
 8000452:	d00e      	beq.n	8000472 <TIM4_IRQHandler+0x2e>
	{
		/*
		 * Stop Counting while handling ISR.
		 */
		CLEAR_BIT(TIM4->CR1,0);
 8000454:	4b0f      	ldr	r3, [pc, #60]	; (8000494 <TIM4_IRQHandler+0x50>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a0e      	ldr	r2, [pc, #56]	; (8000494 <TIM4_IRQHandler+0x50>)
 800045a:	f023 0301 	bic.w	r3, r3, #1
 800045e:	6013      	str	r3, [r2, #0]
		/*
		 * Clear the UIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM4->SR,0);
 8000460:	4b0c      	ldr	r3, [pc, #48]	; (8000494 <TIM4_IRQHandler+0x50>)
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	4a0b      	ldr	r2, [pc, #44]	; (8000494 <TIM4_IRQHandler+0x50>)
 8000466:	f023 0301 	bic.w	r3, r3, #1
 800046a:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[2]();
 800046c:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <TIM4_IRQHandler+0x54>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	4798      	blx	r3
	}

	if(TIM4->SR & GPTM_IRQ_EN_TIE)
 8000472:	4b08      	ldr	r3, [pc, #32]	; (8000494 <TIM4_IRQHandler+0x50>)
 8000474:	691b      	ldr	r3, [r3, #16]
 8000476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800047a:	2b00      	cmp	r3, #0
 800047c:	d008      	beq.n	8000490 <TIM4_IRQHandler+0x4c>
	{
		/*
		 * Clear the TIF flag by software to avoid re-entry of the ISR.
		 */
		CLEAR_BIT(TIM4->SR,6);
 800047e:	4b05      	ldr	r3, [pc, #20]	; (8000494 <TIM4_IRQHandler+0x50>)
 8000480:	691b      	ldr	r3, [r3, #16]
 8000482:	4a04      	ldr	r2, [pc, #16]	; (8000494 <TIM4_IRQHandler+0x50>)
 8000484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000488:	6113      	str	r3, [r2, #16]
		/*
		 * Calling ISR call back function that takes place in the application layer.
		 */
		g_IRQ_CallBackPtr[2]();
 800048a:	4b03      	ldr	r3, [pc, #12]	; (8000498 <TIM4_IRQHandler+0x54>)
 800048c:	689b      	ldr	r3, [r3, #8]
 800048e:	4798      	blx	r3
	}
}
 8000490:	bf00      	nop
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40000800 	.word	0x40000800
 8000498:	20000058 	.word	0x20000058

0800049c <I2C1_EV_IRQHandler>:
										ISRs Definitions
-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
======================================================================================================*/

void I2C1_EV_IRQHandler(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
	//vuint32_t_ Dummy_Read = 0; // Volatile for compiler optimization
	vuint32_t_ dummy = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	603b      	str	r3, [r7, #0]

	/* Interrupt handling for both master and slave mode of the device */
	uint32_t_ Temp_1, Temp_2, Temp_3;

	Temp_1 = (I2C1->CR2 & (I2C_IRQ_ITEVFEN));	// Event interrupt enable
 80004a6:	4b39      	ldr	r3, [pc, #228]	; (800058c <I2C1_EV_IRQHandler+0xf0>)
 80004a8:	685b      	ldr	r3, [r3, #4]
 80004aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80004ae:	60fb      	str	r3, [r7, #12]
	Temp_2 = (I2C1->CR2 & (I2C_IRQ_IITBUFEN));	// Buffer interrupt enable
 80004b0:	4b36      	ldr	r3, [pc, #216]	; (800058c <I2C1_EV_IRQHandler+0xf0>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004b8:	60bb      	str	r3, [r7, #8]
	Temp_3 = (I2C1->SR1 & (I2C_Flag_STOPF));	// Stop detection (slave mode)
 80004ba:	4b34      	ldr	r3, [pc, #208]	; (800058c <I2C1_EV_IRQHandler+0xf0>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f003 0304 	and.w	r3, r3, #4
 80004c2:	607b      	str	r3, [r7, #4]

	/* Handle Stop Condition Event */
	if(Temp_1 && Temp_3)
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d00a      	beq.n	80004e0 <I2C1_EV_IRQHandler+0x44>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d007      	beq.n	80004e0 <I2C1_EV_IRQHandler+0x44>
	{
		/* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		 * i have already read SR1 in Temp_3
		 * then next statement i write to CR1
		 */
		I2C1->CR1 |= 0x0000;
 80004d0:	4b2e      	ldr	r3, [pc, #184]	; (800058c <I2C1_EV_IRQHandler+0xf0>)
 80004d2:	4a2e      	ldr	r2, [pc, #184]	; (800058c <I2C1_EV_IRQHandler+0xf0>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	6013      	str	r3, [r2, #0]
		g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_STOPF);
 80004d8:	4b2d      	ldr	r3, [pc, #180]	; (8000590 <I2C1_EV_IRQHandler+0xf4>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2004      	movs	r0, #4
 80004de:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle Received address matched. */
	Temp_3 = (I2C1->SR1 & (I2C_Flag_ADDR));		//ADDR
 80004e0:	4b2a      	ldr	r3, [pc, #168]	; (800058c <I2C1_EV_IRQHandler+0xf0>)
 80004e2:	695b      	ldr	r3, [r3, #20]
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_3)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d00c      	beq.n	800050a <I2C1_EV_IRQHandler+0x6e>
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d009      	beq.n	800050a <I2C1_EV_IRQHandler+0x6e>
		 */
		//Dummy_Read  = I2C1->SR1;
		//Dummy_Read  = I2C1->SR2;

		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <I2C1_EV_IRQHandler+0xf0>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d103      	bne.n	800050a <I2C1_EV_IRQHandler+0x6e>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_ADDR);
 8000502:	4b23      	ldr	r3, [pc, #140]	; (8000590 <I2C1_EV_IRQHandler+0xf4>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2001      	movs	r0, #1
 8000508:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
	Temp_3 = (I2C1->SR1 & (I2C_Flag_TXE));		// TXE
 800050a:	4b20      	ldr	r3, [pc, #128]	; (800058c <I2C1_EV_IRQHandler+0xf0>)
 800050c:	695b      	ldr	r3, [r3, #20]
 800050e:	f003 0307 	and.w	r3, r3, #7
 8000512:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case TXE=1, ITEVTEN=1, ITBUFEN=1
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d015      	beq.n	8000546 <I2C1_EV_IRQHandler+0xaa>
 800051a:	68bb      	ldr	r3, [r7, #8]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d012      	beq.n	8000546 <I2C1_EV_IRQHandler+0xaa>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d00f      	beq.n	8000546 <I2C1_EV_IRQHandler+0xaa>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <I2C1_EV_IRQHandler+0xf0>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800052e:	2b00      	cmp	r3, #0
 8000530:	d109      	bne.n	8000546 <I2C1_EV_IRQHandler+0xaa>
		}
		else
		{
			/* Slave mode */
			/* Check if slave in transmit mode */
			if(I2C1->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 1: Data bytes transmitted
 8000532:	4b16      	ldr	r3, [pc, #88]	; (800058c <I2C1_EV_IRQHandler+0xf0>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800053a:	2b00      	cmp	r3, #0
 800053c:	d003      	beq.n	8000546 <I2C1_EV_IRQHandler+0xaa>
			{
				g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_TxE);
 800053e:	4b14      	ldr	r3, [pc, #80]	; (8000590 <I2C1_EV_IRQHandler+0xf4>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2006      	movs	r0, #6
 8000544:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
	Temp_3 = (I2C1->SR1 & (I2C_Flag_RXNE));		// RXNE
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <I2C1_EV_IRQHandler+0xf0>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	f003 0306 	and.w	r3, r3, #6
 800054e:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d015      	beq.n	8000582 <I2C1_EV_IRQHandler+0xe6>
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d012      	beq.n	8000582 <I2C1_EV_IRQHandler+0xe6>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d00f      	beq.n	8000582 <I2C1_EV_IRQHandler+0xe6>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <I2C1_EV_IRQHandler+0xf0>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800056a:	2b00      	cmp	r3, #0
 800056c:	d109      	bne.n	8000582 <I2C1_EV_IRQHandler+0xe6>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			if(I2C1->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 0: Data bytes received
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <I2C1_EV_IRQHandler+0xf0>)
 8000570:	699b      	ldr	r3, [r3, #24]
 8000572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000576:	2b00      	cmp	r3, #0
 8000578:	d003      	beq.n	8000582 <I2C1_EV_IRQHandler+0xe6>
			{
				g_IRQ_I2C1_Event_CallBackFunction(I2C_Event_IRQ_Src_RxNE);
 800057a:	4b05      	ldr	r3, [pc, #20]	; (8000590 <I2C1_EV_IRQHandler+0xf4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2005      	movs	r0, #5
 8000580:	4798      	blx	r3
			}
		}
	}
	(void)dummy;
 8000582:	683b      	ldr	r3, [r7, #0]

}
 8000584:	bf00      	nop
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40005400 	.word	0x40005400
 8000590:	20000064 	.word	0x20000064

08000594 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
	uint32_t_ temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (I2C1->CR2) & I2C_IRQ_ITERREN;
 800059a:	4b39      	ldr	r3, [pc, #228]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005a2:	607b      	str	r3, [r7, #4]


/***********************Check for Bus error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_BERR);
 80005a4:	4b36      	ldr	r3, [pc, #216]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	f003 0301 	and.w	r3, r3, #1
 80005ac:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2 )
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d00c      	beq.n	80005ce <I2C1_ER_IRQHandler+0x3a>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d009      	beq.n	80005ce <I2C1_ER_IRQHandler+0x3a>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_BERR);
 80005ba:	4b31      	ldr	r3, [pc, #196]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a30      	ldr	r2, [pc, #192]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 80005c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005c4:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
	   g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_BERR);
 80005c6:	4b2f      	ldr	r3, [pc, #188]	; (8000684 <I2C1_ER_IRQHandler+0xf0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2000      	movs	r0, #0
 80005cc:	4798      	blx	r3
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_ARLO);
 80005ce:	4b2c      	ldr	r3, [pc, #176]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f003 0302 	and.w	r3, r3, #2
 80005d6:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d00c      	beq.n	80005f8 <I2C1_ER_IRQHandler+0x64>
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d009      	beq.n	80005f8 <I2C1_ER_IRQHandler+0x64>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_ARLO);
 80005e4:	4b26      	ldr	r3, [pc, #152]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	4a25      	ldr	r2, [pc, #148]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 80005ea:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80005ee:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_ARLO);
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <I2C1_ER_IRQHandler+0xf0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2001      	movs	r0, #1
 80005f6:	4798      	blx	r3

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_AF);
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 80005fa:	695b      	ldr	r3, [r3, #20]
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	2b00      	cmp	r3, #0
 8000606:	d00c      	beq.n	8000622 <I2C1_ER_IRQHandler+0x8e>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d009      	beq.n	8000622 <I2C1_ER_IRQHandler+0x8e>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_AF);
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 8000614:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000618:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_AF);
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <I2C1_ER_IRQHandler+0xf0>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2002      	movs	r0, #2
 8000620:	4798      	blx	r3
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_OVR);
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00c      	beq.n	800064c <I2C1_ER_IRQHandler+0xb8>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d009      	beq.n	800064c <I2C1_ER_IRQHandler+0xb8>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_OVR);
 8000638:	4b11      	ldr	r3, [pc, #68]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4a10      	ldr	r2, [pc, #64]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 800063e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000642:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_OVR);
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <I2C1_ER_IRQHandler+0xf0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2003      	movs	r0, #3
 800064a:	4798      	blx	r3
	}

/***********************Check for Time out error************************************/
	temp1 = (I2C1->SR1) & ( 1<< I2C_Error_IRQ_Src_TIMEOUT);
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	f003 0320 	and.w	r3, r3, #32
 8000654:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00c      	beq.n	8000676 <I2C1_ER_IRQHandler+0xe2>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d009      	beq.n	8000676 <I2C1_ER_IRQHandler+0xe2>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		I2C1->SR1 &= ~( 1 << I2C_Flag_TIMEOUT);
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a06      	ldr	r2, [pc, #24]	; (8000680 <I2C1_ER_IRQHandler+0xec>)
 8000668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800066c:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C1_Error_CallBackFunction(I2C_Error_IRQ_Src_TIMEOUT);
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <I2C1_ER_IRQHandler+0xf0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2005      	movs	r0, #5
 8000674:	4798      	blx	r3
	}
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40005400 	.word	0x40005400
 8000684:	2000006c 	.word	0x2000006c

08000688 <I2C2_EV_IRQHandler>:


void I2C2_EV_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0

	//vuint32_t_ Dummy_Read = 0; // Volatile for compiler optimization
	vuint32_t_ dummy = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]

	/* Interrupt handling for both master and slave mode of the device */
	uint32_t_ Temp_1, Temp_2, Temp_3;

	Temp_1 = (I2C2->CR2 & (I2C_IRQ_ITEVFEN));	// Event interrupt enable
 8000692:	4b39      	ldr	r3, [pc, #228]	; (8000778 <I2C2_EV_IRQHandler+0xf0>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800069a:	60fb      	str	r3, [r7, #12]
	Temp_2 = (I2C2->CR2 & (I2C_IRQ_IITBUFEN));	// Buffer interrupt enable
 800069c:	4b36      	ldr	r3, [pc, #216]	; (8000778 <I2C2_EV_IRQHandler+0xf0>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006a4:	60bb      	str	r3, [r7, #8]
	Temp_3 = (I2C2->SR1 & (I2C_Flag_STOPF));	// Stop detection (slave mode)
 80006a6:	4b34      	ldr	r3, [pc, #208]	; (8000778 <I2C2_EV_IRQHandler+0xf0>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f003 0304 	and.w	r3, r3, #4
 80006ae:	607b      	str	r3, [r7, #4]

	/* Handle Stop Condition Event */
	if(Temp_1 && Temp_3)
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00a      	beq.n	80006cc <I2C2_EV_IRQHandler+0x44>
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d007      	beq.n	80006cc <I2C2_EV_IRQHandler+0x44>
	{
		/* STOPF Cleared by software reading the SR1 register followed by a write in the CR1 register,
		 * i have already read SR1 in Temp_3
		 * then next statement i write to CR1
		 */
		I2C2->CR1 |= 0x0000;
 80006bc:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <I2C2_EV_IRQHandler+0xf0>)
 80006be:	4a2e      	ldr	r2, [pc, #184]	; (8000778 <I2C2_EV_IRQHandler+0xf0>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6013      	str	r3, [r2, #0]
		g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_STOPF);
 80006c4:	4b2d      	ldr	r3, [pc, #180]	; (800077c <I2C2_EV_IRQHandler+0xf4>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	2004      	movs	r0, #4
 80006ca:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle Received address matched. */
	Temp_3 = (I2C2->SR1 & (I2C_Flag_ADDR));		//ADDR
 80006cc:	4b2a      	ldr	r3, [pc, #168]	; (8000778 <I2C2_EV_IRQHandler+0xf0>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_3)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d00c      	beq.n	80006f6 <I2C2_EV_IRQHandler+0x6e>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d009      	beq.n	80006f6 <I2C2_EV_IRQHandler+0x6e>
		 */
		//Dummy_Read  = I2C1->SR1;
		//Dummy_Read  = I2C1->SR2;

		/* Check master mode or slave mode */
		if(I2C2->SR2 & (1<<I2C_Flag_MSL))
 80006e2:	4b25      	ldr	r3, [pc, #148]	; (8000778 <I2C2_EV_IRQHandler+0xf0>)
 80006e4:	699b      	ldr	r3, [r3, #24]
 80006e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d103      	bne.n	80006f6 <I2C2_EV_IRQHandler+0x6e>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_ADDR);
 80006ee:	4b23      	ldr	r3, [pc, #140]	; (800077c <I2C2_EV_IRQHandler+0xf4>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2001      	movs	r0, #1
 80006f4:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle TxE: Data register empty (Master request data from slave)--> slave_transmitter */
	Temp_3 = (I2C2->SR1 & (I2C_Flag_TXE));		// TXE
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <I2C2_EV_IRQHandler+0xf0>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case TXE=1, ITEVTEN=1, ITBUFEN=1
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d015      	beq.n	8000732 <I2C2_EV_IRQHandler+0xaa>
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d012      	beq.n	8000732 <I2C2_EV_IRQHandler+0xaa>
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d00f      	beq.n	8000732 <I2C2_EV_IRQHandler+0xaa>
	{
		/* Check master mode or slave mode */
		if(I2C2->SR2 & (1<<I2C_Flag_MSL))
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <I2C2_EV_IRQHandler+0xf0>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800071a:	2b00      	cmp	r3, #0
 800071c:	d109      	bne.n	8000732 <I2C2_EV_IRQHandler+0xaa>
		}
		else
		{
			/* Slave mode */
			/* Check if slave in transmit mode */
			if(I2C2->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 1: Data bytes transmitted
 800071e:	4b16      	ldr	r3, [pc, #88]	; (8000778 <I2C2_EV_IRQHandler+0xf0>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000726:	2b00      	cmp	r3, #0
 8000728:	d003      	beq.n	8000732 <I2C2_EV_IRQHandler+0xaa>
			{
				g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_TxE);
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <I2C2_EV_IRQHandler+0xf4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2006      	movs	r0, #6
 8000730:	4798      	blx	r3
	}

	/* =============================================================================== */

	/* Handle RxNE: Data register not empty (slave receive data)-->slave_Receiver */
	Temp_3 = (I2C2->SR1 & (I2C_Flag_RXNE));		// RXNE
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <I2C2_EV_IRQHandler+0xf0>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	f003 0306 	and.w	r3, r3, #6
 800073a:	607b      	str	r3, [r7, #4]
	if(Temp_1 && Temp_2 && Temp_3)				// In case RXNE=1, ITEVTEN=1, ITBUFEN=1
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d015      	beq.n	800076e <I2C2_EV_IRQHandler+0xe6>
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d012      	beq.n	800076e <I2C2_EV_IRQHandler+0xe6>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d00f      	beq.n	800076e <I2C2_EV_IRQHandler+0xe6>
	{
		/* Check master mode or slave mode */
		if(I2C1->SR2 & (1<<I2C_Flag_MSL))
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <I2C2_EV_IRQHandler+0xf8>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000756:	2b00      	cmp	r3, #0
 8000758:	d109      	bne.n	800076e <I2C2_EV_IRQHandler+0xe6>
			/* Master mode (Using polling mechanism not interrupt) */
		}
		else
		{
			/* Slave mode */
			if(I2C2->SR2 & (1<<I2C_Flag_TRA))		//TRA: Transmitter/receiver: 0: Data bytes received
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <I2C2_EV_IRQHandler+0xf0>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000762:	2b00      	cmp	r3, #0
 8000764:	d003      	beq.n	800076e <I2C2_EV_IRQHandler+0xe6>
			{
				g_IRQ_I2C2_Event_CallBackFunction(I2C_Event_IRQ_Src_RxNE);
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <I2C2_EV_IRQHandler+0xf4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	2005      	movs	r0, #5
 800076c:	4798      	blx	r3
			}
		}
	}
	(void)dummy;
 800076e:	683b      	ldr	r3, [r7, #0]


}
 8000770:	bf00      	nop
 8000772:	3710      	adds	r7, #16
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40005800 	.word	0x40005800
 800077c:	20000068 	.word	0x20000068
 8000780:	40005400 	.word	0x40005400

08000784 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
	uint32_t_ temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (I2C2->CR2) & I2C_IRQ_ITERREN;
 800078a:	4b39      	ldr	r3, [pc, #228]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000792:	607b      	str	r3, [r7, #4]


/***********************Check for Bus error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_BERR);
 8000794:	4b36      	ldr	r3, [pc, #216]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 8000796:	695b      	ldr	r3, [r3, #20]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2 )
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00c      	beq.n	80007be <I2C2_ER_IRQHandler+0x3a>
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d009      	beq.n	80007be <I2C2_ER_IRQHandler+0x3a>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_BERR);
 80007aa:	4b31      	ldr	r3, [pc, #196]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 80007ac:	695b      	ldr	r3, [r3, #20]
 80007ae:	4a30      	ldr	r2, [pc, #192]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 80007b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007b4:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
	   g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_BERR);
 80007b6:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <I2C2_ER_IRQHandler+0xf0>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2000      	movs	r0, #0
 80007bc:	4798      	blx	r3
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_ARLO);
 80007be:	4b2c      	ldr	r3, [pc, #176]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 80007c0:	695b      	ldr	r3, [r3, #20]
 80007c2:	f003 0302 	and.w	r3, r3, #2
 80007c6:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d00c      	beq.n	80007e8 <I2C2_ER_IRQHandler+0x64>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d009      	beq.n	80007e8 <I2C2_ER_IRQHandler+0x64>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_ARLO);
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 80007d6:	695b      	ldr	r3, [r3, #20]
 80007d8:	4a25      	ldr	r2, [pc, #148]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 80007da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007de:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_ARLO);
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <I2C2_ER_IRQHandler+0xf0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	2001      	movs	r0, #1
 80007e6:	4798      	blx	r3

	}

/***********************Check for ACK failure  error************************************/

	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_AF);
 80007e8:	4b21      	ldr	r3, [pc, #132]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d00c      	beq.n	8000812 <I2C2_ER_IRQHandler+0x8e>
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d009      	beq.n	8000812 <I2C2_ER_IRQHandler+0x8e>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		I2C1->SR2 &= ~( 1 << I2C_Flag_AF);
 80007fe:	4b1e      	ldr	r3, [pc, #120]	; (8000878 <I2C2_ER_IRQHandler+0xf4>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	4a1d      	ldr	r2, [pc, #116]	; (8000878 <I2C2_ER_IRQHandler+0xf4>)
 8000804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000808:	6193      	str	r3, [r2, #24]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_AF);
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <I2C2_ER_IRQHandler+0xf0>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2002      	movs	r0, #2
 8000810:	4798      	blx	r3
	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_OVR);
 8000812:	4b17      	ldr	r3, [pc, #92]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d00c      	beq.n	800083c <I2C2_ER_IRQHandler+0xb8>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d009      	beq.n	800083c <I2C2_ER_IRQHandler+0xb8>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_OVR);
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	4a10      	ldr	r2, [pc, #64]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 800082e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000832:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_OVR);
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <I2C2_ER_IRQHandler+0xf0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2003      	movs	r0, #3
 800083a:	4798      	blx	r3
	}

/***********************Check for Time out error************************************/
	temp1 = (I2C2->SR1) & ( 1<< I2C_Error_IRQ_Src_TIMEOUT);
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 800083e:	695b      	ldr	r3, [r3, #20]
 8000840:	f003 0320 	and.w	r3, r3, #32
 8000844:	603b      	str	r3, [r7, #0]
	if(temp1  && temp2)
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d00c      	beq.n	8000866 <I2C2_ER_IRQHandler+0xe2>
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d009      	beq.n	8000866 <I2C2_ER_IRQHandler+0xe2>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		I2C2->SR1 &= ~( 1 << I2C_Flag_TIMEOUT);
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 8000854:	695b      	ldr	r3, [r3, #20]
 8000856:	4a06      	ldr	r2, [pc, #24]	; (8000870 <I2C2_ER_IRQHandler+0xec>)
 8000858:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800085c:	6153      	str	r3, [r2, #20]

		//Implement the code to notify the application about the error
		g_IRQ_I2C2_Error_CallBackFunction(I2C_Error_IRQ_Src_TIMEOUT);
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <I2C2_ER_IRQHandler+0xf0>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2005      	movs	r0, #5
 8000864:	4798      	blx	r3
	}
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40005800 	.word	0x40005800
 8000874:	20000070 	.word	0x20000070
 8000878:	40005400 	.word	0x40005400

0800087c <SPI1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void SPI1_IRQHandler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000880:	4b02      	ldr	r3, [pc, #8]	; (800088c <SPI1_IRQHandler+0x10>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4798      	blx	r3
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000074 	.word	0x20000074

08000890 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <SPI2_IRQHandler+0x10>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	4798      	blx	r3
}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20000074 	.word	0x20000074

080008a4 <USART1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void USART1_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 80008a8:	4b02      	ldr	r3, [pc, #8]	; (80008b4 <USART1_IRQHandler+0x10>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4798      	blx	r3
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000007c 	.word	0x2000007c

080008b8 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 80008bc:	4b02      	ldr	r3, [pc, #8]	; (80008c8 <USART2_IRQHandler+0x10>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	4798      	blx	r3
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000007c 	.word	0x2000007c

080008cc <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 80008d0:	4b02      	ldr	r3, [pc, #8]	; (80008dc <USART3_IRQHandler+0x10>)
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4798      	blx	r3
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000007c 	.word	0x2000007c

080008e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	; (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0152      	lsls	r2, r2, #5
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	; (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0152      	lsls	r2, r2, #5
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	3b01      	subs	r3, #1
 8000940:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000944:	d301      	bcc.n	800094a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000946:	2301      	movs	r3, #1
 8000948:	e00f      	b.n	800096a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800094a:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <SysTick_Config+0x40>)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000952:	2107      	movs	r1, #7
 8000954:	f04f 30ff 	mov.w	r0, #4294967295
 8000958:	f7ff ffc2 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <SysTick_Config+0x40>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000962:	4b04      	ldr	r3, [pc, #16]	; (8000974 <SysTick_Config+0x40>)
 8000964:	2207      	movs	r2, #7
 8000966:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	e000e010 	.word	0xe000e010

08000978 <HardFault_Handler>:


//==============================================================================

void HardFault_Handler()
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  // Capture HardFault
  while(1);
 800097c:	e7fe      	b.n	800097c <HardFault_Handler+0x4>

0800097e <MemManage_Handler>:
}

void MemManage_Handler()
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  // Capture MemManage
  while(1);
 8000982:	e7fe      	b.n	8000982 <MemManage_Handler+0x4>

08000984 <BusFault_Handler>:
}

void BusFault_Handler()
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  // Capture BusFault
  while(1);
 8000988:	e7fe      	b.n	8000988 <BusFault_Handler+0x4>

0800098a <UsageFault_Handler>:
}

void UsageFault_Handler()
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  // Capture UsageFault
  while(1);
 800098e:	e7fe      	b.n	800098e <UsageFault_Handler+0x4>

08000990 <SVC_Handler>:
}

__attribute((naked)) void SVC_Handler()
{
	__asm("TST LR,#0x4 \n\t"
 8000990:	f01e 0f04 	tst.w	lr, #4
 8000994:	bf0c      	ite	eq
 8000996:	f3ef 8008 	mrseq	r0, MSP
 800099a:	f3ef 8009 	mrsne	r0, PSP
 800099e:	f000 ba21 	b.w	8000de4 <OS_SVC_Services>
			"ITE EQ \n\t"
			"MRSEQ R0,MSP \n\t"
			"MRSNE R0,PSP \n\t"
			"B OS_SVC_Services"
	);
}
 80009a2:	bf00      	nop

080009a4 <SysTick_Handler>:

void SysTick_Handler()
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
	SystickLED^=1;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <SysTick_Handler+0x20>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	f083 0301 	eor.w	r3, r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b04      	ldr	r3, [pc, #16]	; (80009c4 <SysTick_Handler+0x20>)
 80009b4:	701a      	strb	r2, [r3, #0]
	OS_TicksCounted();
 80009b6:	f000 fad3 	bl	8000f60 <OS_TicksCounted>
	OS_UpdateTicks();
 80009ba:	f000 fadf 	bl	8000f7c <OS_UpdateTicks>
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000098 	.word	0x20000098

080009c8 <HW_Init>:


//==============================================================================

void HW_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	/*
	 * Deacrease the PendSV Priority to be less than or equals to the systick timer priority to ensure saftey
	 * of the data of the current running task stack and registers.
	 * Set it by 15 since the systick timer is already 14.
	 * */
	__NVIC_SetPriority(PendSV_IRQn, 15);
 80009cc:	210f      	movs	r1, #15
 80009ce:	f06f 0001 	mvn.w	r0, #1
 80009d2:	f7ff ff85 	bl	80008e0 <__NVIC_SetPriority>

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}

080009da <Start_Ticker>:

void Start_Ticker(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
	 *  X Count = 1 ms
	 *  X = 8000 count
	 *  Therefore Systick Interrupts after 8000 Counts
	 * */

	SysTick_Config(8000);
 80009de:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80009e2:	f7ff ffa7 	bl	8000934 <SysTick_Config>
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}

080009ea <FIFO_Init>:

/*
 * Description : Function to initialize the FIFO Buffer by sending the required buffer and it's size
 * and return the buffer current status.
 */
FIFO_Status_t FIFO_Init(FIFO_t* FifoPtr, fifo_type* Buffer, uint32_t_ Buffer_Size){
 80009ea:	b480      	push	{r7}
 80009ec:	b085      	sub	sp, #20
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]

	/* Check if Sent Buffer exists */
	if(Buffer == NULL_PTR)
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d101      	bne.n	8000a00 <FIFO_Init+0x16>
		return FIFO_NULL;
 80009fc:	2303      	movs	r3, #3
 80009fe:	e00f      	b.n	8000a20 <FIFO_Init+0x36>

	/* Initializing FIFO Buffer */
	FifoPtr->base   = Buffer;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	609a      	str	r2, [r3, #8]
	FifoPtr->tail   = Buffer;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	68ba      	ldr	r2, [r7, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
	FifoPtr->head   = Buffer;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	68ba      	ldr	r2, [r7, #8]
 8000a10:	611a      	str	r2, [r3, #16]
	FifoPtr->length = Buffer_Size;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	601a      	str	r2, [r3, #0]
	FifoPtr->count  = 0;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
	return FIFO_Valid;
 8000a1e:	2302      	movs	r3, #2
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr

08000a2a <FIFO_NotCreated>:

/*
 * Description: Function to check if the required FIFO Buffer is Initialized (Created) or not.
 */
FIFO_Status_t FIFO_NotCreated(FIFO_t* FifoPtr){
 8000a2a:	b480      	push	{r7}
 8000a2c:	b083      	sub	sp, #12
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]

	/* Check if the head or the base pointing to Null_Ptr to assure FIFO creation*/
	if(!FifoPtr->head || !FifoPtr->base || !FifoPtr->tail)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	691b      	ldr	r3, [r3, #16]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d007      	beq.n	8000a4a <FIFO_NotCreated+0x20>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	689b      	ldr	r3, [r3, #8]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d003      	beq.n	8000a4a <FIFO_NotCreated+0x20>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d101      	bne.n	8000a4e <FIFO_NotCreated+0x24>
		return FIFO_NULL;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	e000      	b.n	8000a50 <FIFO_NotCreated+0x26>

	return FIFO_Valid;
 8000a4e:	2302      	movs	r3, #2
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <FIFO_IsFull>:

/*
 * Description: Function to check if the required FIFO Buffer is Full or not.
 */
FIFO_Status_t FIFO_IsFull(FIFO_t* FifoPtr){
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]

	/* Check if Sent FIFO Buffer is created */
	if(FIFO_NotCreated(FifoPtr) == FIFO_NULL)
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ffe1 	bl	8000a2a <FIFO_NotCreated>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d101      	bne.n	8000a72 <FIFO_IsFull+0x18>
			return FIFO_NULL;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	e008      	b.n	8000a84 <FIFO_IsFull+0x2a>

	/* Check if the count value equals to buffer size to assure FIFO is full */
	if(FifoPtr->count == FifoPtr->length)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d101      	bne.n	8000a82 <FIFO_IsFull+0x28>
			return FIFO_Full;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e000      	b.n	8000a84 <FIFO_IsFull+0x2a>

	return FIFO_Valid;
 8000a82:	2302      	movs	r3, #2
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <FIFO_IsEmpty>:

/*
 * Description: Function to check if the required FIFO Buffer is Empty or not.
 */
FIFO_Status_t FIFO_IsEmpty(FIFO_t* FifoPtr){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]

	/* Check if Sent FIFO Buffer is created */
	if(FIFO_NotCreated(FifoPtr) == FIFO_NULL)
 8000a94:	6878      	ldr	r0, [r7, #4]
 8000a96:	f7ff ffc8 	bl	8000a2a <FIFO_NotCreated>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d101      	bne.n	8000aa4 <FIFO_IsEmpty+0x18>
			return FIFO_NULL;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e006      	b.n	8000ab2 <FIFO_IsEmpty+0x26>

	/* Check if the count value equals to zero to assure LIFO is empty */
	if(FifoPtr->count == 0)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <FIFO_IsEmpty+0x24>
		return FIFO_Empty;
 8000aac:	2300      	movs	r3, #0
 8000aae:	e000      	b.n	8000ab2 <FIFO_IsEmpty+0x26>

	return FIFO_Valid;
 8000ab0:	2302      	movs	r3, #2
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <FIFO_Enqueue>:

/*
 * Description: Function to enqueue the required data in the required FIFO Buffer
 * and return the buffer current status.
 */
FIFO_Status_t FIFO_Enqueue(FIFO_t* FifoPtr, fifo_type item){
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
 8000ac2:	6039      	str	r1, [r7, #0]

	/* Check if Sent FIFO Buffer is created */
	if(FIFO_NotCreated(FifoPtr)==FIFO_NULL)
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff ffb0 	bl	8000a2a <FIFO_NotCreated>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d101      	bne.n	8000ad4 <FIFO_Enqueue+0x1a>
		return FIFO_NULL;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	e028      	b.n	8000b26 <FIFO_Enqueue+0x6c>

	/* Check if send FIFO Buffer is full */
	if(FIFO_IsFull(FifoPtr)==FIFO_Full)
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff ffc0 	bl	8000a5a <FIFO_IsFull>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d101      	bne.n	8000ae4 <FIFO_Enqueue+0x2a>
		return FIFO_Full;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e020      	b.n	8000b26 <FIFO_Enqueue+0x6c>

	/* Enqueue sent item in the sent FIFO Buffer */
	*(FifoPtr->head) = item;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	691b      	ldr	r3, [r3, #16]
 8000ae8:	683a      	ldr	r2, [r7, #0]
 8000aea:	601a      	str	r2, [r3, #0]

	if(FifoPtr->head == (FifoPtr->base + FifoPtr->length - 1))
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	691a      	ldr	r2, [r3, #16]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6899      	ldr	r1, [r3, #8]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000afc:	3b01      	subs	r3, #1
 8000afe:	009b      	lsls	r3, r3, #2
 8000b00:	440b      	add	r3, r1
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d104      	bne.n	8000b10 <FIFO_Enqueue+0x56>
		FifoPtr->head = FifoPtr->base;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	611a      	str	r2, [r3, #16]
 8000b0e:	e004      	b.n	8000b1a <FIFO_Enqueue+0x60>
	else
		FifoPtr->head++;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	691b      	ldr	r3, [r3, #16]
 8000b14:	1d1a      	adds	r2, r3, #4
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	611a      	str	r2, [r3, #16]

	FifoPtr->count++;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	605a      	str	r2, [r3, #4]
	return FIFO_Valid;
 8000b24:	2302      	movs	r3, #2
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <FIFO_Dequeue>:

/*
 * Description: Function to dequeue the top data from the required FIFO Buffer
 * and return the buffer current status.
 */
FIFO_Status_t FIFO_Dequeue(FIFO_t* FifoPtr, fifo_type* item){
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b082      	sub	sp, #8
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]

	/* Check if Sent FIFO Buffer is created */
	if(FIFO_NotCreated(FifoPtr)==FIFO_NULL)
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f7ff ff76 	bl	8000a2a <FIFO_NotCreated>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b03      	cmp	r3, #3
 8000b42:	d101      	bne.n	8000b48 <FIFO_Dequeue+0x1a>
			return FIFO_NULL;
 8000b44:	2303      	movs	r3, #3
 8000b46:	e029      	b.n	8000b9c <FIFO_Dequeue+0x6e>

	/* Check if send FIFO Buffer is empty */
	if(FIFO_IsEmpty(FifoPtr)==FIFO_Empty)
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff9f 	bl	8000a8c <FIFO_IsEmpty>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d101      	bne.n	8000b58 <FIFO_Dequeue+0x2a>
		return FIFO_Empty;
 8000b54:	2300      	movs	r3, #0
 8000b56:	e021      	b.n	8000b9c <FIFO_Dequeue+0x6e>

	/* Dequeue first item in the item pointer by the sent FIFO Buffer */
	*item = *(FifoPtr->tail);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	68db      	ldr	r3, [r3, #12]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	601a      	str	r2, [r3, #0]

	if(FifoPtr->tail == (FifoPtr->base + FifoPtr->length - 1))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	68da      	ldr	r2, [r3, #12]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6899      	ldr	r1, [r3, #8]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b72:	3b01      	subs	r3, #1
 8000b74:	009b      	lsls	r3, r3, #2
 8000b76:	440b      	add	r3, r1
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d104      	bne.n	8000b86 <FIFO_Dequeue+0x58>
		FifoPtr->tail = FifoPtr->base;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	e004      	b.n	8000b90 <FIFO_Dequeue+0x62>
	else
		FifoPtr->tail++;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	1d1a      	adds	r2, r3, #4
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	60da      	str	r2, [r3, #12]

	FifoPtr->count--;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	1e5a      	subs	r2, r3, #1
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	605a      	str	r2, [r3, #4]

	return FIFO_Valid;
 8000b9a:	2302      	movs	r3, #2
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <OS_IdleTask>:


//==============================================================================

static void OS_IdleTask(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
	while(1)
	{
		IdleTaskLED^=1;
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <OS_IdleTask+0x18>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	f083 0301 	eor.w	r3, r3, #1
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b02      	ldr	r3, [pc, #8]	; (8000bbc <OS_IdleTask+0x18>)
 8000bb4:	701a      	strb	r2, [r3, #0]
		OS_WaitForEvent();
 8000bb6:	bf20      	wfe
		IdleTaskLED^=1;
 8000bb8:	e7f6      	b.n	8000ba8 <OS_IdleTask+0x4>
 8000bba:	bf00      	nop
 8000bbc:	2000042c 	.word	0x2000042c

08000bc0 <OS_BufferSort>:
	}
}

// Handler Mode
static void OS_BufferSort(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
	for(int i=0; i < OS_Control_t.NoOfTasks-1; i++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	e039      	b.n	8000c40 <OS_BufferSort+0x80>
	{
		uint8_t Sorted = 1;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	72fb      	strb	r3, [r7, #11]
		for(int j=0; j < OS_Control_t.NoOfTasks - 1 - i; j++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	e025      	b.n	8000c22 <OS_BufferSort+0x62>
		{
			if(OS_Control_t.OSTasks[j]->Priority > OS_Control_t.OSTasks[j+1]->Priority)
 8000bd6:	4a21      	ldr	r2, [pc, #132]	; (8000c5c <OS_BufferSort+0x9c>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bde:	791a      	ldrb	r2, [r3, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3301      	adds	r3, #1
 8000be4:	491d      	ldr	r1, [pc, #116]	; (8000c5c <OS_BufferSort+0x9c>)
 8000be6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bea:	791b      	ldrb	r3, [r3, #4]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d915      	bls.n	8000c1c <OS_BufferSort+0x5c>
			{
				Sorted = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	72fb      	strb	r3, [r7, #11]
				Task_t* TaskTemp 		  = OS_Control_t.OSTasks[j];
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <OS_BufferSort+0x9c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfc:	603b      	str	r3, [r7, #0]
				OS_Control_t.OSTasks[j]   = OS_Control_t.OSTasks[j+1];
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	3301      	adds	r3, #1
 8000c02:	4a16      	ldr	r2, [pc, #88]	; (8000c5c <OS_BufferSort+0x9c>)
 8000c04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c08:	4914      	ldr	r1, [pc, #80]	; (8000c5c <OS_BufferSort+0x9c>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				OS_Control_t.OSTasks[j+1] = TaskTemp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3301      	adds	r3, #1
 8000c14:	4911      	ldr	r1, [pc, #68]	; (8000c5c <OS_BufferSort+0x9c>)
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0; j < OS_Control_t.NoOfTasks - 1 - i; j++)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3301      	adds	r3, #1
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <OS_BufferSort+0x9c>)
 8000c24:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d8d0      	bhi.n	8000bd6 <OS_BufferSort+0x16>
			}
		}
		if(Sorted == 1)
 8000c34:	7afb      	ldrb	r3, [r7, #11]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d00a      	beq.n	8000c50 <OS_BufferSort+0x90>
	for(int i=0; i < OS_Control_t.NoOfTasks-1; i++)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <OS_BufferSort+0x9c>)
 8000c42:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000c46:	1e5a      	subs	r2, r3, #1
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d8be      	bhi.n	8000bcc <OS_BufferSort+0xc>
			break;
	}
}
 8000c4e:	e000      	b.n	8000c52 <OS_BufferSort+0x92>
			break;
 8000c50:	bf00      	nop
}
 8000c52:	bf00      	nop
 8000c54:	3714      	adds	r7, #20
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	200000b0 	.word	0x200000b0

08000c60 <OS_UpdateScheduleTable>:

// Handler Mode
static void OS_UpdateScheduleTable(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
	// Bubble sort for the schedule table based on task priority descendingly.
	OS_BufferSort();
 8000c66:	f7ff ffab 	bl	8000bc0 <OS_BufferSort>

	// Free the Ready Queue from the current ready tasks and return them back
	Task_t* dummy_Task;
	while (FIFO_Dequeue(&Ready_Queue, &dummy_Task) != FIFO_Empty)
 8000c6a:	e003      	b.n	8000c74 <OS_UpdateScheduleTable+0x14>
	{
		dummy_Task->TaskState = Waiting;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	while (FIFO_Dequeue(&Ready_Queue, &dummy_Task) != FIFO_Empty)
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4829      	ldr	r0, [pc, #164]	; (8000d20 <OS_UpdateScheduleTable+0xc0>)
 8000c7a:	f7ff ff58 	bl	8000b2e <FIFO_Dequeue>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d1f3      	bne.n	8000c6c <OS_UpdateScheduleTable+0xc>
	}

	// Update the Ready Queue with the new tasks.
	uint32_t HighestPriority = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < OS_Control_t.NoOfTasks; i++)
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	e03b      	b.n	8000d06 <OS_UpdateScheduleTable+0xa6>
	{
		if (OS_Control_t.OSTasks[i]->TaskState != Suspended)
 8000c8e:	4a25      	ldr	r2, [pc, #148]	; (8000d24 <OS_UpdateScheduleTable+0xc4>)
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d030      	beq.n	8000d00 <OS_UpdateScheduleTable+0xa0>
		{
			HighestPriority = OS_Control_t.OSTasks[i]->Priority;
 8000c9e:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <OS_UpdateScheduleTable+0xc4>)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	60bb      	str	r3, [r7, #8]

			while (i < OS_Control_t.NoOfTasks && OS_Control_t.OSTasks[i]->Priority == HighestPriority)
 8000caa:	e019      	b.n	8000ce0 <OS_UpdateScheduleTable+0x80>
			{
				if (OS_Control_t.OSTasks[i]->TaskState == Waiting)
 8000cac:	4a1d      	ldr	r2, [pc, #116]	; (8000d24 <OS_UpdateScheduleTable+0xc4>)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d10e      	bne.n	8000cda <OS_UpdateScheduleTable+0x7a>
				{
					OS_Control_t.OSTasks[i]->TaskState = Ready;
 8000cbc:	4a19      	ldr	r2, [pc, #100]	; (8000d24 <OS_UpdateScheduleTable+0xc4>)
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					FIFO_Enqueue(&Ready_Queue, OS_Control_t.OSTasks[i]);
 8000cca:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <OS_UpdateScheduleTable+0xc4>)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4812      	ldr	r0, [pc, #72]	; (8000d20 <OS_UpdateScheduleTable+0xc0>)
 8000cd6:	f7ff fef0 	bl	8000aba <FIFO_Enqueue>
				}
				i++;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	60fb      	str	r3, [r7, #12]
			while (i < OS_Control_t.NoOfTasks && OS_Control_t.OSTasks[i]->Priority == HighestPriority)
 8000ce0:	4b10      	ldr	r3, [pc, #64]	; (8000d24 <OS_UpdateScheduleTable+0xc4>)
 8000ce2:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d913      	bls.n	8000d14 <OS_UpdateScheduleTable+0xb4>
 8000cec:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <OS_UpdateScheduleTable+0xc4>)
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf4:	791b      	ldrb	r3, [r3, #4]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d0d6      	beq.n	8000cac <OS_UpdateScheduleTable+0x4c>
			}
			break; // Exit after processing the highest priority tasks
 8000cfe:	e009      	b.n	8000d14 <OS_UpdateScheduleTable+0xb4>
	for (int i = 0; i < OS_Control_t.NoOfTasks; i++)
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	3301      	adds	r3, #1
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <OS_UpdateScheduleTable+0xc4>)
 8000d08:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d8bd      	bhi.n	8000c8e <OS_UpdateScheduleTable+0x2e>
		}
	}
}
 8000d12:	e000      	b.n	8000d16 <OS_UpdateScheduleTable+0xb6>
			break; // Exit after processing the highest priority tasks
 8000d14:	bf00      	nop
}
 8000d16:	bf00      	nop
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000009c 	.word	0x2000009c
 8000d24:	200000b0 	.word	0x200000b0

08000d28 <OS_DecideWhatNext>:

// Handler Mode
static void OS_DecideWhatNext(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	if(FIFO_Dequeue(&Ready_Queue, &OS_Control_t.NextTask) != FIFO_Empty)
 8000d2c:	492a      	ldr	r1, [pc, #168]	; (8000dd8 <OS_DecideWhatNext+0xb0>)
 8000d2e:	482b      	ldr	r0, [pc, #172]	; (8000ddc <OS_DecideWhatNext+0xb4>)
 8000d30:	f7ff fefd 	bl	8000b2e <FIFO_Dequeue>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d039      	beq.n	8000dae <OS_DecideWhatNext+0x86>
	{
		if (OS_Control_t.CurrentTask->TaskState == Running && OS_Control_t.CurrentTask->Priority == OS_Control_t.NextTask->Priority)
 8000d3a:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <OS_DecideWhatNext+0xb8>)
 8000d3c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d117      	bne.n	8000d78 <OS_DecideWhatNext+0x50>
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <OS_DecideWhatNext+0xb8>)
 8000d4a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d4e:	791a      	ldrb	r2, [r3, #4]
 8000d50:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <OS_DecideWhatNext+0xb8>)
 8000d52:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000d56:	791b      	ldrb	r3, [r3, #4]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d10d      	bne.n	8000d78 <OS_DecideWhatNext+0x50>
		{
			OS_Control_t.CurrentTask->TaskState = Ready;
 8000d5c:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <OS_DecideWhatNext+0xb8>)
 8000d5e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d62:	2202      	movs	r2, #2
 8000d64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			FIFO_Enqueue(&Ready_Queue, OS_Control_t.CurrentTask);
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <OS_DecideWhatNext+0xb8>)
 8000d6a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d6e:	4619      	mov	r1, r3
 8000d70:	481a      	ldr	r0, [pc, #104]	; (8000ddc <OS_DecideWhatNext+0xb4>)
 8000d72:	f7ff fea2 	bl	8000aba <FIFO_Enqueue>
 8000d76:	e013      	b.n	8000da0 <OS_DecideWhatNext+0x78>
		}
		else if(OS_Control_t.CurrentTask->TaskState == Suspended)
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <OS_DecideWhatNext+0xb8>)
 8000d7a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d106      	bne.n	8000d94 <OS_DecideWhatNext+0x6c>
		{
			OS_Control_t.CurrentTask->TaskState = Suspended;
 8000d86:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <OS_DecideWhatNext+0xb8>)
 8000d88:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000d92:	e005      	b.n	8000da0 <OS_DecideWhatNext+0x78>
		}
		else
		{
			OS_Control_t.CurrentTask->TaskState = Waiting;
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <OS_DecideWhatNext+0xb8>)
 8000d96:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}

		// Set the state of the next task to Running
		OS_Control_t.NextTask->TaskState = Running;
 8000da0:	4b0f      	ldr	r3, [pc, #60]	; (8000de0 <OS_DecideWhatNext+0xb8>)
 8000da2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8000da6:	2203      	movs	r2, #3
 8000da8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		{
			OS_Control_t.CurrentTask->TaskState = Running;
			OS_Control_t.NextTask = OS_Control_t.CurrentTask;
		}
	}
}
 8000dac:	e012      	b.n	8000dd4 <OS_DecideWhatNext+0xac>
		if (OS_Control_t.CurrentTask->TaskState != Suspended)
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <OS_DecideWhatNext+0xb8>)
 8000db0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000db4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d00b      	beq.n	8000dd4 <OS_DecideWhatNext+0xac>
			OS_Control_t.CurrentTask->TaskState = Running;
 8000dbc:	4b08      	ldr	r3, [pc, #32]	; (8000de0 <OS_DecideWhatNext+0xb8>)
 8000dbe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			OS_Control_t.NextTask = OS_Control_t.CurrentTask;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <OS_DecideWhatNext+0xb8>)
 8000dca:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000dce:	4a04      	ldr	r2, [pc, #16]	; (8000de0 <OS_DecideWhatNext+0xb8>)
 8000dd0:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000254 	.word	0x20000254
 8000ddc:	2000009c 	.word	0x2000009c
 8000de0:	200000b0 	.word	0x200000b0

08000de4 <OS_SVC_Services>:


// Handler Mode
void OS_SVC_Services(int* StackFramePointer)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	int Stacked_PC 		= StackFramePointer[6];		// PC
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	60fb      	str	r3, [r7, #12]

	unsigned char SVC_ID = *(((unsigned char*)Stacked_PC)-2);
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	3b02      	subs	r3, #2
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	72fb      	strb	r3, [r7, #11]

	switch(SVC_ID)
 8000dfa:	7afb      	ldrb	r3, [r7, #11]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db23      	blt.n	8000e48 <OS_SVC_Services+0x64>
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	dd02      	ble.n	8000e0a <OS_SVC_Services+0x26>
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d01b      	beq.n	8000e40 <OS_SVC_Services+0x5c>
		// Update the Schedule Table. And the Ready Queue
		OS_UpdateScheduleTable();

		break;
	}
}
 8000e08:	e01e      	b.n	8000e48 <OS_SVC_Services+0x64>
		OS_UpdateScheduleTable();
 8000e0a:	f7ff ff29 	bl	8000c60 <OS_UpdateScheduleTable>
		if(OS_Control_t.OSMode == OS_Running)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <OS_SVC_Services+0x6c>)
 8000e10:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d116      	bne.n	8000e46 <OS_SVC_Services+0x62>
			if(strcmp(OS_Control_t.CurrentTask->TaskName,MYRTOS_idleTask.TaskName) != 0)
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <OS_SVC_Services+0x6c>)
 8000e1a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e1e:	3306      	adds	r3, #6
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <OS_SVC_Services+0x70>)
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff f9a4 	bl	8000170 <strcmp>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00b      	beq.n	8000e46 <OS_SVC_Services+0x62>
				OS_DecideWhatNext();
 8000e2e:	f7ff ff7b 	bl	8000d28 <OS_DecideWhatNext>
				OS_TriggerPendSV();
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <OS_SVC_Services+0x74>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	4a08      	ldr	r2, [pc, #32]	; (8000e58 <OS_SVC_Services+0x74>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	6053      	str	r3, [r2, #4]
		break;
 8000e3e:	e002      	b.n	8000e46 <OS_SVC_Services+0x62>
		OS_UpdateScheduleTable();
 8000e40:	f7ff ff0e 	bl	8000c60 <OS_UpdateScheduleTable>
		break;
 8000e44:	e000      	b.n	8000e48 <OS_SVC_Services+0x64>
		break;
 8000e46:	bf00      	nop
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200000b0 	.word	0x200000b0
 8000e54:	200003f2 	.word	0x200003f2
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <OS_SVC_Set>:

// Thread Mode
static void OS_SVC_Set(int SVC_ID)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	switch(SVC_ID){
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d006      	beq.n	8000e78 <OS_SVC_Set+0x1c>
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d006      	beq.n	8000e7c <OS_SVC_Set+0x20>
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d000      	beq.n	8000e74 <OS_SVC_Set+0x18>
		// Handle Case Task Waiting Time
		__asm ("SVC #0x2");
		break;

	}
}
 8000e72:	e005      	b.n	8000e80 <OS_SVC_Set+0x24>
		__asm ("SVC #0x0");
 8000e74:	df00      	svc	0
		break;
 8000e76:	e003      	b.n	8000e80 <OS_SVC_Set+0x24>
		__asm ("SVC #0x1");
 8000e78:	df01      	svc	1
		break;
 8000e7a:	e001      	b.n	8000e80 <OS_SVC_Set+0x24>
		__asm ("SVC #0x2");
 8000e7c:	df02      	svc	2
		break;
 8000e7e:	bf00      	nop
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
	...

08000e8c <OS_Create_MainStack>:

static MYRTOS_ErrorID OS_Create_MainStack(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	if(OS_Control_t._S_MSP_MAIN - MAIN_STACK_SIZE < (uint32_t_)(&_eheap))
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <OS_Create_MainStack+0x48>)
 8000e92:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000e96:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000e9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <OS_Create_MainStack+0x4c>)
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d201      	bcs.n	8000ea4 <OS_Create_MainStack+0x18>
	{
		return Stack_Exceeded_Stack_Size;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	e013      	b.n	8000ecc <OS_Create_MainStack+0x40>
	}
	OS_Control_t._S_MSP_MAIN = (uint32_t_)&_estack;
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <OS_Create_MainStack+0x50>)
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	; (8000ed4 <OS_Create_MainStack+0x48>)
 8000ea8:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OS_Control_t._E_MSP_MAIN = OS_Control_t._S_MSP_MAIN - MAIN_STACK_SIZE;
 8000eac:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <OS_Create_MainStack+0x48>)
 8000eae:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000eb2:	f5a3 6340 	sub.w	r3, r3, #3072	; 0xc00
 8000eb6:	4a07      	ldr	r2, [pc, #28]	; (8000ed4 <OS_Create_MainStack+0x48>)
 8000eb8:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	// Align by 8 bytes space between MSP and PSP
	OS_Control_t.PSP_Locator = OS_Control_t._E_MSP_MAIN - 8;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <OS_Create_MainStack+0x48>)
 8000ebe:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8000ec2:	3b08      	subs	r3, #8
 8000ec4:	4a03      	ldr	r2, [pc, #12]	; (8000ed4 <OS_Create_MainStack+0x48>)
 8000ec6:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	return E_OK;
 8000eca:	2309      	movs	r3, #9

}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr
 8000ed4:	200000b0 	.word	0x200000b0
 8000ed8:	20000770 	.word	0x20000770
 8000edc:	20002800 	.word	0x20002800

08000ee0 <OS_Create_TaskStack>:

static MYRTOS_ErrorID OS_Create_TaskStack(Task_t* p_Task)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	 * r11
	 * ====
	 * */

	// Set the Current PSP Pointer with the start PSP of the Task.
	p_Task->tcb.Current_PSP = (uint32_t_*)p_Task->tcb._S_PSP_TASK;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eec:	461a      	mov	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	63da      	str	r2, [r3, #60]	; 0x3c

	// DUMMY Push for xPSR.
	p_Task->tcb.Current_PSP--;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef6:	1f1a      	subs	r2, r3, #4
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	63da      	str	r2, [r3, #60]	; 0x3c
	*(p_Task->tcb.Current_PSP) = 0x1000000;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f04:	601a      	str	r2, [r3, #0]

	// DUMMY Push for PC bt the start of the Task.
	p_Task->tcb.Current_PSP--;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f0a:	1f1a      	subs	r2, r3, #4
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	63da      	str	r2, [r3, #60]	; 0x3c
	*(p_Task->tcb.Current_PSP) = (uint32_t_)p_Task->p_TaskEntry;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f18:	601a      	str	r2, [r3, #0]

	// DUMMY Push for LR by the value that would be inserted by the CPU "ALL DUMMY".
	p_Task->tcb.Current_PSP--;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f1e:	1f1a      	subs	r2, r3, #4
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	63da      	str	r2, [r3, #60]	; 0x3c
	*(p_Task->tcb.Current_PSP) = 0xFFFFFFFD;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f28:	f06f 0202 	mvn.w	r2, #2
 8000f2c:	601a      	str	r2, [r3, #0]

	// DUMMY Push for the rest of the registers.
	for(uint8_t i=0; i<13;i++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e00b      	b.n	8000f4c <OS_Create_TaskStack+0x6c>
	{
		p_Task->tcb.Current_PSP--;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f38:	1f1a      	subs	r2, r3, #4
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	63da      	str	r2, [r3, #60]	; 0x3c
		*(p_Task->tcb.Current_PSP) = 0;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<13;i++)
 8000f46:	7bfb      	ldrb	r3, [r7, #15]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	73fb      	strb	r3, [r7, #15]
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2b0c      	cmp	r3, #12
 8000f50:	d9f0      	bls.n	8000f34 <OS_Create_TaskStack+0x54>
	}
	return E_OK;
 8000f52:	2309      	movs	r3, #9

}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3714      	adds	r7, #20
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
	...

08000f60 <OS_TicksCounted>:

void OS_TicksCounted(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	/*
	 * After 1ms Counts are ticked,
	 * see updates and Decide which task should be running.
	 * */
	OS_DecideWhatNext();
 8000f64:	f7ff fee0 	bl	8000d28 <OS_DecideWhatNext>

	/*
	 * Switch Context.
	 * */
	OS_TriggerPendSV();
 8000f68:	4b03      	ldr	r3, [pc, #12]	; (8000f78 <OS_TicksCounted+0x18>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4a02      	ldr	r2, [pc, #8]	; (8000f78 <OS_TicksCounted+0x18>)
 8000f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f72:	6053      	str	r3, [r2, #4]
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <OS_UpdateTicks>:

/*
 * Note: It decrements till Updating the next
*/
void OS_UpdateTicks(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
	for(uint32_t_ i = 0; i < OS_Control_t.NoOfTasks; i++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	e031      	b.n	8000fec <OS_UpdateTicks+0x70>
	{
		// Check if this task is in the blocking suspended mode
		if(OS_Control_t.OSTasks[i]->TaskState == Suspended && OS_Control_t.OSTasks[i]->WaitingTime.Blocking == Enable)
 8000f88:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <OS_UpdateTicks+0x84>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d126      	bne.n	8000fe6 <OS_UpdateTicks+0x6a>
 8000f98:	4a19      	ldr	r2, [pc, #100]	; (8001000 <OS_UpdateTicks+0x84>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d11e      	bne.n	8000fe6 <OS_UpdateTicks+0x6a>
		{
			// Decrement the ticks number
			OS_Control_t.OSTasks[i]->WaitingTime.ticks--;
 8000fa8:	4a15      	ldr	r2, [pc, #84]	; (8001000 <OS_UpdateTicks+0x84>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb2:	3a01      	subs	r2, #1
 8000fb4:	62da      	str	r2, [r3, #44]	; 0x2c

			// Check if the tasks' current tick is completed
			if(OS_Control_t.OSTasks[i]->WaitingTime.ticks == 0)
 8000fb6:	4a12      	ldr	r2, [pc, #72]	; (8001000 <OS_UpdateTicks+0x84>)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d110      	bne.n	8000fe6 <OS_UpdateTicks+0x6a>
			{
				OS_Control_t.OSTasks[i]->TaskState = Waiting;
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <OS_UpdateTicks+0x84>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				OS_Control_t.OSTasks[i]->WaitingTime.Blocking = Disable;
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <OS_UpdateTicks+0x84>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				// Make Exceptional SVC Interrupt for Waiting
				OS_SVC_Set(__SVC_Task_WaitingTime);
 8000fe0:	2002      	movs	r0, #2
 8000fe2:	f7ff ff3b 	bl	8000e5c <OS_SVC_Set>
	for(uint32_t_ i = 0; i < OS_Control_t.NoOfTasks; i++)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3301      	adds	r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <OS_UpdateTicks+0x84>)
 8000fee:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	d3c7      	bcc.n	8000f88 <OS_UpdateTicks+0xc>
			}
		}

	}
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	200000b0 	.word	0x200000b0

08001004 <PendSV_Handler>:

	/*
	 * Save the rest of the registers of the current task -
	 * And then the Context Switching is DONE.
	 * */
	OS_GET_PSP(OS_Control_t.CurrentTask->tcb.Current_PSP);
 8001004:	4b6f      	ldr	r3, [pc, #444]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001006:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800100a:	f3ef 8009 	mrs	r0, PSP
 800100e:	4602      	mov	r2, r0
 8001010:	63da      	str	r2, [r3, #60]	; 0x3c

	OS_Control_t.CurrentTask->tcb.Current_PSP--;
 8001012:	4b6c      	ldr	r3, [pc, #432]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001014:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800101a:	3a04      	subs	r2, #4
 800101c:	63da      	str	r2, [r3, #60]	; 0x3c
	__asm("mov %0,r4" : "=r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 800101e:	4b69      	ldr	r3, [pc, #420]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001020:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001026:	4622      	mov	r2, r4
 8001028:	601a      	str	r2, [r3, #0]

	OS_Control_t.CurrentTask->tcb.Current_PSP--;
 800102a:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <PendSV_Handler+0x1c0>)
 800102c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001032:	3a04      	subs	r2, #4
 8001034:	63da      	str	r2, [r3, #60]	; 0x3c
	__asm("mov %0,r5" : "=r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 8001036:	4b63      	ldr	r3, [pc, #396]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001038:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800103c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103e:	462a      	mov	r2, r5
 8001040:	601a      	str	r2, [r3, #0]

	OS_Control_t.CurrentTask->tcb.Current_PSP--;
 8001042:	4b60      	ldr	r3, [pc, #384]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001044:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001048:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800104a:	3a04      	subs	r2, #4
 800104c:	63da      	str	r2, [r3, #60]	; 0x3c
	__asm("mov %0,r6" : "=r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 800104e:	4b5d      	ldr	r3, [pc, #372]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001050:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001056:	4632      	mov	r2, r6
 8001058:	601a      	str	r2, [r3, #0]

	OS_Control_t.CurrentTask->tcb.Current_PSP--;
 800105a:	4b5a      	ldr	r3, [pc, #360]	; (80011c4 <PendSV_Handler+0x1c0>)
 800105c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001060:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001062:	3a04      	subs	r2, #4
 8001064:	63da      	str	r2, [r3, #60]	; 0x3c
	__asm("mov %0,r7" : "=r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 8001066:	4b57      	ldr	r3, [pc, #348]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001068:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800106c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800106e:	463a      	mov	r2, r7
 8001070:	601a      	str	r2, [r3, #0]

	OS_Control_t.CurrentTask->tcb.Current_PSP--;
 8001072:	4b54      	ldr	r3, [pc, #336]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001074:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800107a:	3a04      	subs	r2, #4
 800107c:	63da      	str	r2, [r3, #60]	; 0x3c
	__asm("mov %0,r8" : "=r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 800107e:	4b51      	ldr	r3, [pc, #324]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001080:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001086:	4642      	mov	r2, r8
 8001088:	601a      	str	r2, [r3, #0]

	OS_Control_t.CurrentTask->tcb.Current_PSP--;
 800108a:	4b4e      	ldr	r3, [pc, #312]	; (80011c4 <PendSV_Handler+0x1c0>)
 800108c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001090:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001092:	3a04      	subs	r2, #4
 8001094:	63da      	str	r2, [r3, #60]	; 0x3c
	__asm("mov %0,r9" : "=r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 8001096:	4b4b      	ldr	r3, [pc, #300]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001098:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800109c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800109e:	464a      	mov	r2, r9
 80010a0:	601a      	str	r2, [r3, #0]

	OS_Control_t.CurrentTask->tcb.Current_PSP--;
 80010a2:	4b48      	ldr	r3, [pc, #288]	; (80011c4 <PendSV_Handler+0x1c0>)
 80010a4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010aa:	3a04      	subs	r2, #4
 80010ac:	63da      	str	r2, [r3, #60]	; 0x3c
	__asm("mov %0,r10" : "=r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 80010ae:	4b45      	ldr	r3, [pc, #276]	; (80011c4 <PendSV_Handler+0x1c0>)
 80010b0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b6:	4652      	mov	r2, sl
 80010b8:	601a      	str	r2, [r3, #0]

	OS_Control_t.CurrentTask->tcb.Current_PSP--;
 80010ba:	4b42      	ldr	r3, [pc, #264]	; (80011c4 <PendSV_Handler+0x1c0>)
 80010bc:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c2:	3a04      	subs	r2, #4
 80010c4:	63da      	str	r2, [r3, #60]	; 0x3c
	__asm("mov %0,r11" : "=r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <PendSV_Handler+0x1c0>)
 80010c8:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ce:	465a      	mov	r2, fp
 80010d0:	601a      	str	r2, [r3, #0]

	/*
	 * Restore the rest of the registers of the next running task,
	 * but first set the next as the current task
	 * */
	if(OS_Control_t.NextTask != NULL_PTR)
 80010d2:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <PendSV_Handler+0x1c0>)
 80010d4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d009      	beq.n	80010f0 <PendSV_Handler+0xec>
	{
		OS_Control_t.CurrentTask = OS_Control_t.NextTask;
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <PendSV_Handler+0x1c0>)
 80010de:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80010e2:	4a38      	ldr	r2, [pc, #224]	; (80011c4 <PendSV_Handler+0x1c0>)
 80010e4:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
		OS_Control_t.NextTask = NULL_PTR;
 80010e8:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <PendSV_Handler+0x1c0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
	}

	__asm("mov r11,%0" : :"r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 80010f0:	4b34      	ldr	r3, [pc, #208]	; (80011c4 <PendSV_Handler+0x1c0>)
 80010f2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80010f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	469b      	mov	fp, r3
	OS_Control_t.CurrentTask->tcb.Current_PSP++;
 80010fc:	4b31      	ldr	r3, [pc, #196]	; (80011c4 <PendSV_Handler+0x1c0>)
 80010fe:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001102:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001104:	3204      	adds	r2, #4
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c

	__asm("mov r10,%0" : :"r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 8001108:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <PendSV_Handler+0x1c0>)
 800110a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800110e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	469a      	mov	sl, r3
	OS_Control_t.CurrentTask->tcb.Current_PSP++;
 8001114:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001116:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800111a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800111c:	3204      	adds	r2, #4
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c

	__asm("mov r9,%0" : :"r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 8001120:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001122:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4699      	mov	r9, r3
	OS_Control_t.CurrentTask->tcb.Current_PSP++;
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <PendSV_Handler+0x1c0>)
 800112e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001134:	3204      	adds	r2, #4
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c

	__asm("mov r8,%0" : :"r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 8001138:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <PendSV_Handler+0x1c0>)
 800113a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800113e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4698      	mov	r8, r3
	OS_Control_t.CurrentTask->tcb.Current_PSP++;
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001146:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800114a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800114c:	3204      	adds	r2, #4
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c

	__asm("mov r7,%0" : :"r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001152:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	461f      	mov	r7, r3
	OS_Control_t.CurrentTask->tcb.Current_PSP++;
 800115c:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <PendSV_Handler+0x1c0>)
 800115e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001164:	3204      	adds	r2, #4
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c

	__asm("mov r6,%0" : :"r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 8001168:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <PendSV_Handler+0x1c0>)
 800116a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800116e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	461e      	mov	r6, r3
	OS_Control_t.CurrentTask->tcb.Current_PSP++;
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001176:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800117a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800117c:	3204      	adds	r2, #4
 800117e:	63da      	str	r2, [r3, #60]	; 0x3c

	__asm("mov r5,%0" : :"r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <PendSV_Handler+0x1c0>)
 8001182:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	461d      	mov	r5, r3
	OS_Control_t.CurrentTask->tcb.Current_PSP++;
 800118c:	4b0d      	ldr	r3, [pc, #52]	; (80011c4 <PendSV_Handler+0x1c0>)
 800118e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8001192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001194:	3204      	adds	r2, #4
 8001196:	63da      	str	r2, [r3, #60]	; 0x3c

	__asm("mov r4,%0" : :"r" (*(OS_Control_t.CurrentTask->tcb.Current_PSP)));
 8001198:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <PendSV_Handler+0x1c0>)
 800119a:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800119e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	461c      	mov	r4, r3
	OS_Control_t.CurrentTask->tcb.Current_PSP++;
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <PendSV_Handler+0x1c0>)
 80011a6:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011ac:	3204      	adds	r2, #4
 80011ae:	63da      	str	r2, [r3, #60]	; 0x3c

	/*
	 * Update the PSP of the next task and exit.
	 * The PSP was the value of the previous task
	 * */
	OS_SET_PSP(OS_Control_t.CurrentTask->tcb.Current_PSP);
 80011b0:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <PendSV_Handler+0x1c0>)
 80011b2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80011b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011b8:	4618      	mov	r0, r3
 80011ba:	f380 8809 	msr	PSP, r0
	__asm("BX LR");
 80011be:	4770      	bx	lr
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	200000b0 	.word	0x200000b0

080011c8 <MYRTOS_Init>:


//==============================================================================

MYRTOS_ErrorID MYRTOS_Init()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
	MYRTOS_ErrorID errState = E_OK;
 80011ce:	2309      	movs	r3, #9
 80011d0:	71fb      	strb	r3, [r7, #7]
	// Initialize Hardware
	HW_Init();
 80011d2:	f7ff fbf9 	bl	80009c8 <HW_Init>

	// Update the OS Mode -> (Suspended)
	OS_Control_t.OSMode = OS_Suspend;
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MYRTOS_Init+0x90>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	// Update the OS Tasks
	OS_Control_t.CurrentTask = NULL_PTR;
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MYRTOS_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	OS_Control_t.NextTask 	 = NULL_PTR;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MYRTOS_Init+0x90>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	// Specify the main stack for the OS
	errState = OS_Create_MainStack();
 80011ee:	f7ff fe4d 	bl	8000e8c <OS_Create_MainStack>
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
	if(errState != E_OK)
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b09      	cmp	r3, #9
 80011fa:	d001      	beq.n	8001200 <MYRTOS_Init+0x38>
	{
		return errState;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	e027      	b.n	8001250 <MYRTOS_Init+0x88>
	}

	// Create the OS ready queue
	if(FIFO_Init(&Ready_Queue, Ready_Queue_Buffer, READY_QUEUE_BUFFER_SIZE) != FIFO_Valid)
 8001200:	2264      	movs	r2, #100	; 0x64
 8001202:	4916      	ldr	r1, [pc, #88]	; (800125c <MYRTOS_Init+0x94>)
 8001204:	4816      	ldr	r0, [pc, #88]	; (8001260 <MYRTOS_Init+0x98>)
 8001206:	f7ff fbf0 	bl	80009ea <FIFO_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b02      	cmp	r3, #2
 800120e:	d003      	beq.n	8001218 <MYRTOS_Init+0x50>
	{
		errState = Ready_Queue_Buffer_ERR;
 8001210:	2300      	movs	r3, #0
 8001212:	71fb      	strb	r3, [r7, #7]
		return errState;
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	e01b      	b.n	8001250 <MYRTOS_Init+0x88>
	}

	// Configure idle task
	strcpy(MYRTOS_idleTask.TaskName,"idleTask");
 8001218:	4a12      	ldr	r2, [pc, #72]	; (8001264 <MYRTOS_Init+0x9c>)
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MYRTOS_Init+0xa0>)
 800121c:	cb03      	ldmia	r3!, {r0, r1}
 800121e:	6010      	str	r0, [r2, #0]
 8001220:	6051      	str	r1, [r2, #4]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	7213      	strb	r3, [r2, #8]
	MYRTOS_idleTask.Priority = 255;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MYRTOS_Init+0xa4>)
 8001228:	22ff      	movs	r2, #255	; 0xff
 800122a:	711a      	strb	r2, [r3, #4]
	MYRTOS_idleTask.p_TaskEntry = OS_IdleTask;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MYRTOS_Init+0xa4>)
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <MYRTOS_Init+0xa8>)
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
	MYRTOS_idleTask.Stack_Size = 300; // 300 bytes
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MYRTOS_Init+0xa4>)
 8001234:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001238:	601a      	str	r2, [r3, #0]


	errState = MYRTOS_CreateTask(&MYRTOS_idleTask);
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <MYRTOS_Init+0xa4>)
 800123c:	f000 f84c 	bl	80012d8 <MYRTOS_CreateTask>
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
	if(errState != E_OK)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b09      	cmp	r3, #9
 8001248:	d001      	beq.n	800124e <MYRTOS_Init+0x86>
	{
		return errState;
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	e000      	b.n	8001250 <MYRTOS_Init+0x88>
	}

	return errState;
 800124e:	79fb      	ldrb	r3, [r7, #7]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200000b0 	.word	0x200000b0
 800125c:	2000025c 	.word	0x2000025c
 8001260:	2000009c 	.word	0x2000009c
 8001264:	200003f2 	.word	0x200003f2
 8001268:	080017ac 	.word	0x080017ac
 800126c:	200003ec 	.word	0x200003ec
 8001270:	08000ba5 	.word	0x08000ba5

08001274 <MYRTOS_StartOS>:

MYRTOS_ErrorID MYRTOS_StartOS()
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	OS_Control_t.OSMode = OS_Running;
 8001278:	4b15      	ldr	r3, [pc, #84]	; (80012d0 <MYRTOS_StartOS+0x5c>)
 800127a:	2201      	movs	r2, #1
 800127c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8

	OS_Control_t.CurrentTask = &MYRTOS_idleTask;
 8001280:	4b13      	ldr	r3, [pc, #76]	; (80012d0 <MYRTOS_StartOS+0x5c>)
 8001282:	4a14      	ldr	r2, [pc, #80]	; (80012d4 <MYRTOS_StartOS+0x60>)
 8001284:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0

	if(MYRTOS_ActivateTask(&MYRTOS_idleTask) != E_OK)
 8001288:	4812      	ldr	r0, [pc, #72]	; (80012d4 <MYRTOS_StartOS+0x60>)
 800128a:	f000 f861 	bl	8001350 <MYRTOS_ActivateTask>
 800128e:	4603      	mov	r3, r0
 8001290:	2b09      	cmp	r3, #9
 8001292:	d001      	beq.n	8001298 <MYRTOS_StartOS+0x24>
	{
		return StartOS_Failed;
 8001294:	2301      	movs	r3, #1
 8001296:	e018      	b.n	80012ca <MYRTOS_StartOS+0x56>
	}

	Start_Ticker();
 8001298:	f7ff fb9f 	bl	80009da <Start_Ticker>

	OS_SET_PSP(OS_Control_t.CurrentTask->tcb.Current_PSP);
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <MYRTOS_StartOS+0x5c>)
 800129e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80012a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012a4:	4618      	mov	r0, r3
 80012a6:	f380 8809 	msr	PSP, r0

	OS_SWITCH_SP_to_PSP();
 80012aa:	f3ef 8014 	mrs	r0, CONTROL
 80012ae:	f040 0002 	orr.w	r0, r0, #2
 80012b2:	f380 8814 	msr	CONTROL, r0

	OS_SWITCH_to_Unpri();
 80012b6:	f3ef 8014 	mrs	r0, CONTROL
 80012ba:	f040 0001 	orr.w	r0, r0, #1
 80012be:	f380 8814 	msr	CONTROL, r0

	MYRTOS_idleTask.p_TaskEntry();
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <MYRTOS_StartOS+0x60>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4798      	blx	r3

	return E_OK;
 80012c8:	2309      	movs	r3, #9
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	200000b0 	.word	0x200000b0
 80012d4:	200003ec 	.word	0x200003ec

080012d8 <MYRTOS_CreateTask>:

MYRTOS_ErrorID MYRTOS_CreateTask(Task_t* p_Task){
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]

	// Check that the PSP End doesn't exceed the whole stack size. And didn't interfere the heap
	if(OS_Control_t.PSP_Locator - p_Task->Stack_Size < (uint32_t_)(&_eheap))
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MYRTOS_CreateTask+0x70>)
 80012e2:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <MYRTOS_CreateTask+0x74>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d201      	bcs.n	80012f6 <MYRTOS_CreateTask+0x1e>
	{
		return Stack_Exceeded_Stack_Size;
 80012f2:	2302      	movs	r3, #2
 80012f4:	e023      	b.n	800133e <MYRTOS_CreateTask+0x66>
	}

	// Set the task stack size of the sent task
	p_Task->tcb._S_PSP_TASK =  OS_Control_t.PSP_Locator;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MYRTOS_CreateTask+0x70>)
 80012f8:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	635a      	str	r2, [r3, #52]	; 0x34
	p_Task->tcb._E_PSP_TASK =  p_Task->tcb._S_PSP_TASK - p_Task->Stack_Size;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	1ad2      	subs	r2, r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	639a      	str	r2, [r3, #56]	; 0x38
	OS_Control_t.PSP_Locator = p_Task->tcb._E_PSP_TASK - 8; 	// Align by 8 bytes space between Tasks
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001312:	3b08      	subs	r3, #8
 8001314:	4a0c      	ldr	r2, [pc, #48]	; (8001348 <MYRTOS_CreateTask+0x70>)
 8001316:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

	// Create the Task Stack
	OS_Create_TaskStack(p_Task);
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fde0 	bl	8000ee0 <OS_Create_TaskStack>

	//Add this task in the OSTasks Buffer
	OS_Control_t.OSTasks[OS_Control_t.NoOfTasks] = p_Task;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <MYRTOS_CreateTask+0x70>)
 8001322:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <MYRTOS_CreateTask+0x70>)
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	OS_Control_t.NoOfTasks++;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MYRTOS_CreateTask+0x70>)
 8001330:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8001334:	3301      	adds	r3, #1
 8001336:	4a04      	ldr	r2, [pc, #16]	; (8001348 <MYRTOS_CreateTask+0x70>)
 8001338:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c

	return E_OK;
 800133c:	2309      	movs	r3, #9
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200000b0 	.word	0x200000b0
 800134c:	20000770 	.word	0x20000770

08001350 <MYRTOS_ActivateTask>:


MYRTOS_ErrorID MYRTOS_ActivateTask(Task_t* p_Task)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
	// Switch the task state to Waiting if the sent task was Suspended.
	if(p_Task->TaskState == Suspended)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800135e:	2b00      	cmp	r3, #0
 8001360:	d108      	bne.n	8001374 <MYRTOS_ActivateTask+0x24>
	{
		p_Task->TaskState = Waiting;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	{
		return Task_Activation_Failed;
	}

	// Make Exceptional SVC Interrupt for Activation
	OS_SVC_Set(__SVC_Activate_Task);
 800136a:	2000      	movs	r0, #0
 800136c:	f7ff fd76 	bl	8000e5c <OS_SVC_Set>

	return E_OK;
 8001370:	2309      	movs	r3, #9
 8001372:	e000      	b.n	8001376 <MYRTOS_ActivateTask+0x26>
		return Task_Activation_Failed;
 8001374:	2303      	movs	r3, #3
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <MYRTOS_TerminateTask>:

MYRTOS_ErrorID MYRTOS_TerminateTask(Task_t* p_Task)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
	// Switch the task state to Suspended
	if(p_Task->TaskState != Suspended && p_Task->TaskState != Ready)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800138c:	2b00      	cmp	r3, #0
 800138e:	d00d      	beq.n	80013ac <MYRTOS_TerminateTask+0x2e>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001396:	2b02      	cmp	r3, #2
 8001398:	d008      	beq.n	80013ac <MYRTOS_TerminateTask+0x2e>
	{
		p_Task->TaskState = Suspended;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	{
		return Task_Termination_Failed;
	}

	// Make Exceptional SVC Interrupt for Termination
	OS_SVC_Set(__SVC_Terminate_Task);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff fd5a 	bl	8000e5c <OS_SVC_Set>

	return E_OK;
 80013a8:	2309      	movs	r3, #9
 80013aa:	e000      	b.n	80013ae <MYRTOS_TerminateTask+0x30>
		return Task_Termination_Failed;
 80013ac:	2304      	movs	r3, #4
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <MYRTOS_AcquireMutex>:

	return E_OK;
}

MYRTOS_ErrorID MYRTOS_AcquireMutex(Mutex_t* pMutex, Task_t* pTask)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
	if(pMutex->CurrUserTask == NULL_PTR)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d103      	bne.n	80013d0 <MYRTOS_AcquireMutex+0x1a>
	{
		pMutex->CurrUserTask = pTask;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	629a      	str	r2, [r3, #40]	; 0x28
 80013ce:	e01e      	b.n	800140e <MYRTOS_AcquireMutex+0x58>
	}
	else
	{
		if(pMutex->NextUserTask == NULL_PTR)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d118      	bne.n	800140a <MYRTOS_AcquireMutex+0x54>
		{
			if(pMutex-> CurrUserTask == pTask)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d101      	bne.n	80013e6 <MYRTOS_AcquireMutex+0x30>
			{
				return Taken_Resource_by_Same_Task;
 80013e2:	2306      	movs	r3, #6
 80013e4:	e014      	b.n	8001410 <MYRTOS_AcquireMutex+0x5a>
			}
			else
			{
				pMutex->NextUserTask = pTask;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	62da      	str	r2, [r3, #44]	; 0x2c

				// Switch the task state to Suspended
				if(pTask->TaskState == Running)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d107      	bne.n	8001406 <MYRTOS_AcquireMutex+0x50>
				{
					pTask->TaskState = Suspended;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				{
					return Task_Termination_Failed;
				}

				// Make Exceptional SVC Interrupt for Termination
				OS_SVC_Set(__SVC_Terminate_Task);
 80013fe:	2001      	movs	r0, #1
 8001400:	f7ff fd2c 	bl	8000e5c <OS_SVC_Set>
 8001404:	e003      	b.n	800140e <MYRTOS_AcquireMutex+0x58>
					return Task_Termination_Failed;
 8001406:	2304      	movs	r3, #4
 8001408:	e002      	b.n	8001410 <MYRTOS_AcquireMutex+0x5a>
			}
		}
		else
		{
			return MaxNoOfTasks_UsedByResource_Reached;
 800140a:	2308      	movs	r3, #8
 800140c:	e000      	b.n	8001410 <MYRTOS_AcquireMutex+0x5a>
		}
	}

	return E_OK;
 800140e:	2309      	movs	r3, #9

}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <MYRTOS_ReleaseMutex>:

MYRTOS_ErrorID MYRTOS_ReleaseMutex(Mutex_t* pMutex)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	if(pMutex->CurrUserTask == NULL_PTR)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <MYRTOS_ReleaseMutex+0x14>
	{
		return Free_Resource_Cant_be_Released;
 8001428:	2307      	movs	r3, #7
 800142a:	e017      	b.n	800145c <MYRTOS_ReleaseMutex+0x44>
	}
	else
	{
		pMutex->CurrUserTask = pMutex->NextUserTask;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
		pMutex->NextUserTask = NULL_PTR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	62da      	str	r2, [r3, #44]	; 0x2c

		// Switch the task state to Waiting if the sent task was Suspended.
		if(pMutex->CurrUserTask->TaskState == Suspended)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <MYRTOS_ReleaseMutex+0x42>
		{
			pMutex->CurrUserTask->TaskState = Waiting;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	2201      	movs	r2, #1
 800144c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		{
			return Task_Activation_Failed;
		}

		// Make Exceptional SVC Interrupt for Activation
		OS_SVC_Set(__SVC_Activate_Task);
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff fd03 	bl	8000e5c <OS_SVC_Set>
	}

	return E_OK;
 8001456:	2309      	movs	r3, #9
 8001458:	e000      	b.n	800145c <MYRTOS_ReleaseMutex+0x44>
			return Task_Activation_Failed;
 800145a:	2303      	movs	r3, #3

}
 800145c:	4618      	mov	r0, r3
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <Task_1>:
void Task_4(void);

//==============================================================================

void Task_1(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	static int count1 = 0;
    while (1)
    {
    	count1++;
 8001468:	4b10      	ldr	r3, [pc, #64]	; (80014ac <Task_1+0x48>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	3301      	adds	r3, #1
 800146e:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <Task_1+0x48>)
 8001470:	6013      	str	r3, [r2, #0]
        Task1LED ^= 1;
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <Task_1+0x4c>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	f083 0301 	eor.w	r3, r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <Task_1+0x4c>)
 800147e:	701a      	strb	r2, [r3, #0]
        if(count1 == 100)
 8001480:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <Task_1+0x48>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b64      	cmp	r3, #100	; 0x64
 8001486:	d106      	bne.n	8001496 <Task_1+0x32>
        {
        	MYRTOS_AcquireMutex(&MUTEX1, &Task1);
 8001488:	490a      	ldr	r1, [pc, #40]	; (80014b4 <Task_1+0x50>)
 800148a:	480b      	ldr	r0, [pc, #44]	; (80014b8 <Task_1+0x54>)
 800148c:	f7ff ff93 	bl	80013b6 <MYRTOS_AcquireMutex>
        	MYRTOS_ActivateTask(&Task2);
 8001490:	480a      	ldr	r0, [pc, #40]	; (80014bc <Task_1+0x58>)
 8001492:	f7ff ff5d 	bl	8001350 <MYRTOS_ActivateTask>
        }
        if(count1 == 200)
 8001496:	4b05      	ldr	r3, [pc, #20]	; (80014ac <Task_1+0x48>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2bc8      	cmp	r3, #200	; 0xc8
 800149c:	d1e4      	bne.n	8001468 <Task_1+0x4>
        {
        	count1 = 0;
 800149e:	4b03      	ldr	r3, [pc, #12]	; (80014ac <Task_1+0x48>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
        	MYRTOS_ReleaseMutex(&MUTEX1);
 80014a4:	4804      	ldr	r0, [pc, #16]	; (80014b8 <Task_1+0x54>)
 80014a6:	f7ff ffb7 	bl	8001418 <MYRTOS_ReleaseMutex>
    	count1++;
 80014aa:	e7dd      	b.n	8001468 <Task_1+0x4>
 80014ac:	20000088 	.word	0x20000088
 80014b0:	20000524 	.word	0x20000524
 80014b4:	200004a0 	.word	0x200004a0
 80014b8:	20000470 	.word	0x20000470
 80014bc:	20000528 	.word	0x20000528

080014c0 <Task_2>:
    }
}


void Task_2(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	static int count2 = 0;
    while(1)
    {
    	count2++;
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <Task_2+0x40>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3301      	adds	r3, #1
 80014ca:	4a0d      	ldr	r2, [pc, #52]	; (8001500 <Task_2+0x40>)
 80014cc:	6013      	str	r3, [r2, #0]
        Task2LED ^= 1;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <Task_2+0x44>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	f083 0301 	eor.w	r3, r3, #1
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <Task_2+0x44>)
 80014da:	701a      	strb	r2, [r3, #0]
        if(count2 == 100)
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <Task_2+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b64      	cmp	r3, #100	; 0x64
 80014e2:	d102      	bne.n	80014ea <Task_2+0x2a>
        {
        	MYRTOS_ActivateTask(&Task3);
 80014e4:	4808      	ldr	r0, [pc, #32]	; (8001508 <Task_2+0x48>)
 80014e6:	f7ff ff33 	bl	8001350 <MYRTOS_ActivateTask>
        }
        if(count2 == 200)
 80014ea:	4b05      	ldr	r3, [pc, #20]	; (8001500 <Task_2+0x40>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2bc8      	cmp	r3, #200	; 0xc8
 80014f0:	d1e8      	bne.n	80014c4 <Task_2+0x4>
        {
        	count2 = 0;
 80014f2:	4b03      	ldr	r3, [pc, #12]	; (8001500 <Task_2+0x40>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
        	MYRTOS_TerminateTask(&Task2);
 80014f8:	4804      	ldr	r0, [pc, #16]	; (800150c <Task_2+0x4c>)
 80014fa:	f7ff ff40 	bl	800137e <MYRTOS_TerminateTask>
    	count2++;
 80014fe:	e7e1      	b.n	80014c4 <Task_2+0x4>
 8001500:	2000008c 	.word	0x2000008c
 8001504:	200004e1 	.word	0x200004e1
 8001508:	200004e4 	.word	0x200004e4
 800150c:	20000528 	.word	0x20000528

08001510 <Task_3>:
    }
}


void Task_3(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	static int count3 = 0;
    while(1)
    {
    	count3++;
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <Task_3+0x40>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3301      	adds	r3, #1
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <Task_3+0x40>)
 800151c:	6013      	str	r3, [r2, #0]
        Task3LED ^= 1;
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <Task_3+0x44>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	f083 0301 	eor.w	r3, r3, #1
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <Task_3+0x44>)
 800152a:	701a      	strb	r2, [r3, #0]
        if(count3 == 100)
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <Task_3+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b64      	cmp	r3, #100	; 0x64
 8001532:	d102      	bne.n	800153a <Task_3+0x2a>
        {
        	MYRTOS_ActivateTask(&Task4);
 8001534:	4808      	ldr	r0, [pc, #32]	; (8001558 <Task_3+0x48>)
 8001536:	f7ff ff0b 	bl	8001350 <MYRTOS_ActivateTask>
        }
        if(count3 == 200)
 800153a:	4b05      	ldr	r3, [pc, #20]	; (8001550 <Task_3+0x40>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2bc8      	cmp	r3, #200	; 0xc8
 8001540:	d1e8      	bne.n	8001514 <Task_3+0x4>
        {
        	count3 = 0;
 8001542:	4b03      	ldr	r3, [pc, #12]	; (8001550 <Task_3+0x40>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
        	MYRTOS_TerminateTask(&Task3);
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <Task_3+0x4c>)
 800154a:	f7ff ff18 	bl	800137e <MYRTOS_TerminateTask>
    	count3++;
 800154e:	e7e1      	b.n	8001514 <Task_3+0x4>
 8001550:	20000090 	.word	0x20000090
 8001554:	20000568 	.word	0x20000568
 8001558:	20000430 	.word	0x20000430
 800155c:	200004e4 	.word	0x200004e4

08001560 <Task_4>:
        }
    }
}

void Task_4(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	static int count4 = 0;
    while(1)
    {
    	count4++;
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <Task_4+0x48>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	3301      	adds	r3, #1
 800156a:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <Task_4+0x48>)
 800156c:	6013      	str	r3, [r2, #0]
        Task4LED ^= 1;
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <Task_4+0x4c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	f083 0301 	eor.w	r3, r3, #1
 8001576:	b2da      	uxtb	r2, r3
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <Task_4+0x4c>)
 800157a:	701a      	strb	r2, [r3, #0]
        if(count4 == 3)
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <Task_4+0x48>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b03      	cmp	r3, #3
 8001582:	d103      	bne.n	800158c <Task_4+0x2c>
        {
        	MYRTOS_AcquireMutex(&MUTEX1, &Task4);
 8001584:	490a      	ldr	r1, [pc, #40]	; (80015b0 <Task_4+0x50>)
 8001586:	480b      	ldr	r0, [pc, #44]	; (80015b4 <Task_4+0x54>)
 8001588:	f7ff ff15 	bl	80013b6 <MYRTOS_AcquireMutex>
        }
        if(count4 == 200)
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <Task_4+0x48>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2bc8      	cmp	r3, #200	; 0xc8
 8001592:	d1e7      	bne.n	8001564 <Task_4+0x4>
        {
        	MYRTOS_ReleaseMutex(&MUTEX1);
 8001594:	4807      	ldr	r0, [pc, #28]	; (80015b4 <Task_4+0x54>)
 8001596:	f7ff ff3f 	bl	8001418 <MYRTOS_ReleaseMutex>
        	count4 = 0;
 800159a:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <Task_4+0x48>)
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
        	MYRTOS_TerminateTask(&Task4);
 80015a0:	4803      	ldr	r0, [pc, #12]	; (80015b0 <Task_4+0x50>)
 80015a2:	f7ff feec 	bl	800137e <MYRTOS_TerminateTask>
    	count4++;
 80015a6:	e7dd      	b.n	8001564 <Task_4+0x4>
 80015a8:	20000094 	.word	0x20000094
 80015ac:	200004e0 	.word	0x200004e0
 80015b0:	20000430 	.word	0x20000430
 80015b4:	20000470 	.word	0x20000470

080015b8 <main>:
}

//==============================================================================

int main(void)
{
 80015b8:	b5b0      	push	{r4, r5, r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0

	if(MYRTOS_Init() != E_OK)
 80015be:	f7ff fe03 	bl	80011c8 <MYRTOS_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b09      	cmp	r3, #9
 80015c6:	d000      	beq.n	80015ca <main+0x12>
	{
		// Debug on Errors
		while(1);
 80015c8:	e7fe      	b.n	80015c8 <main+0x10>
	}

	char Data[] = {'A','B','C'};
 80015ca:	4a37      	ldr	r2, [pc, #220]	; (80016a8 <main+0xf0>)
 80015cc:	1d3b      	adds	r3, r7, #4
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	4611      	mov	r1, r2
 80015d2:	8019      	strh	r1, [r3, #0]
 80015d4:	3302      	adds	r3, #2
 80015d6:	0c12      	lsrs	r2, r2, #16
 80015d8:	701a      	strb	r2, [r3, #0]

	strcpy(MUTEX1.MutexName,"Mutex1_Shared_T1_T4");
 80015da:	4a34      	ldr	r2, [pc, #208]	; (80016ac <main+0xf4>)
 80015dc:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <main+0xf8>)
 80015de:	4614      	mov	r4, r2
 80015e0:	461d      	mov	r5, r3
 80015e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e6:	682b      	ldr	r3, [r5, #0]
 80015e8:	6023      	str	r3, [r4, #0]
	MUTEX1.PayLoad = Data;
 80015ea:	4a32      	ldr	r2, [pc, #200]	; (80016b4 <main+0xfc>)
 80015ec:	1d3b      	adds	r3, r7, #4
 80015ee:	6013      	str	r3, [r2, #0]
	MUTEX1.PayLoadSize = sizeof(Data);
 80015f0:	4b30      	ldr	r3, [pc, #192]	; (80016b4 <main+0xfc>)
 80015f2:	2203      	movs	r2, #3
 80015f4:	605a      	str	r2, [r3, #4]

	strcpy(Task1.TaskName,"Task1");
 80015f6:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <main+0x100>)
 80015f8:	4a30      	ldr	r2, [pc, #192]	; (80016bc <main+0x104>)
 80015fa:	6810      	ldr	r0, [r2, #0]
 80015fc:	6018      	str	r0, [r3, #0]
 80015fe:	8892      	ldrh	r2, [r2, #4]
 8001600:	809a      	strh	r2, [r3, #4]
	Task1.Priority = 4;
 8001602:	4b2f      	ldr	r3, [pc, #188]	; (80016c0 <main+0x108>)
 8001604:	2204      	movs	r2, #4
 8001606:	711a      	strb	r2, [r3, #4]
	Task1.Stack_Size = 1024; // 1024 bytes
 8001608:	4b2d      	ldr	r3, [pc, #180]	; (80016c0 <main+0x108>)
 800160a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160e:	601a      	str	r2, [r3, #0]
	Task1.p_TaskEntry = Task_1;
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <main+0x108>)
 8001612:	4a2c      	ldr	r2, [pc, #176]	; (80016c4 <main+0x10c>)
 8001614:	631a      	str	r2, [r3, #48]	; 0x30
	Task1.AutoStart = TRUE;
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <main+0x108>)
 8001618:	2201      	movs	r2, #1
 800161a:	715a      	strb	r2, [r3, #5]

	strcpy(Task2.TaskName,"Task2");
 800161c:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <main+0x110>)
 800161e:	4a2b      	ldr	r2, [pc, #172]	; (80016cc <main+0x114>)
 8001620:	6810      	ldr	r0, [r2, #0]
 8001622:	6018      	str	r0, [r3, #0]
 8001624:	8892      	ldrh	r2, [r2, #4]
 8001626:	809a      	strh	r2, [r3, #4]
	Task2.Priority = 3;
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <main+0x118>)
 800162a:	2203      	movs	r2, #3
 800162c:	711a      	strb	r2, [r3, #4]
	Task2.Stack_Size = 1024; // 1024 bytes
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <main+0x118>)
 8001630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001634:	601a      	str	r2, [r3, #0]
	Task2.p_TaskEntry = Task_2;
 8001636:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <main+0x118>)
 8001638:	4a26      	ldr	r2, [pc, #152]	; (80016d4 <main+0x11c>)
 800163a:	631a      	str	r2, [r3, #48]	; 0x30

	strcpy(Task3.TaskName,"Task3");
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <main+0x120>)
 800163e:	4a27      	ldr	r2, [pc, #156]	; (80016dc <main+0x124>)
 8001640:	6810      	ldr	r0, [r2, #0]
 8001642:	6018      	str	r0, [r3, #0]
 8001644:	8892      	ldrh	r2, [r2, #4]
 8001646:	809a      	strh	r2, [r3, #4]
	Task3.Priority = 2;
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <main+0x128>)
 800164a:	2202      	movs	r2, #2
 800164c:	711a      	strb	r2, [r3, #4]
	Task3.Stack_Size = 1024; // 1024 bytes
 800164e:	4b24      	ldr	r3, [pc, #144]	; (80016e0 <main+0x128>)
 8001650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001654:	601a      	str	r2, [r3, #0]
	Task3.p_TaskEntry = Task_3;
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <main+0x128>)
 8001658:	4a22      	ldr	r2, [pc, #136]	; (80016e4 <main+0x12c>)
 800165a:	631a      	str	r2, [r3, #48]	; 0x30

	strcpy(Task4.TaskName,"Task4");
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <main+0x130>)
 800165e:	4a23      	ldr	r2, [pc, #140]	; (80016ec <main+0x134>)
 8001660:	6810      	ldr	r0, [r2, #0]
 8001662:	6018      	str	r0, [r3, #0]
 8001664:	8892      	ldrh	r2, [r2, #4]
 8001666:	809a      	strh	r2, [r3, #4]
	Task4.Priority = 1;
 8001668:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <main+0x138>)
 800166a:	2201      	movs	r2, #1
 800166c:	711a      	strb	r2, [r3, #4]
	Task4.Stack_Size = 1024; // 1024 bytes
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <main+0x138>)
 8001670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001674:	601a      	str	r2, [r3, #0]
	Task4.p_TaskEntry = Task_4;
 8001676:	4b1e      	ldr	r3, [pc, #120]	; (80016f0 <main+0x138>)
 8001678:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <main+0x13c>)
 800167a:	631a      	str	r2, [r3, #48]	; 0x30

	MYRTOS_CreateTask(&Task1);
 800167c:	4810      	ldr	r0, [pc, #64]	; (80016c0 <main+0x108>)
 800167e:	f7ff fe2b 	bl	80012d8 <MYRTOS_CreateTask>
	MYRTOS_CreateTask(&Task2);
 8001682:	4813      	ldr	r0, [pc, #76]	; (80016d0 <main+0x118>)
 8001684:	f7ff fe28 	bl	80012d8 <MYRTOS_CreateTask>
	MYRTOS_CreateTask(&Task3);
 8001688:	4815      	ldr	r0, [pc, #84]	; (80016e0 <main+0x128>)
 800168a:	f7ff fe25 	bl	80012d8 <MYRTOS_CreateTask>
	MYRTOS_CreateTask(&Task4);
 800168e:	4818      	ldr	r0, [pc, #96]	; (80016f0 <main+0x138>)
 8001690:	f7ff fe22 	bl	80012d8 <MYRTOS_CreateTask>

	MYRTOS_ActivateTask(&Task1);
 8001694:	480a      	ldr	r0, [pc, #40]	; (80016c0 <main+0x108>)
 8001696:	f7ff fe5b 	bl	8001350 <MYRTOS_ActivateTask>

	MYRTOS_StartOS();
 800169a:	f7ff fdeb 	bl	8001274 <MYRTOS_StartOS>
 800169e:	2300      	movs	r3, #0

}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bdb0      	pop	{r4, r5, r7, pc}
 80016a8:	080017ec 	.word	0x080017ec
 80016ac:	20000478 	.word	0x20000478
 80016b0:	080017b8 	.word	0x080017b8
 80016b4:	20000470 	.word	0x20000470
 80016b8:	200004a6 	.word	0x200004a6
 80016bc:	080017cc 	.word	0x080017cc
 80016c0:	200004a0 	.word	0x200004a0
 80016c4:	08001465 	.word	0x08001465
 80016c8:	2000052e 	.word	0x2000052e
 80016cc:	080017d4 	.word	0x080017d4
 80016d0:	20000528 	.word	0x20000528
 80016d4:	080014c1 	.word	0x080014c1
 80016d8:	200004ea 	.word	0x200004ea
 80016dc:	080017dc 	.word	0x080017dc
 80016e0:	200004e4 	.word	0x200004e4
 80016e4:	08001511 	.word	0x08001511
 80016e8:	20000436 	.word	0x20000436
 80016ec:	080017e4 	.word	0x080017e4
 80016f0:	20000430 	.word	0x20000430
 80016f4:	08001561 	.word	0x08001561

080016f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80016fa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <LoopForever+0x6>)
  ldr r1, =_edata
 8001702:	490d      	ldr	r1, [pc, #52]	; (8001738 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001704:	4a0d      	ldr	r2, [pc, #52]	; (800173c <LoopForever+0xe>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001718:	4c0a      	ldr	r4, [pc, #40]	; (8001744 <LoopForever+0x16>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001726:	f000 f811 	bl	800174c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800172a:	f7ff ff45 	bl	80015b8 <main>

0800172e <LoopForever>:

LoopForever:
    b LoopForever
 800172e:	e7fe      	b.n	800172e <LoopForever>
  ldr   r0, =_estack
 8001730:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001734:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001738:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800173c:	080017f8 	.word	0x080017f8
  ldr r2, =_sbss
 8001740:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001744:	2000056c 	.word	0x2000056c

08001748 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001748:	e7fe      	b.n	8001748 <ADC1_2_IRQHandler>
	...

0800174c <__libc_init_array>:
 800174c:	b570      	push	{r4, r5, r6, lr}
 800174e:	2500      	movs	r5, #0
 8001750:	4e0c      	ldr	r6, [pc, #48]	; (8001784 <__libc_init_array+0x38>)
 8001752:	4c0d      	ldr	r4, [pc, #52]	; (8001788 <__libc_init_array+0x3c>)
 8001754:	1ba4      	subs	r4, r4, r6
 8001756:	10a4      	asrs	r4, r4, #2
 8001758:	42a5      	cmp	r5, r4
 800175a:	d109      	bne.n	8001770 <__libc_init_array+0x24>
 800175c:	f000 f81a 	bl	8001794 <_init>
 8001760:	2500      	movs	r5, #0
 8001762:	4e0a      	ldr	r6, [pc, #40]	; (800178c <__libc_init_array+0x40>)
 8001764:	4c0a      	ldr	r4, [pc, #40]	; (8001790 <__libc_init_array+0x44>)
 8001766:	1ba4      	subs	r4, r4, r6
 8001768:	10a4      	asrs	r4, r4, #2
 800176a:	42a5      	cmp	r5, r4
 800176c:	d105      	bne.n	800177a <__libc_init_array+0x2e>
 800176e:	bd70      	pop	{r4, r5, r6, pc}
 8001770:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001774:	4798      	blx	r3
 8001776:	3501      	adds	r5, #1
 8001778:	e7ee      	b.n	8001758 <__libc_init_array+0xc>
 800177a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800177e:	4798      	blx	r3
 8001780:	3501      	adds	r5, #1
 8001782:	e7f2      	b.n	800176a <__libc_init_array+0x1e>
 8001784:	080017f0 	.word	0x080017f0
 8001788:	080017f0 	.word	0x080017f0
 800178c:	080017f0 	.word	0x080017f0
 8001790:	080017f4 	.word	0x080017f4

08001794 <_init>:
 8001794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001796:	bf00      	nop
 8001798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800179a:	bc08      	pop	{r3}
 800179c:	469e      	mov	lr, r3
 800179e:	4770      	bx	lr

080017a0 <_fini>:
 80017a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017a2:	bf00      	nop
 80017a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017a6:	bc08      	pop	{r3}
 80017a8:	469e      	mov	lr, r3
 80017aa:	4770      	bx	lr
