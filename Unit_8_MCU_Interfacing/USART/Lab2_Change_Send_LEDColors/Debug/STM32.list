
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011e0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001310  08001310  00011310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001388  08001388  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08001388  08001388  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001388  08001388  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001388  08001388  00011388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800138c  0800138c  0001138c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08001390  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000034  080013c4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080013c4  000200f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bd2  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000080c  00000000  00000000  00021c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d6e  00000000  00000000  0002243b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000248  00000000  00000000  000231b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001e0  00000000  00000000  000233f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000093f  00000000  00000000  000235d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000c06  00000000  00000000  00023f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007e50  00000000  00000000  00024b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002c96d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000730  00000000  00000000  0002c9e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000034 	.word	0x20000034
 800014c:	00000000 	.word	0x00000000
 8000150:	080012f8 	.word	0x080012f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000038 	.word	0x20000038
 800016c:	080012f8 	.word	0x080012f8

08000170 <EXTI_NVIC_EN>:
/*================================================================
 * Description :
 * Private Function used to enable the required EXTI Input Line in the NVIC Interrupt Controller.
 * It takes the EXTI Input Line required to enable.
 */
static void EXTI_NVIC_EN(const uint8_t Input_Line_Number){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]

	switch(Input_Line_Number)
 800017a:	79fb      	ldrb	r3, [r7, #7]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d854      	bhi.n	800022a <EXTI_NVIC_EN+0xba>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <EXTI_NVIC_EN+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001d7 	.word	0x080001d7
 8000190:	080001e5 	.word	0x080001e5
 8000194:	080001f3 	.word	0x080001f3
 8000198:	08000201 	.word	0x08000201
 800019c:	0800020f 	.word	0x0800020f
 80001a0:	0800020f 	.word	0x0800020f
 80001a4:	0800020f 	.word	0x0800020f
 80001a8:	0800020f 	.word	0x0800020f
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	0800021d 	.word	0x0800021d
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	0800021d 	.word	0x0800021d
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	0800021d 	.word	0x0800021d
 80001c4:	0800021d 	.word	0x0800021d
	{
		case 0:  NVIC_IRQ6_EN(); break;
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <EXTI_NVIC_EN+0xc4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a19      	ldr	r2, [pc, #100]	; (8000234 <EXTI_NVIC_EN+0xc4>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	e029      	b.n	800022a <EXTI_NVIC_EN+0xba>
		case 1:  NVIC_IRQ7_EN(); break;
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <EXTI_NVIC_EN+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a16      	ldr	r2, [pc, #88]	; (8000234 <EXTI_NVIC_EN+0xc4>)
 80001dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e0:	6013      	str	r3, [r2, #0]
 80001e2:	e022      	b.n	800022a <EXTI_NVIC_EN+0xba>
		case 2:  NVIC_IRQ8_EN(); break;
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <EXTI_NVIC_EN+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <EXTI_NVIC_EN+0xc4>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
 80001f0:	e01b      	b.n	800022a <EXTI_NVIC_EN+0xba>
		case 3:  NVIC_IRQ9_EN(); break;
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <EXTI_NVIC_EN+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <EXTI_NVIC_EN+0xc4>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
 80001fe:	e014      	b.n	800022a <EXTI_NVIC_EN+0xba>
		case 4:  NVIC_IRQ10_EN(); break;
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <EXTI_NVIC_EN+0xc4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <EXTI_NVIC_EN+0xc4>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
 800020c:	e00d      	b.n	800022a <EXTI_NVIC_EN+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:  NVIC_IRQ23_EN(); break;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <EXTI_NVIC_EN+0xc4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <EXTI_NVIC_EN+0xc4>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000218:	6013      	str	r3, [r2, #0]
 800021a:	e006      	b.n	800022a <EXTI_NVIC_EN+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: NVIC_IRQ40_EN(); break;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <EXTI_NVIC_EN+0xc8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <EXTI_NVIC_EN+0xc8>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	bf00      	nop
	}
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000e104 	.word	0xe000e104

0800023c <EXTI_NVIC_DIS>:
/*================================================================
 * Description :
 * Private Function used to disable the required EXTI Input Line in the NVIC Interrupt Controller.
 * It takes the EXTI Input Line required to disable.
 */
static void EXTI_NVIC_DIS(const uint8_t Input_Line_Number){
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	71fb      	strb	r3, [r7, #7]

	switch(Input_Line_Number)
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <EXTI_NVIC_DIS+0xba>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <EXTI_NVIC_DIS+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000295 	.word	0x08000295
 8000258:	080002a3 	.word	0x080002a3
 800025c:	080002b1 	.word	0x080002b1
 8000260:	080002bf 	.word	0x080002bf
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002db 	.word	0x080002db
 800026c:	080002db 	.word	0x080002db
 8000270:	080002db 	.word	0x080002db
 8000274:	080002db 	.word	0x080002db
 8000278:	080002db 	.word	0x080002db
 800027c:	080002e9 	.word	0x080002e9
 8000280:	080002e9 	.word	0x080002e9
 8000284:	080002e9 	.word	0x080002e9
 8000288:	080002e9 	.word	0x080002e9
 800028c:	080002e9 	.word	0x080002e9
 8000290:	080002e9 	.word	0x080002e9
	{
		case 0:  NVIC_IRQ6_DIS(); break;
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <EXTI_NVIC_DIS+0xc4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <EXTI_NVIC_DIS+0xc4>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029e:	6013      	str	r3, [r2, #0]
 80002a0:	e029      	b.n	80002f6 <EXTI_NVIC_DIS+0xba>
		case 1:  NVIC_IRQ7_DIS(); break;
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <EXTI_NVIC_DIS+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <EXTI_NVIC_DIS+0xc4>)
 80002a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ac:	6013      	str	r3, [r2, #0]
 80002ae:	e022      	b.n	80002f6 <EXTI_NVIC_DIS+0xba>
		case 2:  NVIC_IRQ8_DIS(); break;
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <EXTI_NVIC_DIS+0xc4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <EXTI_NVIC_DIS+0xc4>)
 80002b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ba:	6013      	str	r3, [r2, #0]
 80002bc:	e01b      	b.n	80002f6 <EXTI_NVIC_DIS+0xba>
		case 3:  NVIC_IRQ9_DIS(); break;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <EXTI_NVIC_DIS+0xc4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <EXTI_NVIC_DIS+0xc4>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6013      	str	r3, [r2, #0]
 80002ca:	e014      	b.n	80002f6 <EXTI_NVIC_DIS+0xba>
		case 4:  NVIC_IRQ10_DIS(); break;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <EXTI_NVIC_DIS+0xc4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <EXTI_NVIC_DIS+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6013      	str	r3, [r2, #0]
 80002d8:	e00d      	b.n	80002f6 <EXTI_NVIC_DIS+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:  NVIC_IRQ23_DIS(); break;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <EXTI_NVIC_DIS+0xc4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a08      	ldr	r2, [pc, #32]	; (8000300 <EXTI_NVIC_DIS+0xc4>)
 80002e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e4:	6013      	str	r3, [r2, #0]
 80002e6:	e006      	b.n	80002f6 <EXTI_NVIC_DIS+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: NVIC_IRQ40_DIS(); break;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <EXTI_NVIC_DIS+0xc8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <EXTI_NVIC_DIS+0xc8>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
 80002f4:	bf00      	nop
	}
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e180 	.word	0xe000e180
 8000304:	e000e184 	.word	0xe000e184

08000308 <MCAL_EXTI_Init>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_EXTI_Init(EXTI_PinConfig_t* EXTI_PinConfigPtr){
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]

	/*
	* 1) Configure GPIO To Be Alternative Function Input (Floating Input)
	*/
	MCAL_GPIO_Init(&(EXTI_PinConfigPtr->EXTI_Pin.EXTI_GPIO_PinConfig));
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	3304      	adds	r3, #4
 8000314:	4618      	mov	r0, r3
 8000316:	f000 fa45 	bl	80007a4 <MCAL_GPIO_Init>

	/*
	 * 2) Update AFIO to Route between EXTI Line With Port A,B,C,D,E
	 */
	uint8_t AFIO_EXTICR_index = EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line / 4;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	089b      	lsrs	r3, r3, #2
 8000320:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_shift = (EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line / 4) * 4;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	089b      	lsrs	r3, r3, #2
 8000328:	b2db      	uxtb	r3, r3
 800032a:	009b      	lsls	r3, r3, #2
 800032c:	73bb      	strb	r3, [r7, #14]
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0x0F<<AFIO_EXTICR_shift);
 800032e:	4a62      	ldr	r2, [pc, #392]	; (80004b8 <MCAL_EXTI_Init+0x1b0>)
 8000330:	7bfb      	ldrb	r3, [r7, #15]
 8000332:	3302      	adds	r3, #2
 8000334:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000338:	7bbb      	ldrb	r3, [r7, #14]
 800033a:	210f      	movs	r1, #15
 800033c:	fa01 f303 	lsl.w	r3, r1, r3
 8000340:	43db      	mvns	r3, r3
 8000342:	4618      	mov	r0, r3
 8000344:	495c      	ldr	r1, [pc, #368]	; (80004b8 <MCAL_EXTI_Init+0x1b0>)
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	4002      	ands	r2, r0
 800034a:	3302      	adds	r3, #2
 800034c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_index] |= (EXTI_AFIO_PortValue(EXTI_PinConfigPtr->EXTI_Pin.EXTI_GPIO_PinConfig.GPIO_Port)<<AFIO_EXTICR_shift);
 8000350:	4a59      	ldr	r2, [pc, #356]	; (80004b8 <MCAL_EXTI_Init+0x1b0>)
 8000352:	7bfb      	ldrb	r3, [r7, #15]
 8000354:	3302      	adds	r3, #2
 8000356:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	4957      	ldr	r1, [pc, #348]	; (80004bc <MCAL_EXTI_Init+0x1b4>)
 8000360:	428b      	cmp	r3, r1
 8000362:	d01d      	beq.n	80003a0 <MCAL_EXTI_Init+0x98>
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	685b      	ldr	r3, [r3, #4]
 8000368:	4955      	ldr	r1, [pc, #340]	; (80004c0 <MCAL_EXTI_Init+0x1b8>)
 800036a:	428b      	cmp	r3, r1
 800036c:	d016      	beq.n	800039c <MCAL_EXTI_Init+0x94>
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	4954      	ldr	r1, [pc, #336]	; (80004c4 <MCAL_EXTI_Init+0x1bc>)
 8000374:	428b      	cmp	r3, r1
 8000376:	d00f      	beq.n	8000398 <MCAL_EXTI_Init+0x90>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	4952      	ldr	r1, [pc, #328]	; (80004c8 <MCAL_EXTI_Init+0x1c0>)
 800037e:	428b      	cmp	r3, r1
 8000380:	d008      	beq.n	8000394 <MCAL_EXTI_Init+0x8c>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	4951      	ldr	r1, [pc, #324]	; (80004cc <MCAL_EXTI_Init+0x1c4>)
 8000388:	428b      	cmp	r3, r1
 800038a:	d101      	bne.n	8000390 <MCAL_EXTI_Init+0x88>
 800038c:	2304      	movs	r3, #4
 800038e:	e008      	b.n	80003a2 <MCAL_EXTI_Init+0x9a>
 8000390:	2300      	movs	r3, #0
 8000392:	e006      	b.n	80003a2 <MCAL_EXTI_Init+0x9a>
 8000394:	2303      	movs	r3, #3
 8000396:	e004      	b.n	80003a2 <MCAL_EXTI_Init+0x9a>
 8000398:	2302      	movs	r3, #2
 800039a:	e002      	b.n	80003a2 <MCAL_EXTI_Init+0x9a>
 800039c:	2301      	movs	r3, #1
 800039e:	e000      	b.n	80003a2 <MCAL_EXTI_Init+0x9a>
 80003a0:	2300      	movs	r3, #0
 80003a2:	7bb9      	ldrb	r1, [r7, #14]
 80003a4:	408b      	lsls	r3, r1
 80003a6:	4618      	mov	r0, r3
 80003a8:	4943      	ldr	r1, [pc, #268]	; (80004b8 <MCAL_EXTI_Init+0x1b0>)
 80003aa:	7bfb      	ldrb	r3, [r7, #15]
 80003ac:	4302      	orrs	r2, r0
 80003ae:	3302      	adds	r3, #2
 80003b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*
	* 3) Update Rising / Falling Edge Register
	*/

	//Reset Falling and Rising Registers before updating
	EXTI->RTSR &= ~(1<<EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line);
 80003b4:	4b46      	ldr	r3, [pc, #280]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	687a      	ldr	r2, [r7, #4]
 80003ba:	7812      	ldrb	r2, [r2, #0]
 80003bc:	4611      	mov	r1, r2
 80003be:	2201      	movs	r2, #1
 80003c0:	408a      	lsls	r2, r1
 80003c2:	43d2      	mvns	r2, r2
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a42      	ldr	r2, [pc, #264]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 80003c8:	400b      	ands	r3, r1
 80003ca:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~(1<<EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line);
 80003cc:	4b40      	ldr	r3, [pc, #256]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 80003ce:	68db      	ldr	r3, [r3, #12]
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	7812      	ldrb	r2, [r2, #0]
 80003d4:	4611      	mov	r1, r2
 80003d6:	2201      	movs	r2, #1
 80003d8:	408a      	lsls	r2, r1
 80003da:	43d2      	mvns	r2, r2
 80003dc:	4611      	mov	r1, r2
 80003de:	4a3c      	ldr	r2, [pc, #240]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 80003e0:	400b      	ands	r3, r1
 80003e2:	60d3      	str	r3, [r2, #12]
	//Set the required trigger specified in the configuration
	switch(EXTI_PinConfigPtr->EXTI_Trigger){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	7b1b      	ldrb	r3, [r3, #12]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d00f      	beq.n	800040c <MCAL_EXTI_Init+0x104>
 80003ec:	2b02      	cmp	r3, #2
 80003ee:	d019      	beq.n	8000424 <MCAL_EXTI_Init+0x11c>
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d12e      	bne.n	8000452 <MCAL_EXTI_Init+0x14a>
		case EXTI_TRIGGER_RISING:
			EXTI->RTSR |=  (1<<EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line);
 80003f4:	4b36      	ldr	r3, [pc, #216]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	7812      	ldrb	r2, [r2, #0]
 80003fc:	4611      	mov	r1, r2
 80003fe:	2201      	movs	r2, #1
 8000400:	408a      	lsls	r2, r1
 8000402:	4611      	mov	r1, r2
 8000404:	4a32      	ldr	r2, [pc, #200]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 8000406:	430b      	orrs	r3, r1
 8000408:	6093      	str	r3, [r2, #8]
			break;
 800040a:	e022      	b.n	8000452 <MCAL_EXTI_Init+0x14a>

		case EXTI_TRIGGER_FALLING:
			EXTI->FTSR |=  (1<<EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line);
 800040c:	4b30      	ldr	r3, [pc, #192]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 800040e:	68db      	ldr	r3, [r3, #12]
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	7812      	ldrb	r2, [r2, #0]
 8000414:	4611      	mov	r1, r2
 8000416:	2201      	movs	r2, #1
 8000418:	408a      	lsls	r2, r1
 800041a:	4611      	mov	r1, r2
 800041c:	4a2c      	ldr	r2, [pc, #176]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 800041e:	430b      	orrs	r3, r1
 8000420:	60d3      	str	r3, [r2, #12]
			break;
 8000422:	e016      	b.n	8000452 <MCAL_EXTI_Init+0x14a>

		case EXTI_TRIGGER_RISING_FALLING:
			EXTI->RTSR |= (1<<EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line);
 8000424:	4b2a      	ldr	r3, [pc, #168]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	687a      	ldr	r2, [r7, #4]
 800042a:	7812      	ldrb	r2, [r2, #0]
 800042c:	4611      	mov	r1, r2
 800042e:	2201      	movs	r2, #1
 8000430:	408a      	lsls	r2, r1
 8000432:	4611      	mov	r1, r2
 8000434:	4a26      	ldr	r2, [pc, #152]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 8000436:	430b      	orrs	r3, r1
 8000438:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1<<EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line);
 800043a:	4b25      	ldr	r3, [pc, #148]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 800043c:	68db      	ldr	r3, [r3, #12]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	7812      	ldrb	r2, [r2, #0]
 8000442:	4611      	mov	r1, r2
 8000444:	2201      	movs	r2, #1
 8000446:	408a      	lsls	r2, r1
 8000448:	4611      	mov	r1, r2
 800044a:	4a21      	ldr	r2, [pc, #132]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 800044c:	430b      	orrs	r3, r1
 800044e:	60d3      	str	r3, [r2, #12]
			break;
 8000450:	bf00      	nop
	}

	/*
	 * 4) Update Interrupt Handling CallBack
	 */
	g_IRQ_CallBackPtr[EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line] = EXTI_PinConfigPtr->IRQ_CallBackPtr;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	4619      	mov	r1, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	691b      	ldr	r3, [r3, #16]
 800045c:	4a1d      	ldr	r2, [pc, #116]	; (80004d4 <MCAL_EXTI_Init+0x1cc>)
 800045e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/*
	 * 5) Enable/Disable IRQ EXTI & NVIC
	 */
	if(EXTI_PinConfigPtr->EXTI_Enable == EXTI_IRQ_ENABLE)
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	7b5b      	ldrb	r3, [r3, #13]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d110      	bne.n	800048c <MCAL_EXTI_Init+0x184>
	{
		EXTI->IMR |= (1<<EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line);
 800046a:	4b19      	ldr	r3, [pc, #100]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	687a      	ldr	r2, [r7, #4]
 8000470:	7812      	ldrb	r2, [r2, #0]
 8000472:	4611      	mov	r1, r2
 8000474:	2201      	movs	r2, #1
 8000476:	408a      	lsls	r2, r1
 8000478:	4611      	mov	r1, r2
 800047a:	4a15      	ldr	r2, [pc, #84]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 800047c:	430b      	orrs	r3, r1
 800047e:	6013      	str	r3, [r2, #0]
		EXTI_NVIC_EN(EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff fe73 	bl	8000170 <EXTI_NVIC_EN>
	{
		EXTI->IMR &= ~(1<<EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line);
		EXTI_NVIC_DIS(EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line);
	}

}
 800048a:	e010      	b.n	80004ae <MCAL_EXTI_Init+0x1a6>
		EXTI->IMR &= ~(1<<EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line);
 800048c:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	687a      	ldr	r2, [r7, #4]
 8000492:	7812      	ldrb	r2, [r2, #0]
 8000494:	4611      	mov	r1, r2
 8000496:	2201      	movs	r2, #1
 8000498:	408a      	lsls	r2, r1
 800049a:	43d2      	mvns	r2, r2
 800049c:	4611      	mov	r1, r2
 800049e:	4a0c      	ldr	r2, [pc, #48]	; (80004d0 <MCAL_EXTI_Init+0x1c8>)
 80004a0:	400b      	ands	r3, r1
 80004a2:	6013      	str	r3, [r2, #0]
		EXTI_NVIC_DIS(EXTI_PinConfigPtr->EXTI_Pin.EXTI_Input_Line);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff fec7 	bl	800023c <EXTI_NVIC_DIS>
}
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40010000 	.word	0x40010000
 80004bc:	40010800 	.word	0x40010800
 80004c0:	40010c00 	.word	0x40010c00
 80004c4:	40011000 	.word	0x40011000
 80004c8:	40011400 	.word	0x40011400
 80004cc:	40011800 	.word	0x40011800
 80004d0:	40010400 	.word	0x40010400
 80004d4:	20000050 	.word	0x20000050

080004d8 <EXTI0_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void EXTI0_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<0);
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <EXTI0_IRQHandler+0x1c>)
 80004de:	695b      	ldr	r3, [r3, #20]
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <EXTI0_IRQHandler+0x1c>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 80004e8:	4b03      	ldr	r3, [pc, #12]	; (80004f8 <EXTI0_IRQHandler+0x20>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4798      	blx	r3

}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	40010400 	.word	0x40010400
 80004f8:	20000050 	.word	0x20000050

080004fc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<1);
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <EXTI1_IRQHandler+0x1c>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <EXTI1_IRQHandler+0x1c>)
 8000506:	f043 0302 	orr.w	r3, r3, #2
 800050a:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <EXTI1_IRQHandler+0x20>)
 800050e:	685b      	ldr	r3, [r3, #4]
 8000510:	4798      	blx	r3

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40010400 	.word	0x40010400
 800051c:	20000050 	.word	0x20000050

08000520 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<2);
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <EXTI2_IRQHandler+0x1c>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <EXTI2_IRQHandler+0x1c>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <EXTI2_IRQHandler+0x20>)
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	4798      	blx	r3

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40010400 	.word	0x40010400
 8000540:	20000050 	.word	0x20000050

08000544 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<3);
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <EXTI3_IRQHandler+0x1c>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <EXTI3_IRQHandler+0x1c>)
 800054e:	f043 0308 	orr.w	r3, r3, #8
 8000552:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[3]();
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <EXTI3_IRQHandler+0x20>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	4798      	blx	r3

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40010400 	.word	0x40010400
 8000564:	20000050 	.word	0x20000050

08000568 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one
	EXTI->PR |= (1<<4);
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <EXTI4_IRQHandler+0x1c>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <EXTI4_IRQHandler+0x1c>)
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	6153      	str	r3, [r2, #20]

	//Calling the call back function
	g_IRQ_CallBackPtr[4]();
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <EXTI4_IRQHandler+0x20>)
 800057a:	691b      	ldr	r3, [r3, #16]
 800057c:	4798      	blx	r3

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40010400 	.word	0x40010400
 8000588:	20000050 	.word	0x20000050

0800058c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<5)) {EXTI->PR |= (1<<5); g_IRQ_CallBackPtr[5]();}
 8000590:	4b26      	ldr	r3, [pc, #152]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	f003 0320 	and.w	r3, r3, #32
 8000598:	2b00      	cmp	r3, #0
 800059a:	d008      	beq.n	80005ae <EXTI9_5_IRQHandler+0x22>
 800059c:	4b23      	ldr	r3, [pc, #140]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	4a22      	ldr	r2, [pc, #136]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005a2:	f043 0320 	orr.w	r3, r3, #32
 80005a6:	6153      	str	r3, [r2, #20]
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <EXTI9_5_IRQHandler+0xa4>)
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	4798      	blx	r3
	if(EXTI->PR & (1<<6)) {EXTI->PR |= (1<<6); g_IRQ_CallBackPtr[6]();}
 80005ae:	4b1f      	ldr	r3, [pc, #124]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d008      	beq.n	80005cc <EXTI9_5_IRQHandler+0x40>
 80005ba:	4b1c      	ldr	r3, [pc, #112]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a1b      	ldr	r2, [pc, #108]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c4:	6153      	str	r3, [r2, #20]
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <EXTI9_5_IRQHandler+0xa4>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4798      	blx	r3
	if(EXTI->PR & (1<<7)) {EXTI->PR |= (1<<7); g_IRQ_CallBackPtr[7]();}
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d008      	beq.n	80005ea <EXTI9_5_IRQHandler+0x5e>
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a13      	ldr	r2, [pc, #76]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e2:	6153      	str	r3, [r2, #20]
 80005e4:	4b12      	ldr	r3, [pc, #72]	; (8000630 <EXTI9_5_IRQHandler+0xa4>)
 80005e6:	69db      	ldr	r3, [r3, #28]
 80005e8:	4798      	blx	r3
	if(EXTI->PR & (1<<8)) {EXTI->PR |= (1<<8); g_IRQ_CallBackPtr[8]();}
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d008      	beq.n	8000608 <EXTI9_5_IRQHandler+0x7c>
 80005f6:	4b0d      	ldr	r3, [pc, #52]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a0c      	ldr	r2, [pc, #48]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 80005fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <EXTI9_5_IRQHandler+0xa4>)
 8000604:	6a1b      	ldr	r3, [r3, #32]
 8000606:	4798      	blx	r3
	if(EXTI->PR & (1<<9)) {EXTI->PR |= (1<<9); g_IRQ_CallBackPtr[9]();}
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000610:	2b00      	cmp	r3, #0
 8000612:	d008      	beq.n	8000626 <EXTI9_5_IRQHandler+0x9a>
 8000614:	4b05      	ldr	r3, [pc, #20]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <EXTI9_5_IRQHandler+0xa0>)
 800061a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800061e:	6153      	str	r3, [r2, #20]
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <EXTI9_5_IRQHandler+0xa4>)
 8000622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000624:	4798      	blx	r3
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40010400 	.word	0x40010400
 8000630:	20000050 	.word	0x20000050

08000634 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	//Clear Status Pin in Pending Register by writing the required pin by one and Calling the call back function.
	if(EXTI->PR & (1<<10)) {EXTI->PR |= (1<<10); g_IRQ_CallBackPtr[10]();}
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000640:	2b00      	cmp	r3, #0
 8000642:	d008      	beq.n	8000656 <EXTI15_10_IRQHandler+0x22>
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	4a22      	ldr	r2, [pc, #136]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 800064a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800064e:	6153      	str	r3, [r2, #20]
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <EXTI15_10_IRQHandler+0xa4>)
 8000652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000654:	4798      	blx	r3
	if(EXTI->PR & (1<<11)) {EXTI->PR |= (1<<11); g_IRQ_CallBackPtr[11]();}
 8000656:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 8000658:	695b      	ldr	r3, [r3, #20]
 800065a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800065e:	2b00      	cmp	r3, #0
 8000660:	d008      	beq.n	8000674 <EXTI15_10_IRQHandler+0x40>
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 8000668:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <EXTI15_10_IRQHandler+0xa4>)
 8000670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000672:	4798      	blx	r3
	if(EXTI->PR & (1<<12)) {EXTI->PR |= (1<<12); g_IRQ_CallBackPtr[12]();}
 8000674:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800067c:	2b00      	cmp	r3, #0
 800067e:	d008      	beq.n	8000692 <EXTI15_10_IRQHandler+0x5e>
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	4a13      	ldr	r2, [pc, #76]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 8000686:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800068a:	6153      	str	r3, [r2, #20]
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <EXTI15_10_IRQHandler+0xa4>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	4798      	blx	r3
	if(EXTI->PR & (1<<13)) {EXTI->PR |= (1<<13); g_IRQ_CallBackPtr[13]();}
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800069a:	2b00      	cmp	r3, #0
 800069c:	d008      	beq.n	80006b0 <EXTI15_10_IRQHandler+0x7c>
 800069e:	4b0d      	ldr	r3, [pc, #52]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 80006a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <EXTI15_10_IRQHandler+0xa4>)
 80006ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ae:	4798      	blx	r3
	if(EXTI->PR & (1<<14)) {EXTI->PR |= (1<<14); g_IRQ_CallBackPtr[14]();}
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 80006b2:	695b      	ldr	r3, [r3, #20]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d008      	beq.n	80006ce <EXTI15_10_IRQHandler+0x9a>
 80006bc:	4b05      	ldr	r3, [pc, #20]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <EXTI15_10_IRQHandler+0xa0>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6153      	str	r3, [r2, #20]
 80006c8:	4b03      	ldr	r3, [pc, #12]	; (80006d8 <EXTI15_10_IRQHandler+0xa4>)
 80006ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006cc:	4798      	blx	r3
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40010400 	.word	0x40010400
 80006d8:	20000050 	.word	0x20000050

080006dc <Get_CRx_Position>:
/*================================================================
 * Description :
 * Private Function to get the 4 bits position required to configure of the CRx register according to the  pin number
 * of the specified GPIO_PinConfigPtr
 */
static uint8_t Get_CRx_Position(uint16_t PinNumber){
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	80fb      	strh	r3, [r7, #6]
	//Case PinNumber < GPIO_PIN_8
	switch(PinNumber){
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	2b80      	cmp	r3, #128	; 0x80
 80006ea:	d042      	beq.n	8000772 <Get_CRx_Position+0x96>
 80006ec:	2b80      	cmp	r3, #128	; 0x80
 80006ee:	dc11      	bgt.n	8000714 <Get_CRx_Position+0x38>
 80006f0:	2b08      	cmp	r3, #8
 80006f2:	d036      	beq.n	8000762 <Get_CRx_Position+0x86>
 80006f4:	2b08      	cmp	r3, #8
 80006f6:	dc06      	bgt.n	8000706 <Get_CRx_Position+0x2a>
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d02e      	beq.n	800075a <Get_CRx_Position+0x7e>
 80006fc:	2b04      	cmp	r3, #4
 80006fe:	d02e      	beq.n	800075e <Get_CRx_Position+0x82>
 8000700:	2b01      	cmp	r3, #1
 8000702:	d028      	beq.n	8000756 <Get_CRx_Position+0x7a>
 8000704:	e047      	b.n	8000796 <Get_CRx_Position+0xba>
 8000706:	2b20      	cmp	r3, #32
 8000708:	d02f      	beq.n	800076a <Get_CRx_Position+0x8e>
 800070a:	2b40      	cmp	r3, #64	; 0x40
 800070c:	d02f      	beq.n	800076e <Get_CRx_Position+0x92>
 800070e:	2b10      	cmp	r3, #16
 8000710:	d029      	beq.n	8000766 <Get_CRx_Position+0x8a>
 8000712:	e040      	b.n	8000796 <Get_CRx_Position+0xba>
 8000714:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000718:	d033      	beq.n	8000782 <Get_CRx_Position+0xa6>
 800071a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800071e:	dc09      	bgt.n	8000734 <Get_CRx_Position+0x58>
 8000720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000724:	d029      	beq.n	800077a <Get_CRx_Position+0x9e>
 8000726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800072a:	d028      	beq.n	800077e <Get_CRx_Position+0xa2>
 800072c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000730:	d021      	beq.n	8000776 <Get_CRx_Position+0x9a>
 8000732:	e030      	b.n	8000796 <Get_CRx_Position+0xba>
 8000734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000738:	d027      	beq.n	800078a <Get_CRx_Position+0xae>
 800073a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800073e:	dc03      	bgt.n	8000748 <Get_CRx_Position+0x6c>
 8000740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000744:	d01f      	beq.n	8000786 <Get_CRx_Position+0xaa>
 8000746:	e026      	b.n	8000796 <Get_CRx_Position+0xba>
 8000748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800074c:	d01f      	beq.n	800078e <Get_CRx_Position+0xb2>
 800074e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000752:	d01e      	beq.n	8000792 <Get_CRx_Position+0xb6>
 8000754:	e01f      	b.n	8000796 <Get_CRx_Position+0xba>
		case GPIO_PIN_0:
			return 0;
 8000756:	2300      	movs	r3, #0
 8000758:	e01e      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_1:
			return 4;
 800075a:	2304      	movs	r3, #4
 800075c:	e01c      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_2:
			return 8;
 800075e:	2308      	movs	r3, #8
 8000760:	e01a      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_3:
			return 12;
 8000762:	230c      	movs	r3, #12
 8000764:	e018      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_4:
			return 16;
 8000766:	2310      	movs	r3, #16
 8000768:	e016      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_5:
			return 20;
 800076a:	2314      	movs	r3, #20
 800076c:	e014      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_6:
			return 24;
 800076e:	2318      	movs	r3, #24
 8000770:	e012      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_7:
			return 28;
 8000772:	231c      	movs	r3, #28
 8000774:	e010      	b.n	8000798 <Get_CRx_Position+0xbc>

	//Case PinNumber > GPIO_PIN_7
		case GPIO_PIN_8:
			return 0;
 8000776:	2300      	movs	r3, #0
 8000778:	e00e      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_9:
			return 4;
 800077a:	2304      	movs	r3, #4
 800077c:	e00c      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_10:
			return 8;
 800077e:	2308      	movs	r3, #8
 8000780:	e00a      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_11:
			return 12;
 8000782:	230c      	movs	r3, #12
 8000784:	e008      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_12:
			return 16;
 8000786:	2310      	movs	r3, #16
 8000788:	e006      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_13:
			return 20;
 800078a:	2314      	movs	r3, #20
 800078c:	e004      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_14:
			return 24;
 800078e:	2318      	movs	r3, #24
 8000790:	e002      	b.n	8000798 <Get_CRx_Position+0xbc>
		case GPIO_PIN_15:
			return 28;
 8000792:	231c      	movs	r3, #28
 8000794:	e000      	b.n	8000798 <Get_CRx_Position+0xbc>
	}
	return 0;
 8000796:	2300      	movs	r3, #0
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
	...

080007a4 <MCAL_GPIO_Init>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_Init(GPIO_PinConfig_t* GPIO_PinConfigPtr){
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	static uint8_t GPIO_CLK_InitFlag[5] = {0,0,0,0,0};
	//Check port selected to enable it's clock
	if((GPIO_PinConfigPtr->GPIO_Port == GPIOA) && (GPIO_CLK_InitFlag[0] != 1))
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a7a      	ldr	r2, [pc, #488]	; (800099c <MCAL_GPIO_Init+0x1f8>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d10d      	bne.n	80007d2 <MCAL_GPIO_Init+0x2e>
 80007b6:	4b7a      	ldr	r3, [pc, #488]	; (80009a0 <MCAL_GPIO_Init+0x1fc>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d009      	beq.n	80007d2 <MCAL_GPIO_Init+0x2e>
	{
		RCC_GPIOA_CLK_EN();
 80007be:	4b79      	ldr	r3, [pc, #484]	; (80009a4 <MCAL_GPIO_Init+0x200>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a78      	ldr	r2, [pc, #480]	; (80009a4 <MCAL_GPIO_Init+0x200>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[0] = 1;
 80007ca:	4b75      	ldr	r3, [pc, #468]	; (80009a0 <MCAL_GPIO_Init+0x1fc>)
 80007cc:	2201      	movs	r2, #1
 80007ce:	701a      	strb	r2, [r3, #0]
 80007d0:	e04a      	b.n	8000868 <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOB) && (GPIO_CLK_InitFlag[1] != 1))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a74      	ldr	r2, [pc, #464]	; (80009a8 <MCAL_GPIO_Init+0x204>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d10d      	bne.n	80007f8 <MCAL_GPIO_Init+0x54>
 80007dc:	4b70      	ldr	r3, [pc, #448]	; (80009a0 <MCAL_GPIO_Init+0x1fc>)
 80007de:	785b      	ldrb	r3, [r3, #1]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d009      	beq.n	80007f8 <MCAL_GPIO_Init+0x54>
	{
		RCC_GPIOB_CLK_EN();
 80007e4:	4b6f      	ldr	r3, [pc, #444]	; (80009a4 <MCAL_GPIO_Init+0x200>)
 80007e6:	699b      	ldr	r3, [r3, #24]
 80007e8:	4a6e      	ldr	r2, [pc, #440]	; (80009a4 <MCAL_GPIO_Init+0x200>)
 80007ea:	f043 0308 	orr.w	r3, r3, #8
 80007ee:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[1] = 1;
 80007f0:	4b6b      	ldr	r3, [pc, #428]	; (80009a0 <MCAL_GPIO_Init+0x1fc>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	705a      	strb	r2, [r3, #1]
 80007f6:	e037      	b.n	8000868 <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOC) && (GPIO_CLK_InitFlag[2] != 1))
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a6b      	ldr	r2, [pc, #428]	; (80009ac <MCAL_GPIO_Init+0x208>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d10d      	bne.n	800081e <MCAL_GPIO_Init+0x7a>
 8000802:	4b67      	ldr	r3, [pc, #412]	; (80009a0 <MCAL_GPIO_Init+0x1fc>)
 8000804:	789b      	ldrb	r3, [r3, #2]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d009      	beq.n	800081e <MCAL_GPIO_Init+0x7a>
	{
		RCC_GPIOC_CLK_EN();
 800080a:	4b66      	ldr	r3, [pc, #408]	; (80009a4 <MCAL_GPIO_Init+0x200>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a65      	ldr	r2, [pc, #404]	; (80009a4 <MCAL_GPIO_Init+0x200>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[2] = 1;
 8000816:	4b62      	ldr	r3, [pc, #392]	; (80009a0 <MCAL_GPIO_Init+0x1fc>)
 8000818:	2201      	movs	r2, #1
 800081a:	709a      	strb	r2, [r3, #2]
 800081c:	e024      	b.n	8000868 <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOD) && (GPIO_CLK_InitFlag[3] != 1))
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a63      	ldr	r2, [pc, #396]	; (80009b0 <MCAL_GPIO_Init+0x20c>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d10d      	bne.n	8000844 <MCAL_GPIO_Init+0xa0>
 8000828:	4b5d      	ldr	r3, [pc, #372]	; (80009a0 <MCAL_GPIO_Init+0x1fc>)
 800082a:	78db      	ldrb	r3, [r3, #3]
 800082c:	2b01      	cmp	r3, #1
 800082e:	d009      	beq.n	8000844 <MCAL_GPIO_Init+0xa0>
	{
		RCC_GPIOD_CLK_EN();
 8000830:	4b5c      	ldr	r3, [pc, #368]	; (80009a4 <MCAL_GPIO_Init+0x200>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a5b      	ldr	r2, [pc, #364]	; (80009a4 <MCAL_GPIO_Init+0x200>)
 8000836:	f043 0320 	orr.w	r3, r3, #32
 800083a:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[3] = 1;
 800083c:	4b58      	ldr	r3, [pc, #352]	; (80009a0 <MCAL_GPIO_Init+0x1fc>)
 800083e:	2201      	movs	r2, #1
 8000840:	70da      	strb	r2, [r3, #3]
 8000842:	e011      	b.n	8000868 <MCAL_GPIO_Init+0xc4>
	}
	else if((GPIO_PinConfigPtr->GPIO_Port == GPIOE) && (GPIO_CLK_InitFlag[4] != 1))
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a5a      	ldr	r2, [pc, #360]	; (80009b4 <MCAL_GPIO_Init+0x210>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d10c      	bne.n	8000868 <MCAL_GPIO_Init+0xc4>
 800084e:	4b54      	ldr	r3, [pc, #336]	; (80009a0 <MCAL_GPIO_Init+0x1fc>)
 8000850:	791b      	ldrb	r3, [r3, #4]
 8000852:	2b01      	cmp	r3, #1
 8000854:	d008      	beq.n	8000868 <MCAL_GPIO_Init+0xc4>
	{
		RCC_GPIOE_CLK_EN();
 8000856:	4b53      	ldr	r3, [pc, #332]	; (80009a4 <MCAL_GPIO_Init+0x200>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a52      	ldr	r2, [pc, #328]	; (80009a4 <MCAL_GPIO_Init+0x200>)
 800085c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000860:	6193      	str	r3, [r2, #24]
		GPIO_CLK_InitFlag[4] = 1;
 8000862:	4b4f      	ldr	r3, [pc, #316]	; (80009a0 <MCAL_GPIO_Init+0x1fc>)
 8000864:	2201      	movs	r2, #1
 8000866:	711a      	strb	r2, [r3, #4]
	}

	//Check for alternate function mode (Input or Output) to enable it's clock
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_OUTPUT_OD)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	799b      	ldrb	r3, [r3, #6]
 800086c:	2b05      	cmp	r3, #5
 800086e:	d905      	bls.n	800087c <MCAL_GPIO_Init+0xd8>
	{
		RCC_AFIO_CLK_EN();
 8000870:	4b4c      	ldr	r3, [pc, #304]	; (80009a4 <MCAL_GPIO_Init+0x200>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a4b      	ldr	r2, [pc, #300]	; (80009a4 <MCAL_GPIO_Init+0x200>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6193      	str	r3, [r2, #24]
	}

	//Pointer holds the configuration register address either High or Low depends on PinNo
	vuint32_t* GPIO_CRx = NULL_PTR;
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
	GPIO_CRx = ((GPIO_PinConfigPtr->GPIO_PinNo < GPIO_PIN_8)?&(GPIO_PinConfigPtr->GPIO_Port->CRL):&(GPIO_PinConfigPtr->GPIO_Port->CRH));
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	889b      	ldrh	r3, [r3, #4]
 8000884:	2bff      	cmp	r3, #255	; 0xff
 8000886:	d802      	bhi.n	800088e <MCAL_GPIO_Init+0xea>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	e002      	b.n	8000894 <MCAL_GPIO_Init+0xf0>
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	3304      	adds	r3, #4
 8000894:	60bb      	str	r3, [r7, #8]

	//MODE & CNF Variable (Initialized by it's default reset value)
	uint8_t PinConfig_Value = 0x4;
 8000896:	2304      	movs	r3, #4
 8000898:	73fb      	strb	r3, [r7, #15]

	//Clear MODE & CNF
	(*GPIO_CRx) &= ~(0xF<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	889b      	ldrh	r3, [r3, #4]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ff1c 	bl	80006dc <Get_CRx_Position>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	230f      	movs	r3, #15
 80008aa:	4093      	lsls	r3, r2
 80008ac:	43da      	mvns	r2, r3
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	401a      	ands	r2, r3
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	601a      	str	r2, [r3, #0]

	//Check if pin is output
	if(GPIO_PinConfigPtr->GPIO_Mode > GPIO_MODE_INPUT_PD && GPIO_PinConfigPtr->GPIO_Mode < GPIO_MODE_AF_INPUT)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	799b      	ldrb	r3, [r3, #6]
 80008bc:	2b03      	cmp	r3, #3
 80008be:	d914      	bls.n	80008ea <MCAL_GPIO_Init+0x146>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	799b      	ldrb	r3, [r3, #6]
 80008c4:	2b07      	cmp	r3, #7
 80008c6:	d810      	bhi.n	80008ea <MCAL_GPIO_Init+0x146>
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	73fb      	strb	r3, [r7, #15]
		//Set MODE & CNF
		PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode-4)<<2) | (GPIO_PinConfigPtr->GPIO_Output_Speed)) & 0x0F;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	799b      	ldrb	r3, [r3, #6]
 80008d0:	3b04      	subs	r3, #4
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	b25a      	sxtb	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	79db      	ldrb	r3, [r3, #7]
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	4313      	orrs	r3, r2
 80008de:	b25b      	sxtb	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f003 030f 	and.w	r3, r3, #15
 80008e6:	73fb      	strb	r3, [r7, #15]
 80008e8:	e037      	b.n	800095a <MCAL_GPIO_Init+0x1b6>

	//Else pin is input
	else //MODE = 00: Input mode (reset state)
	{
		//Clear PinConfig_Value
		PinConfig_Value = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	73fb      	strb	r3, [r7, #15]

		//Check if Input Analog mode or Input Floating
		if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_ANALOG || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_FLO)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	799b      	ldrb	r3, [r3, #6]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <MCAL_GPIO_Init+0x15a>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	799b      	ldrb	r3, [r3, #6]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d107      	bne.n	800090e <MCAL_GPIO_Init+0x16a>
		{	//Set MODE & CNF
			PinConfig_Value = (((GPIO_PinConfigPtr->GPIO_Mode)<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	799b      	ldrb	r3, [r3, #6]
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	b2db      	uxtb	r3, r3
 8000906:	f003 030f 	and.w	r3, r3, #15
 800090a:	73fb      	strb	r3, [r7, #15]
 800090c:	e025      	b.n	800095a <MCAL_GPIO_Init+0x1b6>
		}

		//Check if Input with pull-up or Input with pull-down
		else if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU || GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PD)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	799b      	ldrb	r3, [r3, #6]
 8000912:	2b02      	cmp	r3, #2
 8000914:	d003      	beq.n	800091e <MCAL_GPIO_Init+0x17a>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	799b      	ldrb	r3, [r3, #6]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d11b      	bne.n	8000956 <MCAL_GPIO_Init+0x1b2>
		{
			//Set MODE & CNF
			PinConfig_Value = ((GPIO_MODE_INPUT_PU<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 800091e:	2308      	movs	r3, #8
 8000920:	73fb      	strb	r3, [r7, #15]

			//Check if Input with pull-up
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	799b      	ldrb	r3, [r3, #6]
 8000926:	2b02      	cmp	r3, #2
 8000928:	d10a      	bne.n	8000940 <MCAL_GPIO_Init+0x19c>
			{
				//Set output data register ODR because pull up specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	68da      	ldr	r2, [r3, #12]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	889b      	ldrh	r3, [r3, #4]
 8000934:	4619      	mov	r1, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	430a      	orrs	r2, r1
 800093c:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 800093e:	e00c      	b.n	800095a <MCAL_GPIO_Init+0x1b6>

			//Check if Input with pull-down
			else
			{
				//Clear output data register ODR because pull down specified
				GPIO_PinConfigPtr->GPIO_Port->ODR |= (GPIO_PinConfigPtr->GPIO_PinNo);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	68da      	ldr	r2, [r3, #12]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	889b      	ldrh	r3, [r3, #4]
 800094a:	4619      	mov	r1, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	430a      	orrs	r2, r1
 8000952:	60da      	str	r2, [r3, #12]
			if(GPIO_PinConfigPtr->GPIO_Mode == GPIO_MODE_INPUT_PU)
 8000954:	e001      	b.n	800095a <MCAL_GPIO_Init+0x1b6>
		}

		//Else Alternate function input
		else
		{
			PinConfig_Value = ((GPIO_MODE_INPUT_FLO<<2) | GPIO_OUTPUT_SPEED_NONE) & 0x0F;
 8000956:	2304      	movs	r3, #4
 8000958:	73fb      	strb	r3, [r7, #15]
		}

	}

	//Write on CRx register to configure pin -> x is (H or L)
	(*GPIO_CRx) &= ~(PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 800095a:	7bfc      	ldrb	r4, [r7, #15]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	889b      	ldrh	r3, [r3, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff febb 	bl	80006dc <Get_CRx_Position>
 8000966:	4603      	mov	r3, r0
 8000968:	fa04 f303 	lsl.w	r3, r4, r3
 800096c:	43da      	mvns	r2, r3
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	401a      	ands	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	601a      	str	r2, [r3, #0]
	(*GPIO_CRx) |= (PinConfig_Value<<Get_CRx_Position(GPIO_PinConfigPtr->GPIO_PinNo));
 8000978:	7bfc      	ldrb	r4, [r7, #15]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	889b      	ldrh	r3, [r3, #4]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff feac 	bl	80006dc <Get_CRx_Position>
 8000984:	4603      	mov	r3, r0
 8000986:	fa04 f203 	lsl.w	r2, r4, r3
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	431a      	orrs	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	601a      	str	r2, [r3, #0]

	return;
 8000994:	bf00      	nop

}
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	40010800 	.word	0x40010800
 80009a0:	2000008c 	.word	0x2000008c
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010c00 	.word	0x40010c00
 80009ac:	40011000 	.word	0x40011000
 80009b0:	40011400 	.word	0x40011400
 80009b4:	40011800 	.word	0x40011800

080009b8 <MCAL_GPIO_WritePin>:
* @retval 			- None.
*
* Note				-
*
*/
void MCAL_GPIO_WritePin(GPIO_PinConfig_t* GPIO_PinConfigPtr, uint8_t PinValue){
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]

	//Check if sent pin state is one.
	if(PinValue == GPIO_PIN_SET)
 80009c4:	78fb      	ldrb	r3, [r7, #3]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d105      	bne.n	80009d6 <MCAL_GPIO_WritePin+0x1e>
	{

		GPIO_PinConfigPtr->GPIO_Port->BSRR = GPIO_PinConfigPtr->GPIO_PinNo;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	889a      	ldrh	r2, [r3, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	611a      	str	r2, [r3, #16]
	else
	{
		GPIO_PinConfigPtr->GPIO_Port->BRR = GPIO_PinConfigPtr->GPIO_PinNo;
	}

}
 80009d4:	e004      	b.n	80009e0 <MCAL_GPIO_WritePin+0x28>
		GPIO_PinConfigPtr->GPIO_Port->BRR = GPIO_PinConfigPtr->GPIO_PinNo;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	889a      	ldrh	r2, [r3, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	615a      	str	r2, [r3, #20]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
	...

080009ec <MCAL_RCC_SYSCLK>:
* @retval 			- SYSCLK Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_SYSCLK(void){
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
	* 00: HSI oscillator used as system clock
	* 01: HSE oscillator used as system clock
	* 10: PLL used as system clock
	* 11: Not applicable.
	*/
	switch( ( (RCC->CFGR) >> 2 ) & 0x3)
 80009f0:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <MCAL_RCC_SYSCLK+0x3c>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	f003 0303 	and.w	r3, r3, #3
 80009fa:	2b03      	cmp	r3, #3
 80009fc:	d810      	bhi.n	8000a20 <MCAL_RCC_SYSCLK+0x34>
 80009fe:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <MCAL_RCC_SYSCLK+0x18>)
 8000a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a04:	08000a15 	.word	0x08000a15
 8000a08:	08000a19 	.word	0x08000a19
 8000a0c:	08000a1d 	.word	0x08000a1d
 8000a10:	08000a21 	.word	0x08000a21
	{
		case 0:
			return HSI_CLK;
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <MCAL_RCC_SYSCLK+0x40>)
 8000a16:	e003      	b.n	8000a20 <MCAL_RCC_SYSCLK+0x34>
		case 1:
			return HSE_CLK; //To be configured by the user @Config HSE_CLK_Define
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <MCAL_RCC_SYSCLK+0x44>)
 8000a1a:	e001      	b.n	8000a20 <MCAL_RCC_SYSCLK+0x34>
		case 2:
			return 16000000; //To do later
 8000a1c:	4b04      	ldr	r3, [pc, #16]	; (8000a30 <MCAL_RCC_SYSCLK+0x44>)
 8000a1e:	e7ff      	b.n	8000a20 <MCAL_RCC_SYSCLK+0x34>
		case 3:
			break;
	}

}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	007a1200 	.word	0x007a1200
 8000a30:	00f42400 	.word	0x00f42400

08000a34 <MCAL_RCC_HCLK>:
* @retval 			- HCLK Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_HCLK(void){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

	/*
	* HPRE[3:0]: AHB prescaler
	*/
	return (MCAL_RCC_SYSCLK() >> (g_AHB_Prescaler_Table[ (RCC->CFGR >> 4) & 0b1111 ]));
 8000a38:	f7ff ffd8 	bl	80009ec <MCAL_RCC_SYSCLK>
 8000a3c:	4601      	mov	r1, r0
 8000a3e:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <MCAL_RCC_HCLK+0x20>)
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	091b      	lsrs	r3, r3, #4
 8000a44:	f003 030f 	and.w	r3, r3, #15
 8000a48:	4a03      	ldr	r2, [pc, #12]	; (8000a58 <MCAL_RCC_HCLK+0x24>)
 8000a4a:	5cd3      	ldrb	r3, [r2, r3]
 8000a4c:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000a50:	4618      	mov	r0, r3
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40021000 	.word	0x40021000
 8000a58:	08001378 	.word	0x08001378

08000a5c <MCAL_RCC_PCLK1>:
* @retval 			- PCLK1 Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_PCLK1(void){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0

	/*
	* PPRE1[2:0]: APB Low-speed prescaler (APB1)
	*/

	return (MCAL_RCC_HCLK() >> (g_APB_Prescaler_Table[ (RCC->CFGR >> 8) & 0b111 ]));
 8000a60:	f7ff ffe8 	bl	8000a34 <MCAL_RCC_HCLK>
 8000a64:	4601      	mov	r1, r0
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <MCAL_RCC_PCLK1+0x20>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	0a1b      	lsrs	r3, r3, #8
 8000a6c:	f003 0307 	and.w	r3, r3, #7
 8000a70:	4a03      	ldr	r2, [pc, #12]	; (8000a80 <MCAL_RCC_PCLK1+0x24>)
 8000a72:	5cd3      	ldrb	r3, [r2, r3]
 8000a74:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	08001370 	.word	0x08001370

08000a84 <MCAL_RCC_PCLK2>:
* @retval 			- PCLK2 Frequency.
*
* Note				-
*
*/
uint32_t MCAL_RCC_PCLK2(void){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0

	/*
	* PPRE2[2:0]: APB high-speed prescaler (APB2)
	*/
	return (MCAL_RCC_HCLK() >> (g_APB_Prescaler_Table[ (RCC->CFGR >> 11) & 0b111 ]));
 8000a88:	f7ff ffd4 	bl	8000a34 <MCAL_RCC_HCLK>
 8000a8c:	4601      	mov	r1, r0
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <MCAL_RCC_PCLK2+0x20>)
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	0adb      	lsrs	r3, r3, #11
 8000a94:	f003 0307 	and.w	r3, r3, #7
 8000a98:	4a03      	ldr	r2, [pc, #12]	; (8000aa8 <MCAL_RCC_PCLK2+0x24>)
 8000a9a:	5cd3      	ldrb	r3, [r2, r3]
 8000a9c:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	08001370 	.word	0x08001370

08000aac <SPI1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void SPI1_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <SPI1_IRQHandler+0x10>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4798      	blx	r3
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000094 	.word	0x20000094

08000ac0 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8000ac4:	4b02      	ldr	r3, [pc, #8]	; (8000ad0 <SPI2_IRQHandler+0x10>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	4798      	blx	r3
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000094 	.word	0x20000094

08000ad4 <MCAL_UART_Init>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_UART_Init(UART_Config_t* UART_ConfigPtr){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

	/*
	* 1) Enable the USART Clock according to the Channel Selected & get Clock Frequencies.
	*/
	uint32_t PCLKx;
	if(UART_ConfigPtr->USARTx == USART1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a64      	ldr	r2, [pc, #400]	; (8000c74 <MCAL_UART_Init+0x1a0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d109      	bne.n	8000afa <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 8000ae6:	4b64      	ldr	r3, [pc, #400]	; (8000c78 <MCAL_UART_Init+0x1a4>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a63      	ldr	r2, [pc, #396]	; (8000c78 <MCAL_UART_Init+0x1a4>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6193      	str	r3, [r2, #24]
		PCLKx = MCAL_RCC_PCLK2();
 8000af2:	f7ff ffc7 	bl	8000a84 <MCAL_RCC_PCLK2>
 8000af6:	61f8      	str	r0, [r7, #28]
 8000af8:	e017      	b.n	8000b2a <MCAL_UART_Init+0x56>
	}
	else if (UART_ConfigPtr->USARTx == USART2)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a5f      	ldr	r2, [pc, #380]	; (8000c7c <MCAL_UART_Init+0x1a8>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d109      	bne.n	8000b18 <MCAL_UART_Init+0x44>
	{
		RCC_USART2_CLK_EN();
 8000b04:	4b5c      	ldr	r3, [pc, #368]	; (8000c78 <MCAL_UART_Init+0x1a4>)
 8000b06:	69db      	ldr	r3, [r3, #28]
 8000b08:	4a5b      	ldr	r2, [pc, #364]	; (8000c78 <MCAL_UART_Init+0x1a4>)
 8000b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b0e:	61d3      	str	r3, [r2, #28]
		PCLKx = MCAL_RCC_PCLK1();
 8000b10:	f7ff ffa4 	bl	8000a5c <MCAL_RCC_PCLK1>
 8000b14:	61f8      	str	r0, [r7, #28]
 8000b16:	e008      	b.n	8000b2a <MCAL_UART_Init+0x56>
	}
	else
	{
		RCC_USART3_CLK_EN();
 8000b18:	4b57      	ldr	r3, [pc, #348]	; (8000c78 <MCAL_UART_Init+0x1a4>)
 8000b1a:	69db      	ldr	r3, [r3, #28]
 8000b1c:	4a56      	ldr	r2, [pc, #344]	; (8000c78 <MCAL_UART_Init+0x1a4>)
 8000b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b22:	61d3      	str	r3, [r2, #28]
		PCLKx = MCAL_RCC_PCLK1();
 8000b24:	f7ff ff9a 	bl	8000a5c <MCAL_RCC_PCLK1>
 8000b28:	61f8      	str	r0, [r7, #28]
	}

	/*
	* 2) Enable the USART by writing the UE bit in USART_CR1 register to 1.
	*/
	UART_ConfigPtr->USARTx->CR1 |= (1<<13);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000b38:	60da      	str	r2, [r3, #12]

	/*
	* 3) Program the M bit in USART_CR1 to define the word length.
	*/
	UART_ConfigPtr->USARTx->CR1 |= UART_ConfigPtr->USART_WordLength;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	68d9      	ldr	r1, [r3, #12]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68da      	ldr	r2, [r3, #12]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	60da      	str	r2, [r3, #12]

	/*
	* 4) Program the number of stop bits in USART_CR2.
	*/
	UART_ConfigPtr->USARTx->CR2 |= UART_ConfigPtr->USART_StopBits;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6919      	ldr	r1, [r3, #16]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	695a      	ldr	r2, [r3, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	611a      	str	r2, [r3, #16]

	/*
	* 5) Select the desired baud rate using the baud rate register USART_BRR.
	*/
	uint32_t DIV_Mantissa = (uint16_t)(PCLKx/(16*UART_ConfigPtr->USART_BaudRate));
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	011b      	lsls	r3, r3, #4
 8000b64:	69fa      	ldr	r2, [r7, #28]
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	b29b      	uxth	r3, r3
 8000b6c:	61bb      	str	r3, [r7, #24]
	uint32_t DIV_Mantissa_MUL100 = DIV_Mantissa*100;
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	2264      	movs	r2, #100	; 0x64
 8000b72:	fb02 f303 	mul.w	r3, r2, r3
 8000b76:	617b      	str	r3, [r7, #20]

	uint32_t DIV_Fraction_MUL100 = ((PCLKx*25)/(4*UART_ConfigPtr->USART_BaudRate)) - DIV_Mantissa_MUL100;
 8000b78:	69fa      	ldr	r2, [r7, #28]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	4413      	add	r3, r2
 8000b80:	009a      	lsls	r2, r3, #2
 8000b82:	441a      	add	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	613b      	str	r3, [r7, #16]
	uint32_t  DIV_Fraction = (DIV_Fraction_MUL100*16)/100;
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	011b      	lsls	r3, r3, #4
 8000b98:	4a39      	ldr	r2, [pc, #228]	; (8000c80 <MCAL_UART_Init+0x1ac>)
 8000b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	60fb      	str	r3, [r7, #12]

	DIV_Mantissa = DIV_Mantissa & 0xFFF;
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba8:	61bb      	str	r3, [r7, #24]
	DIV_Fraction = DIV_Fraction & 0xF;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f003 030f 	and.w	r3, r3, #15
 8000bb0:	60fb      	str	r3, [r7, #12]

	UART_ConfigPtr->USARTx->BRR |= ( (DIV_Mantissa<<4) | (DIV_Fraction) );
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6899      	ldr	r1, [r3, #8]
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	011a      	lsls	r2, r3, #4
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	431a      	orrs	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	609a      	str	r2, [r3, #8]

	/*
	* 6) Select the parity enable or disable and even or odd USART_CR1 register.
	*/
	UART_ConfigPtr->USARTx->CR1 |= UART_ConfigPtr->USART_Parity;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	68d9      	ldr	r1, [r3, #12]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	691a      	ldr	r2, [r3, #16]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	60da      	str	r2, [r3, #12]

	/*
	* 7) Enable or Disable HwFlowCtrl parity in USART_CR3 register.
	*/
	UART_ConfigPtr->USARTx->CR3 |= UART_ConfigPtr->USART_FlowControl;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	6959      	ldr	r1, [r3, #20]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	699a      	ldr	r2, [r3, #24]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	430a      	orrs	r2, r1
 8000bea:	615a      	str	r2, [r3, #20]

	/*
	* 8) Set the TE bit (if chosen) in USART_CR1 to send an idle frame as first transmission &
	*	 Set the RE bit (if chosen) in USART_CR1. This enables the receiver which begins searching for a start bit.
	*/
	UART_ConfigPtr->USARTx->CR1 |= UART_ConfigPtr->USART_Mode;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68d9      	ldr	r1, [r3, #12]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	60da      	str	r2, [r3, #12]

	/*
	* 9) Enable or Disable Interrupt according to the configuration & Update Interrupt Handling CallBack.
	*/
	if(UART_ConfigPtr->USART_IRQ_EN != USART_IE_DISABLE){
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d032      	beq.n	8000c6c <MCAL_UART_Init+0x198>

		//Enable Interrupt mask in UART
		UART_ConfigPtr->USARTx->CR1 |= UART_ConfigPtr->USART_IRQ_EN;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	68d9      	ldr	r1, [r3, #12]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	69da      	ldr	r2, [r3, #28]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	430a      	orrs	r2, r1
 8000c16:	60da      	str	r2, [r3, #12]

		//Enable Interrupt mask in NVIC
		if(UART_ConfigPtr->USARTx == USART1)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a15      	ldr	r2, [pc, #84]	; (8000c74 <MCAL_UART_Init+0x1a0>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d10a      	bne.n	8000c38 <MCAL_UART_Init+0x164>
		{
			g_IRQ_CallBackPtr[0] = UART_ConfigPtr->IRQ_CallBackPtr;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a1b      	ldr	r3, [r3, #32]
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <MCAL_UART_Init+0x1b0>)
 8000c28:	6013      	str	r3, [r2, #0]
			NVIC_IRQ37_EN();
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MCAL_UART_Init+0x1b4>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a16      	ldr	r2, [pc, #88]	; (8000c88 <MCAL_UART_Init+0x1b4>)
 8000c30:	f043 0320 	orr.w	r3, r3, #32
 8000c34:	6013      	str	r3, [r2, #0]
			g_IRQ_CallBackPtr[2] = UART_ConfigPtr->IRQ_CallBackPtr;
			NVIC_IRQ39_EN();
		}
	}

}
 8000c36:	e019      	b.n	8000c6c <MCAL_UART_Init+0x198>
		else if (UART_ConfigPtr->USARTx == USART2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <MCAL_UART_Init+0x1a8>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d10a      	bne.n	8000c58 <MCAL_UART_Init+0x184>
			g_IRQ_CallBackPtr[1] = UART_ConfigPtr->IRQ_CallBackPtr;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a1b      	ldr	r3, [r3, #32]
 8000c46:	4a0f      	ldr	r2, [pc, #60]	; (8000c84 <MCAL_UART_Init+0x1b0>)
 8000c48:	6053      	str	r3, [r2, #4]
			NVIC_IRQ38_EN();
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MCAL_UART_Init+0x1b4>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <MCAL_UART_Init+0x1b4>)
 8000c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c54:	6013      	str	r3, [r2, #0]
}
 8000c56:	e009      	b.n	8000c6c <MCAL_UART_Init+0x198>
			g_IRQ_CallBackPtr[2] = UART_ConfigPtr->IRQ_CallBackPtr;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6a1b      	ldr	r3, [r3, #32]
 8000c5c:	4a09      	ldr	r2, [pc, #36]	; (8000c84 <MCAL_UART_Init+0x1b0>)
 8000c5e:	6093      	str	r3, [r2, #8]
			NVIC_IRQ39_EN();
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MCAL_UART_Init+0x1b4>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <MCAL_UART_Init+0x1b4>)
 8000c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40013800 	.word	0x40013800
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40004400 	.word	0x40004400
 8000c80:	51eb851f 	.word	0x51eb851f
 8000c84:	2000009c 	.word	0x2000009c
 8000c88:	e000e104 	.word	0xe000e104

08000c8c <MCAL_UART_GPIO_SetPins>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_UART_GPIO_SetPins(UART_Config_t* UART_ConfigPtr){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b09a      	sub	sp, #104	; 0x68
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

	//Check if USARTx is USART1
	if(UART_ConfigPtr->USARTx == USART1){
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a73      	ldr	r2, [pc, #460]	; (8000e68 <MCAL_UART_GPIO_SetPins+0x1dc>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d149      	bne.n	8000d32 <MCAL_UART_GPIO_SetPins+0xa6>

		// PA9  --> TX
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_TX))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f003 0308 	and.w	r3, r3, #8
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d00b      	beq.n	8000cc2 <MCAL_UART_GPIO_SetPins+0x36>
		{
			// GPIO Configuration: Alternate function push-pull
			GPIO_PinConfig_t Tx1 = {GPIOA, GPIO_PIN_9, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000caa:	4a70      	ldr	r2, [pc, #448]	; (8000e6c <MCAL_UART_GPIO_SetPins+0x1e0>)
 8000cac:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cb4:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tx1);
 8000cb8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fd71 	bl	80007a4 <MCAL_GPIO_Init>
		}

		// PA10 --> RX
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_RX)){
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00b      	beq.n	8000ce6 <MCAL_UART_GPIO_SetPins+0x5a>
			// GPIO Configuration: Alternate function Input Floating
			GPIO_PinConfig_t Rx1 = {GPIOA, GPIO_PIN_10, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000cce:	4a68      	ldr	r2, [pc, #416]	; (8000e70 <MCAL_UART_GPIO_SetPins+0x1e4>)
 8000cd0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000cd4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd8:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Rx1);
 8000cdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fd5f 	bl	80007a4 <MCAL_GPIO_Init>
		}

		// PA11 --> CTS
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_CTS)){
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d00b      	beq.n	8000d0a <MCAL_UART_GPIO_SetPins+0x7e>
			// GPIO Configuration: Alternate function push-pull
			GPIO_PinConfig_t cts1 = {GPIOA, GPIO_PIN_11, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000cf2:	4a60      	ldr	r2, [pc, #384]	; (8000e74 <MCAL_UART_GPIO_SetPins+0x1e8>)
 8000cf4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000cf8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cfc:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&cts1);
 8000d00:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fd4d 	bl	80007a4 <MCAL_GPIO_Init>
		}

		// PA12 --> RTS
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_RTS)){
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 80a3 	beq.w	8000e5e <MCAL_UART_GPIO_SetPins+0x1d2>
			// GPIO Configuration: Alternate function Input Floating
			GPIO_PinConfig_t rts1 = {GPIOA, GPIO_PIN_12, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000d18:	4a57      	ldr	r2, [pc, #348]	; (8000e78 <MCAL_UART_GPIO_SetPins+0x1ec>)
 8000d1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d22:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&rts1);
 8000d26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fd3a 	bl	80007a4 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(&rts3);
		}

	}

}
 8000d30:	e095      	b.n	8000e5e <MCAL_UART_GPIO_SetPins+0x1d2>
	else if(UART_ConfigPtr->USARTx == USART2)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a51      	ldr	r2, [pc, #324]	; (8000e7c <MCAL_UART_GPIO_SetPins+0x1f0>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d148      	bne.n	8000dce <MCAL_UART_GPIO_SetPins+0x142>
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_TX))
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d00b      	beq.n	8000d60 <MCAL_UART_GPIO_SetPins+0xd4>
			GPIO_PinConfig_t Tx2 = {GPIOA, GPIO_PIN_2, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000d48:	4a4d      	ldr	r2, [pc, #308]	; (8000e80 <MCAL_UART_GPIO_SetPins+0x1f4>)
 8000d4a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d52:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tx2);
 8000d56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fd22 	bl	80007a4 <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_RX)){
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0304 	and.w	r3, r3, #4
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d00b      	beq.n	8000d84 <MCAL_UART_GPIO_SetPins+0xf8>
			GPIO_PinConfig_t Rx2 = {GPIOA, GPIO_PIN_3, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000d6c:	4a45      	ldr	r2, [pc, #276]	; (8000e84 <MCAL_UART_GPIO_SetPins+0x1f8>)
 8000d6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d76:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Rx2);
 8000d7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fd10 	bl	80007a4 <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_CTS)){
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d00b      	beq.n	8000da8 <MCAL_UART_GPIO_SetPins+0x11c>
			GPIO_PinConfig_t cts2 = {GPIOA, GPIO_PIN_0, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000d90:	4a3d      	ldr	r2, [pc, #244]	; (8000e88 <MCAL_UART_GPIO_SetPins+0x1fc>)
 8000d92:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d9a:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&cts2);
 8000d9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fcfe 	bl	80007a4 <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_RTS)){
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d054      	beq.n	8000e5e <MCAL_UART_GPIO_SetPins+0x1d2>
			GPIO_PinConfig_t rts2 = {GPIOA, GPIO_PIN_1, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000db4:	4a35      	ldr	r2, [pc, #212]	; (8000e8c <MCAL_UART_GPIO_SetPins+0x200>)
 8000db6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dbe:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&rts2);
 8000dc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fcec 	bl	80007a4 <MCAL_GPIO_Init>
}
 8000dcc:	e047      	b.n	8000e5e <MCAL_UART_GPIO_SetPins+0x1d2>
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_TX))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00b      	beq.n	8000df2 <MCAL_UART_GPIO_SetPins+0x166>
			GPIO_PinConfig_t Tx3 = {GPIOB, GPIO_PIN_10, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000dda:	4a2d      	ldr	r2, [pc, #180]	; (8000e90 <MCAL_UART_GPIO_SetPins+0x204>)
 8000ddc:	f107 0320 	add.w	r3, r7, #32
 8000de0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000de4:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Tx3);
 8000de8:	f107 0320 	add.w	r3, r7, #32
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fcd9 	bl	80007a4 <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_MODE_RX)){
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0304 	and.w	r3, r3, #4
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d00b      	beq.n	8000e16 <MCAL_UART_GPIO_SetPins+0x18a>
			GPIO_PinConfig_t Rx3 = {GPIOB, GPIO_PIN_11, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000dfe:	4a25      	ldr	r2, [pc, #148]	; (8000e94 <MCAL_UART_GPIO_SetPins+0x208>)
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e08:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&Rx3);
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff fcc7 	bl	80007a4 <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_CTS)){
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d00b      	beq.n	8000e3a <MCAL_UART_GPIO_SetPins+0x1ae>
			GPIO_PinConfig_t cts3 = {GPIOB, GPIO_PIN_13, GPIO_MODE_AF_OUTPUT_PP, GPIO_OUTPUT_SPEED_10MHZ};
 8000e22:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <MCAL_UART_GPIO_SetPins+0x20c>)
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e2c:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&cts3);
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fcb5 	bl	80007a4 <MCAL_GPIO_Init>
		if(UART_ConfigPtr->USART_Mode & (USART_FLOW_CONTROL_RTS)){
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00b      	beq.n	8000e5e <MCAL_UART_GPIO_SetPins+0x1d2>
			GPIO_PinConfig_t rts3 = {GPIOB, GPIO_PIN_14, GPIO_MODE_AF_INPUT, GPIO_OUTPUT_SPEED_NONE};
 8000e46:	4a15      	ldr	r2, [pc, #84]	; (8000e9c <MCAL_UART_GPIO_SetPins+0x210>)
 8000e48:	f107 0308 	add.w	r3, r7, #8
 8000e4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e50:	e883 0003 	stmia.w	r3, {r0, r1}
			MCAL_GPIO_Init(&rts3);
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fca3 	bl	80007a4 <MCAL_GPIO_Init>
}
 8000e5e:	bf00      	nop
 8000e60:	3768      	adds	r7, #104	; 0x68
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40013800 	.word	0x40013800
 8000e6c:	08001310 	.word	0x08001310
 8000e70:	08001318 	.word	0x08001318
 8000e74:	08001320 	.word	0x08001320
 8000e78:	08001328 	.word	0x08001328
 8000e7c:	40004400 	.word	0x40004400
 8000e80:	08001330 	.word	0x08001330
 8000e84:	08001338 	.word	0x08001338
 8000e88:	08001340 	.word	0x08001340
 8000e8c:	08001348 	.word	0x08001348
 8000e90:	08001350 	.word	0x08001350
 8000e94:	08001358 	.word	0x08001358
 8000e98:	08001360 	.word	0x08001360
 8000e9c:	08001368 	.word	0x08001368

08000ea0 <MCAL_UART_Transmit>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_UART_Transmit(UART_Config_t* UART_ConfigPtr, uint16_t* pTxBuffer, USART_Polling_Mechanism_t Polling_Status){
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	71fb      	strb	r3, [r7, #7]

	//Check for Polling_Status
	if(Polling_Status == UART_Polling_Enable)
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d107      	bne.n	8000ec4 <MCAL_UART_Transmit+0x24>
		//wait for transmit data register to be empty
		while( ! ( (UART_ConfigPtr->USARTx->SR) & (1<<7) ) );
 8000eb4:	bf00      	nop
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0f8      	beq.n	8000eb6 <MCAL_UART_Transmit+0x16>
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit
	 * */

	if(UART_ConfigPtr->USART_WordLength == USART_WORD_LENGTH_9)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ecc:	d108      	bne.n	8000ee0 <MCAL_UART_Transmit+0x40>
	{
		UART_ConfigPtr->USARTx->DR = ( (*pTxBuffer) & 0x1FF );
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	881b      	ldrh	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000edc:	605a      	str	r2, [r3, #4]
	else
	{
		UART_ConfigPtr->USARTx->DR = ( (*pTxBuffer) & 0x0FF );
	}

}
 8000ede:	e006      	b.n	8000eee <MCAL_UART_Transmit+0x4e>
		UART_ConfigPtr->USARTx->DR = ( (*pTxBuffer) & 0x0FF );
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	605a      	str	r2, [r3, #4]
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <MCAL_UART_Receive>:
* @retval 			- None.
*
* Note				- Supports for now Asynchronous Mode only with 8Mhz Clock
*
*/
void MCAL_UART_Receive (UART_Config_t* UART_ConfigPtr, uint16_t* pTxBuffer, USART_Polling_Mechanism_t Polling_Status){
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	4613      	mov	r3, r2
 8000f04:	71fb      	strb	r3, [r7, #7]

	//Check for Polling_Status
	if(Polling_Status == UART_Polling_Enable)
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d107      	bne.n	8000f1c <MCAL_UART_Receive+0x24>
		//wait for receive data register to be empty
		while( ! ( (UART_ConfigPtr->USARTx->SR) & (1<<5) ) );
 8000f0c:	bf00      	nop
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0320 	and.w	r3, r3, #32
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f8      	beq.n	8000f0e <MCAL_UART_Receive+0x16>
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit
	 * */

	if(UART_ConfigPtr->USART_WordLength == USART_WORD_LENGTH_9)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f24:	d116      	bne.n	8000f54 <MCAL_UART_Receive+0x5c>
	{
		if(UART_ConfigPtr->USART_Parity == USART_PARITY_DISABLE)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d109      	bne.n	8000f42 <MCAL_UART_Receive+0x4a>
		{
			*((uint16_t*)pTxBuffer) = (UART_ConfigPtr->USARTx->DR & (uint16_t)0x1FF);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	b29b      	uxth	r3, r3
 8000f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	801a      	strh	r2, [r3, #0]
		{
			*((uint16_t*)pTxBuffer) = (UART_ConfigPtr->USARTx->DR & (uint8_t)0x7F);
		}
	}

}
 8000f40:	e01e      	b.n	8000f80 <MCAL_UART_Receive+0x88>
			*((uint16_t*)pTxBuffer) = (UART_ConfigPtr->USARTx->DR & (uint8_t)0xFF);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	801a      	strh	r2, [r3, #0]
}
 8000f52:	e015      	b.n	8000f80 <MCAL_UART_Receive+0x88>
		if(UART_ConfigPtr->USART_Parity == USART_PARITY_DISABLE)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	691b      	ldr	r3, [r3, #16]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d108      	bne.n	8000f6e <MCAL_UART_Receive+0x76>
			*((uint16_t*)pTxBuffer) = (UART_ConfigPtr->USARTx->DR & (uint8_t)0xFF);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	801a      	strh	r2, [r3, #0]
}
 8000f6c:	e008      	b.n	8000f80 <MCAL_UART_Receive+0x88>
			*((uint16_t*)pTxBuffer) = (UART_ConfigPtr->USARTx->DR & (uint8_t)0x7F);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	801a      	strh	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bc80      	pop	{r7}
 8000f88:	4770      	bx	lr
	...

08000f8c <USART1_IRQHandler>:
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										ISRs Definitions
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-

void USART1_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[0]();
 8000f90:	4b02      	ldr	r3, [pc, #8]	; (8000f9c <USART1_IRQHandler+0x10>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4798      	blx	r3
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000009c 	.word	0x2000009c

08000fa0 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[1]();
 8000fa4:	4b02      	ldr	r3, [pc, #8]	; (8000fb0 <USART2_IRQHandler+0x10>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	4798      	blx	r3
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000009c 	.word	0x2000009c

08000fb4 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	//Calling the call back function
	g_IRQ_CallBackPtr[2]();
 8000fb8:	4b02      	ldr	r3, [pc, #8]	; (8000fc4 <USART3_IRQHandler+0x10>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4798      	blx	r3
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000009c 	.word	0x2000009c

08000fc8 <main>:

//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										MAIN
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	setup();
 8000fcc:	f000 f82a 	bl	8001024 <setup>
    while (1);
 8000fd0:	e7fe      	b.n	8000fd0 <main+0x8>
	...

08000fd4 <CloseALL>:

//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//								FUNCTIONS IMPLEMENTATION
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
void CloseALL(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(&LED1, GPIO_PIN_SET);
 8000fd8:	2101      	movs	r1, #1
 8000fda:	480c      	ldr	r0, [pc, #48]	; (800100c <CloseALL+0x38>)
 8000fdc:	f7ff fcec 	bl	80009b8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&LED2, GPIO_PIN_SET);
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	480b      	ldr	r0, [pc, #44]	; (8001010 <CloseALL+0x3c>)
 8000fe4:	f7ff fce8 	bl	80009b8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&LED3, GPIO_PIN_SET);
 8000fe8:	2101      	movs	r1, #1
 8000fea:	480a      	ldr	r0, [pc, #40]	; (8001014 <CloseALL+0x40>)
 8000fec:	f7ff fce4 	bl	80009b8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&LED4, GPIO_PIN_SET);
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	4809      	ldr	r0, [pc, #36]	; (8001018 <CloseALL+0x44>)
 8000ff4:	f7ff fce0 	bl	80009b8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&LED5, GPIO_PIN_SET);
 8000ff8:	2101      	movs	r1, #1
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <CloseALL+0x48>)
 8000ffc:	f7ff fcdc 	bl	80009b8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(&LED6, GPIO_PIN_SET);
 8001000:	2101      	movs	r1, #1
 8001002:	4807      	ldr	r0, [pc, #28]	; (8001020 <CloseALL+0x4c>)
 8001004:	f7ff fcd8 	bl	80009b8 <MCAL_GPIO_WritePin>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000004 	.word	0x20000004
 8001010:	2000000c 	.word	0x2000000c
 8001014:	20000014 	.word	0x20000014
 8001018:	2000001c 	.word	0x2000001c
 800101c:	20000024 	.word	0x20000024
 8001020:	2000002c 	.word	0x2000002c

08001024 <setup>:

void setup(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0

	//EXTI Config
	Button_changeColor.EXTI_Pin = EXTIPA1;
 8001028:	4b36      	ldr	r3, [pc, #216]	; (8001104 <setup+0xe0>)
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
 800102e:	4b35      	ldr	r3, [pc, #212]	; (8001104 <setup+0xe0>)
 8001030:	4a35      	ldr	r2, [pc, #212]	; (8001108 <setup+0xe4>)
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	4b33      	ldr	r3, [pc, #204]	; (8001104 <setup+0xe0>)
 8001036:	2202      	movs	r2, #2
 8001038:	811a      	strh	r2, [r3, #8]
 800103a:	4b32      	ldr	r3, [pc, #200]	; (8001104 <setup+0xe0>)
 800103c:	2208      	movs	r2, #8
 800103e:	729a      	strb	r2, [r3, #10]
 8001040:	4b30      	ldr	r3, [pc, #192]	; (8001104 <setup+0xe0>)
 8001042:	2200      	movs	r2, #0
 8001044:	72da      	strb	r2, [r3, #11]
	Button_changeColor.EXTI_Trigger = EXTI_TRIGGER_RISING;
 8001046:	4b2f      	ldr	r3, [pc, #188]	; (8001104 <setup+0xe0>)
 8001048:	2200      	movs	r2, #0
 800104a:	731a      	strb	r2, [r3, #12]
	Button_changeColor.EXTI_Enable = EXTI_IRQ_ENABLE;
 800104c:	4b2d      	ldr	r3, [pc, #180]	; (8001104 <setup+0xe0>)
 800104e:	2201      	movs	r2, #1
 8001050:	735a      	strb	r2, [r3, #13]
	Button_changeColor.IRQ_CallBackPtr = NextColor;
 8001052:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <setup+0xe0>)
 8001054:	4a2d      	ldr	r2, [pc, #180]	; (800110c <setup+0xe8>)
 8001056:	611a      	str	r2, [r3, #16]
	Button_sendColor.EXTI_Pin = EXTIPB0;
 8001058:	4b2d      	ldr	r3, [pc, #180]	; (8001110 <setup+0xec>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
 800105e:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <setup+0xec>)
 8001060:	4a2c      	ldr	r2, [pc, #176]	; (8001114 <setup+0xf0>)
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <setup+0xec>)
 8001066:	2201      	movs	r2, #1
 8001068:	811a      	strh	r2, [r3, #8]
 800106a:	4b29      	ldr	r3, [pc, #164]	; (8001110 <setup+0xec>)
 800106c:	2208      	movs	r2, #8
 800106e:	729a      	strb	r2, [r3, #10]
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <setup+0xec>)
 8001072:	2200      	movs	r2, #0
 8001074:	72da      	strb	r2, [r3, #11]
	Button_sendColor.EXTI_Trigger = EXTI_TRIGGER_FALLING;
 8001076:	4b26      	ldr	r3, [pc, #152]	; (8001110 <setup+0xec>)
 8001078:	2201      	movs	r2, #1
 800107a:	731a      	strb	r2, [r3, #12]
	Button_sendColor.EXTI_Enable = EXTI_IRQ_ENABLE;
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <setup+0xec>)
 800107e:	2201      	movs	r2, #1
 8001080:	735a      	strb	r2, [r3, #13]
	Button_sendColor.IRQ_CallBackPtr = SendColor;
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <setup+0xec>)
 8001084:	4a24      	ldr	r2, [pc, #144]	; (8001118 <setup+0xf4>)
 8001086:	611a      	str	r2, [r3, #16]
	//UART Config
	uart1.USARTx 			= USART1;
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <setup+0xf8>)
 800108a:	4a25      	ldr	r2, [pc, #148]	; (8001120 <setup+0xfc>)
 800108c:	601a      	str	r2, [r3, #0]
	uart1.USART_BaudRate 	= USART_BAUDRATE_115200;
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <setup+0xf8>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001094:	609a      	str	r2, [r3, #8]
	uart1.USART_WordLength 	= USART_WORD_LENGTH_8;
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <setup+0xf8>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
	uart1.USART_Parity 		= USART_PARITY_DISABLE;
 800109c:	4b1f      	ldr	r3, [pc, #124]	; (800111c <setup+0xf8>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
	uart1.USART_StopBits 	= USART_STOP_BIT_1;
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <setup+0xf8>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
	uart1.USART_FlowControl = USART_FLOW_CONTROL_DISABLE;
 80010a8:	4b1c      	ldr	r3, [pc, #112]	; (800111c <setup+0xf8>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
	uart1.USART_Mode 		= USART_MODE_TX_RX;
 80010ae:	4b1b      	ldr	r3, [pc, #108]	; (800111c <setup+0xf8>)
 80010b0:	220c      	movs	r2, #12
 80010b2:	605a      	str	r2, [r3, #4]
	uart1.USART_IRQ_EN 		= USART_IE_RXNE;
 80010b4:	4b19      	ldr	r3, [pc, #100]	; (800111c <setup+0xf8>)
 80010b6:	2220      	movs	r2, #32
 80010b8:	61da      	str	r2, [r3, #28]
	uart1.IRQ_CallBackPtr 	= UART1_IRQ_CallBack;
 80010ba:	4b18      	ldr	r3, [pc, #96]	; (800111c <setup+0xf8>)
 80010bc:	4a19      	ldr	r2, [pc, #100]	; (8001124 <setup+0x100>)
 80010be:	621a      	str	r2, [r3, #32]

	//GPIO Init
	MCAL_GPIO_Init(&LED1);
 80010c0:	4819      	ldr	r0, [pc, #100]	; (8001128 <setup+0x104>)
 80010c2:	f7ff fb6f 	bl	80007a4 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LED2);
 80010c6:	4819      	ldr	r0, [pc, #100]	; (800112c <setup+0x108>)
 80010c8:	f7ff fb6c 	bl	80007a4 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LED3);
 80010cc:	4818      	ldr	r0, [pc, #96]	; (8001130 <setup+0x10c>)
 80010ce:	f7ff fb69 	bl	80007a4 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LED4);
 80010d2:	4818      	ldr	r0, [pc, #96]	; (8001134 <setup+0x110>)
 80010d4:	f7ff fb66 	bl	80007a4 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LED5);
 80010d8:	4817      	ldr	r0, [pc, #92]	; (8001138 <setup+0x114>)
 80010da:	f7ff fb63 	bl	80007a4 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(&LED6);
 80010de:	4817      	ldr	r0, [pc, #92]	; (800113c <setup+0x118>)
 80010e0:	f7ff fb60 	bl	80007a4 <MCAL_GPIO_Init>
	CloseALL();
 80010e4:	f7ff ff76 	bl	8000fd4 <CloseALL>
	//EXTI Init
	MCAL_EXTI_Init(&Button_changeColor);
 80010e8:	4806      	ldr	r0, [pc, #24]	; (8001104 <setup+0xe0>)
 80010ea:	f7ff f90d 	bl	8000308 <MCAL_EXTI_Init>
	MCAL_EXTI_Init(&Button_sendColor);
 80010ee:	4808      	ldr	r0, [pc, #32]	; (8001110 <setup+0xec>)
 80010f0:	f7ff f90a 	bl	8000308 <MCAL_EXTI_Init>
	//UART Init
	MCAL_UART_Init(&uart1);
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <setup+0xf8>)
 80010f6:	f7ff fced 	bl	8000ad4 <MCAL_UART_Init>
	MCAL_UART_GPIO_SetPins(&uart1);
 80010fa:	4808      	ldr	r0, [pc, #32]	; (800111c <setup+0xf8>)
 80010fc:	f7ff fdc6 	bl	8000c8c <MCAL_UART_GPIO_SetPins>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200000cc 	.word	0x200000cc
 8001108:	40010800 	.word	0x40010800
 800110c:	080011e5 	.word	0x080011e5
 8001110:	200000e0 	.word	0x200000e0
 8001114:	40010c00 	.word	0x40010c00
 8001118:	08001219 	.word	0x08001219
 800111c:	200000a8 	.word	0x200000a8
 8001120:	40013800 	.word	0x40013800
 8001124:	08001235 	.word	0x08001235
 8001128:	20000004 	.word	0x20000004
 800112c:	2000000c 	.word	0x2000000c
 8001130:	20000014 	.word	0x20000014
 8001134:	2000001c 	.word	0x2000001c
 8001138:	20000024 	.word	0x20000024
 800113c:	2000002c 	.word	0x2000002c

08001140 <SetColor>:

void SetColor(uint8_t i)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
	switch(i){
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	3b31      	subs	r3, #49	; 0x31
 800114e:	2b05      	cmp	r3, #5
 8001150:	d838      	bhi.n	80011c4 <SetColor+0x84>
 8001152:	a201      	add	r2, pc, #4	; (adr r2, 8001158 <SetColor+0x18>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	08001171 	.word	0x08001171
 800115c:	0800117f 	.word	0x0800117f
 8001160:	0800118d 	.word	0x0800118d
 8001164:	0800119b 	.word	0x0800119b
 8001168:	080011a9 	.word	0x080011a9
 800116c:	080011b7 	.word	0x080011b7
		case '1':
			CloseALL();
 8001170:	f7ff ff30 	bl	8000fd4 <CloseALL>
			MCAL_GPIO_WritePin(&LED1, GPIO_PIN_CLEAR);
 8001174:	2100      	movs	r1, #0
 8001176:	4815      	ldr	r0, [pc, #84]	; (80011cc <SetColor+0x8c>)
 8001178:	f7ff fc1e 	bl	80009b8 <MCAL_GPIO_WritePin>
			break;
 800117c:	e022      	b.n	80011c4 <SetColor+0x84>
		case '2':
			CloseALL();
 800117e:	f7ff ff29 	bl	8000fd4 <CloseALL>
			MCAL_GPIO_WritePin(&LED2, GPIO_PIN_CLEAR);
 8001182:	2100      	movs	r1, #0
 8001184:	4812      	ldr	r0, [pc, #72]	; (80011d0 <SetColor+0x90>)
 8001186:	f7ff fc17 	bl	80009b8 <MCAL_GPIO_WritePin>
			break;
 800118a:	e01b      	b.n	80011c4 <SetColor+0x84>
		case '3':
			CloseALL();
 800118c:	f7ff ff22 	bl	8000fd4 <CloseALL>
			MCAL_GPIO_WritePin(&LED3, GPIO_PIN_CLEAR);
 8001190:	2100      	movs	r1, #0
 8001192:	4810      	ldr	r0, [pc, #64]	; (80011d4 <SetColor+0x94>)
 8001194:	f7ff fc10 	bl	80009b8 <MCAL_GPIO_WritePin>
			break;
 8001198:	e014      	b.n	80011c4 <SetColor+0x84>
		case '4':
			CloseALL();
 800119a:	f7ff ff1b 	bl	8000fd4 <CloseALL>
			MCAL_GPIO_WritePin(&LED4, GPIO_PIN_CLEAR);
 800119e:	2100      	movs	r1, #0
 80011a0:	480d      	ldr	r0, [pc, #52]	; (80011d8 <SetColor+0x98>)
 80011a2:	f7ff fc09 	bl	80009b8 <MCAL_GPIO_WritePin>
			break;
 80011a6:	e00d      	b.n	80011c4 <SetColor+0x84>
		case '5':
			CloseALL();
 80011a8:	f7ff ff14 	bl	8000fd4 <CloseALL>
			MCAL_GPIO_WritePin(&LED5, GPIO_PIN_CLEAR);
 80011ac:	2100      	movs	r1, #0
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <SetColor+0x9c>)
 80011b0:	f7ff fc02 	bl	80009b8 <MCAL_GPIO_WritePin>
			break;
 80011b4:	e006      	b.n	80011c4 <SetColor+0x84>
		case '6':
			CloseALL();
 80011b6:	f7ff ff0d 	bl	8000fd4 <CloseALL>
			MCAL_GPIO_WritePin(&LED6, GPIO_PIN_CLEAR);
 80011ba:	2100      	movs	r1, #0
 80011bc:	4808      	ldr	r0, [pc, #32]	; (80011e0 <SetColor+0xa0>)
 80011be:	f7ff fbfb 	bl	80009b8 <MCAL_GPIO_WritePin>
			break;
 80011c2:	bf00      	nop
	}
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000004 	.word	0x20000004
 80011d0:	2000000c 	.word	0x2000000c
 80011d4:	20000014 	.word	0x20000014
 80011d8:	2000001c 	.word	0x2000001c
 80011dc:	20000024 	.word	0x20000024
 80011e0:	2000002c 	.word	0x2000002c

080011e4 <NextColor>:

//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
//										CallBacks
//-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*--*-*-*-*-*-*-*-*-*-*-*-
void NextColor(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	Led_Number++;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <NextColor+0x30>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b08      	ldr	r3, [pc, #32]	; (8001214 <NextColor+0x30>)
 80011f2:	801a      	strh	r2, [r3, #0]
	if(Led_Number == '7')
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <NextColor+0x30>)
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	2b37      	cmp	r3, #55	; 0x37
 80011fa:	d102      	bne.n	8001202 <NextColor+0x1e>
		Led_Number = '1';
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <NextColor+0x30>)
 80011fe:	2231      	movs	r2, #49	; 0x31
 8001200:	801a      	strh	r2, [r3, #0]
	SetColor(Led_Number);
 8001202:	4b04      	ldr	r3, [pc, #16]	; (8001214 <NextColor+0x30>)
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ff99 	bl	8001140 <SetColor>
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000000 	.word	0x20000000

08001218 <SendColor>:

void SendColor(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
	MCAL_UART_Transmit(&uart1, &Led_Number, UART_Polling_Enable);
 800121c:	2201      	movs	r2, #1
 800121e:	4903      	ldr	r1, [pc, #12]	; (800122c <SendColor+0x14>)
 8001220:	4803      	ldr	r0, [pc, #12]	; (8001230 <SendColor+0x18>)
 8001222:	f7ff fe3d 	bl	8000ea0 <MCAL_UART_Transmit>
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000
 8001230:	200000a8 	.word	0x200000a8

08001234 <UART1_IRQ_CallBack>:

void UART1_IRQ_CallBack(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	MCAL_UART_Receive(&uart1, &Led_Number, UART_Polling_Disable);
 8001238:	2200      	movs	r2, #0
 800123a:	4906      	ldr	r1, [pc, #24]	; (8001254 <UART1_IRQ_CallBack+0x20>)
 800123c:	4806      	ldr	r0, [pc, #24]	; (8001258 <UART1_IRQ_CallBack+0x24>)
 800123e:	f7ff fe5b 	bl	8000ef8 <MCAL_UART_Receive>
	SetColor(Led_Number);
 8001242:	4b04      	ldr	r3, [pc, #16]	; (8001254 <UART1_IRQ_CallBack+0x20>)
 8001244:	881b      	ldrh	r3, [r3, #0]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff79 	bl	8001140 <SetColor>
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000
 8001258:	200000a8 	.word	0x200000a8

0800125c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800125e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001260:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <LoopForever+0x6>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <LoopForever+0xe>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <LoopForever+0x16>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800128a:	f000 f811 	bl	80012b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800128e:	f7ff fe9b 	bl	8000fc8 <main>

08001292 <LoopForever>:

LoopForever:
    b LoopForever
 8001292:	e7fe      	b.n	8001292 <LoopForever>
  ldr   r0, =_estack
 8001294:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80012a0:	08001390 	.word	0x08001390
  ldr r2, =_sbss
 80012a4:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80012a8:	200000f4 	.word	0x200000f4

080012ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_2_IRQHandler>
	...

080012b0 <__libc_init_array>:
 80012b0:	b570      	push	{r4, r5, r6, lr}
 80012b2:	2500      	movs	r5, #0
 80012b4:	4e0c      	ldr	r6, [pc, #48]	; (80012e8 <__libc_init_array+0x38>)
 80012b6:	4c0d      	ldr	r4, [pc, #52]	; (80012ec <__libc_init_array+0x3c>)
 80012b8:	1ba4      	subs	r4, r4, r6
 80012ba:	10a4      	asrs	r4, r4, #2
 80012bc:	42a5      	cmp	r5, r4
 80012be:	d109      	bne.n	80012d4 <__libc_init_array+0x24>
 80012c0:	f000 f81a 	bl	80012f8 <_init>
 80012c4:	2500      	movs	r5, #0
 80012c6:	4e0a      	ldr	r6, [pc, #40]	; (80012f0 <__libc_init_array+0x40>)
 80012c8:	4c0a      	ldr	r4, [pc, #40]	; (80012f4 <__libc_init_array+0x44>)
 80012ca:	1ba4      	subs	r4, r4, r6
 80012cc:	10a4      	asrs	r4, r4, #2
 80012ce:	42a5      	cmp	r5, r4
 80012d0:	d105      	bne.n	80012de <__libc_init_array+0x2e>
 80012d2:	bd70      	pop	{r4, r5, r6, pc}
 80012d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012d8:	4798      	blx	r3
 80012da:	3501      	adds	r5, #1
 80012dc:	e7ee      	b.n	80012bc <__libc_init_array+0xc>
 80012de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012e2:	4798      	blx	r3
 80012e4:	3501      	adds	r5, #1
 80012e6:	e7f2      	b.n	80012ce <__libc_init_array+0x1e>
 80012e8:	08001388 	.word	0x08001388
 80012ec:	08001388 	.word	0x08001388
 80012f0:	08001388 	.word	0x08001388
 80012f4:	0800138c 	.word	0x0800138c

080012f8 <_init>:
 80012f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012fa:	bf00      	nop
 80012fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012fe:	bc08      	pop	{r3}
 8001300:	469e      	mov	lr, r3
 8001302:	4770      	bx	lr

08001304 <_fini>:
 8001304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001306:	bf00      	nop
 8001308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800130a:	bc08      	pop	{r3}
 800130c:	469e      	mov	lr, r3
 800130e:	4770      	bx	lr
